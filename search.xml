<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[自动生成SDK 上传Maven仓库的版本号插件]]></title>
      <url>http://wangyeming.github.com/2019/11/06/gradle-plugin-for-auto-version/</url>
      <content type="html"><![CDATA[<p>在Android开发中，通过maven仓库管理SDK的版本、上传、依赖是很常见的方式。而其中版本号的管理是很多人忽略的点。本篇以实现一个自动管理SDK上传maven版本号的gradle插件为目标，说一说其中的门道。</p>
<a id="more"></a>

<h1 id="通过Maven管理SDK包"><a href="#通过Maven管理SDK包" class="headerlink" title="通过Maven管理SDK包"></a>通过Maven管理SDK包</h1><h2 id="三类第三方库"><a href="#三类第三方库" class="headerlink" title="三类第三方库"></a>三类第三方库</h2><p>Android开发中，我们以『包』的形式引入第三方的库，大致可以分为三类：</p>
<ul>
<li>以C和C++为语言生成的动态连接库，也就是so文件</li>
<li>以Java为语言生成的归档文件，也就是Jar文件</li>
<li>Android独有的包含资源文件的Android模块包，也就是aar文件</li>
</ul>
<h2 id="Gradle支持对maven仓库包依赖"><a href="#Gradle支持对maven仓库包依赖" class="headerlink" title="Gradle支持对maven仓库包依赖"></a>Gradle支持对maven仓库包依赖</h2><p>通常除了直接导入包文件到项目中之外，Android官方提供的默认的依赖及编译工具Gradle，支持项目直接引入对Maven库中已有的资源包进行依赖。作为Android开发者而言，再熟悉不过了。例如依赖okhttp，我们可能只需要在模块的build.gradle文件中加入这么一行：</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">implementation <span class="string">'com.squareup.okhttp3:okhttp:3.12.0'</span></span><br></pre></td></tr></table></figure>

<h2 id="maven插件上传SDK"><a href="#maven插件上传SDK" class="headerlink" title="maven插件上传SDK"></a>maven插件上传SDK</h2><p>对于SDK开发者而言，通常我们也是期望把自己的SDK上传到指定的maven仓库中，而客户端只需要简单的申明对SDK的某个版本的依赖，就可以了。通常情况下，我们会通过一个叫「maven」的gradle插件，来帮助我们上传SDK到maven仓库中。我们来简单回顾一下步骤：</p>
<p>首先是在模块的build.gralde下，申明引入『maven』插件：</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apply <span class="string">plugin:</span> <span class="string">'maven'</span></span><br></pre></td></tr></table></figure>

<p>假设我们的SDK包含Android的资源，也就是生成aar文件，那么我们申明如下：</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">uploadArchives&#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        mavenDeployer &#123;</span><br><span class="line">            repository(<span class="string">url:</span> release_repository_url) &#123;</span><br><span class="line">                authentication(<span class="string">userName:</span> <span class="string">"your user name"</span>, <span class="string">password:</span> <span class="string">"your password"</span>)</span><br><span class="line">            &#125;</span><br><span class="line">            snapshotRepository(<span class="string">url:</span> snapshot_repository_url) &#123;</span><br><span class="line">                authentication(<span class="string">userName:</span> <span class="string">"your user name"</span>, <span class="string">password:</span> <span class="string">"your password"</span>)</span><br><span class="line">            &#125;</span><br><span class="line">            pom.version = <span class="string">"版本名称"</span></span><br><span class="line">            pom.project &#123;</span><br><span class="line">                artifactId = <span class="string">"your artifactId"</span></span><br><span class="line">                groupId = <span class="string">"your group id"</span></span><br><span class="line">                packaging = <span class="string">'aar'</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以前面说的okhttp为例，”com.squareup.okhttp3”就是groupId, “okhttp”是artifactId，版本号则是在pom.version处申明。</p>
<p>到这里，回顾完一个Android SDK基本的上传流程了。接下来我们来说下版本号的问题。</p>
<h1 id="SDK版本号"><a href="#SDK版本号" class="headerlink" title="SDK版本号"></a>SDK版本号</h1><h2 id="正式版和快照版"><a href="#正式版和快照版" class="headerlink" title="正式版和快照版"></a>正式版和快照版</h2><p>maven仓库通常分为snapshot快照仓库和release发布仓库，snapshot快照仓库用于保存开发过程中的不稳定版本，release正式仓库则是用来保存稳定的发行版本。具体到名称，只需要在该模块的版本号后加上-SNAPSHOT即可(大写)。maven仓库的管理允许统一版本名的快照包重复更新，但是对于发布版本则不允许修改，必须升级版本号。</p>
<h2 id="A-B-C"><a href="#A-B-C" class="headerlink" title="A.B.C"></a>A.B.C</h2><p>对于SDK的管理者而言，一个规范合理的版本号控制流程是很重要的。通常业内的做法是A.B.C的做法，</p>
<p>A代表大版本号，大版本号的变动通常意味着非常大幅度的升级，甚至可以不保证向低版本兼容。例如著名的异步流编程API，ReactiveX，1.x版本和2.x版本有相当多的改变，1.x的某些写法在2.x版本中已经是不兼容了。这个大版本号很适合做SDK的大幅重构，重大基础库的迁移等，例如从Android Support库转而采用Android-X库。</p>
<p>B代表中版本号，也是我们日常发版升级对应的版本号，例如1.0.0 -&gt; 1.1.0类似如此的升级。</p>
<p>C代表的是小版本号，目的是在版本之间，处理因为bug修复等情况的临时版本，例如1.0.0版本发布后，发现了一个重要bug，这是可以发布1.0.1这样的版本来修复问题。</p>
<h2 id="版本号管理的烦恼"><a href="#版本号管理的烦恼" class="headerlink" title="版本号管理的烦恼"></a>版本号管理的烦恼</h2><p>那我们说，版本号的烦恼在哪里呢？根据我自己的日常开发经验，可能有这么几处：</p>
<ul>
<li><p>缺少版本上传的历史记录，这一点可以说是很多SDK的痛点了，回顾某个很久之前发布的版本，忘记打tag，还原不了当时的代码情况。某个成员意外的执行上传任务，覆盖掉了原本的包，引入了包含bug甚至是编译不过的代码。</p>
</li>
<li><p>版本号的唯一性，在开发中我们通常会先集成快照包来开发和提测，在上线前某个时刻替换成正式版本。而快照包的依赖存在一些问题，例如，Android Studio的gradle缓存问题，有时候明明已经上传最新的快照包，但是IDE就是不更新。每次手动修改版本号，且不说麻烦，还没办法对应的上git提交记录。</p>
</li>
</ul>
<p>那么有什么好办法处理这些问题呢？</p>
<h1 id="自动管理版本号的Gradle插件"><a href="#自动管理版本号的Gradle插件" class="headerlink" title="自动管理版本号的Gradle插件"></a>自动管理版本号的Gradle插件</h1><p>我这里的处理方式是自己写一个简单的gradle插件，用来自动管理SDK上传Maven仓库时的版本号。</p>
<h2 id="插件功能的设计"><a href="#插件功能的设计" class="headerlink" title="插件功能的设计"></a>插件功能的设计</h2><p>首先我们希望每次上传新包到Maven仓库，能够记录一下上传记录，包括：上传人，上传时间，上传的版本号, 当前的分支名，最后一次提交的commit messgae等等</p>
<p>其次，版本名上我们希望附带两个功能，一个是指定是否为快照包，自动的在版本号后面加上-SNAPSHOT。一个是可以选择在版本号后面跟上唯一性的id。</p>
<h2 id="Gradle插件的开发"><a href="#Gradle插件的开发" class="headerlink" title="Gradle插件的开发"></a>Gradle插件的开发</h2><h3 id="Gradle插件开发"><a href="#Gradle插件开发" class="headerlink" title="Gradle插件开发"></a>Gradle插件开发</h3><p>首先是如何开发Gradle插件，这里我推荐这篇文章<a href="https://www.jianshu.com/p/3191c3955194" target="_blank" rel="noopener">Gradle插件开发指南</a><br>。这里我们开发一个独立的gradle插件项目，并上传到maven仓库中。</p>
<h3 id="新建Gradle插件工程"><a href="#新建Gradle插件工程" class="headerlink" title="新建Gradle插件工程"></a>新建Gradle插件工程</h3><p>Gradle插件的开发建议选择Intellij IEAD, 通过创建Gradle项目即可，语言我这里指定Groovy, 其实Java或者Kotlin甚至是Scala都是可以的。</p>
<p><img src="/img/2019-11-06-gradle-plugin-for-auto-version-01.png" alt></p>
<p>接着设置好gradle项目需要的GroupId, ArtifactId和Version信息，创建好工程。此时工程目录结构：</p>
<p><img src="/img/2019-11-06-gradle-plugin-for-auto-version-02.png" alt></p>
<p>其中groovy目录用来存放groovy代码，java目录存放java代码，resources目录用来声明当前项目所需的资源，后面我们介绍。其中的build.gradle文件看起来是这样：</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">plugins &#123;</span><br><span class="line">    id <span class="string">'groovy'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">group <span class="string">'xxx.xxxx'</span></span><br><span class="line">version <span class="string">'1.0-SNAPSHOT'</span></span><br><span class="line"></span><br><span class="line">repositories &#123;</span><br><span class="line">    mavenCentral()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    compile <span class="string">'org.codehaus.groovy:groovy-all:2.3.11'</span></span><br><span class="line">    testCompile <span class="string">group:</span> <span class="string">'junit'</span>, <span class="string">name:</span> <span class="string">'junit'</span>, <span class="string">version:</span> <span class="string">'4.12'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果想用Android Studio来创建Gradle工程的话，可能会麻烦一些，在一个Android工程中，选择新建 Java Library module “plugin”，然后手动删除掉不需要的目录和文件，手动新建resources目录。</p>
<h3 id="实现功能"><a href="#实现功能" class="headerlink" title="实现功能"></a>实现功能</h3><p>首先是Gradle插件开发的模版套路，实现Plugin<project>接口，其中需要实现apply方法</project></p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AutoVersionPlugin</span> <span class="keyword">implements</span> <span class="title">Plugin</span>&lt;<span class="title">Project</span>&gt; &#123;</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">void</span> apply(Project project) &#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>接着在resources文件夹下新建目录及文件：META-INF/gradle-plugins/auto_version_plugin.properties</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//xxx对应着AutoVersionPlugin的完整包名</span></span><br><span class="line">implementation-<span class="class"><span class="keyword">class</span>=<span class="title">xxx</span>.<span class="title">AutoVersionPlugin</span></span></span><br></pre></td></tr></table></figure>

<p>到这一步，Gradle的壳就搭建起来了，接下来我们需要写业务逻辑：</p>
<p>第一步我们需要捕获maven插件的uploadArchives的task, 这里需要注意到的一点是uploadArchives属于工程的自定义task，而自定义task需要在工程的after evaluate执行完之后才能拿的到:</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">project.afterEvaluate &#123;</span><br><span class="line">    <span class="comment">//Only after evaluate, we can find custom tasks</span></span><br><span class="line">    Task uploadTask = it.tasks.findByPath(<span class="string">"$&#123;it.path&#125;:uploadArchives"</span>)</span><br><span class="line">    uploadTask.doFirst &#123;</span><br><span class="line">        <span class="comment">//在uploadArchives Task执行之前做一些事</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>好的，有了这一步的基础，我们接下来尝试定义gradle插件中可以用的DSL。首先我们定义DSL字段：</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AutoVersion</span> &#123;</span></span><br><span class="line">    String version = <span class="string">''</span></span><br><span class="line">    String fixVersion = <span class="string">''</span></span><br><span class="line">    <span class="keyword">boolean</span> isSnapShot = <span class="literal">true</span></span><br><span class="line">    String gitPath = <span class="string">''</span></span><br><span class="line">    <span class="keyword">boolean</span> needFileLog = <span class="literal">false</span></span><br><span class="line">    String logFilePath</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>对应着实际调用就类似于：</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">autoVersion &#123;</span><br><span class="line">    version <span class="string">'1.0.0'</span></span><br><span class="line">    fixVersion <span class="string">'1.1.0-SNAPSHOT'</span></span><br><span class="line">    isSnapShot <span class="literal">true</span></span><br><span class="line">    needFileLog <span class="literal">true</span></span><br><span class="line">    logFilePath rootProject.projectDir.absolutePath + File.separator + <span class="string">'xxx'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>接着我们只需要，在Plugin的apply方法中创建对应的DSL即可：</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AutoVersionPlugin</span> <span class="keyword">implements</span> <span class="title">Plugin</span>&lt;<span class="title">Project</span>&gt; &#123;</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">void</span> apply(Project project) &#123;</span><br><span class="line">        AutoVersion autoVersion = project.getExtensions().create(<span class="string">"autoVersion"</span>, AutoVersion.<span class="keyword">class</span>)</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以上我们的准备工作ok了，接下来我们需要处理两个问题，如何修改uploadArchives中的版本号参数，以及如何获取当前工程git信息。</p>
<p>首先是处理uploadArchives，这个借助gradle的api就可以处理</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将Task uploadTask强转为Upload即可</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">def</span> changeUploadTaskVersion(Upload uploadTask, String version) &#123;</span><br><span class="line">        <span class="keyword">def</span> deployer = uploadTask.repositories.getByName(<span class="string">"mavenDeployer"</span>) <span class="keyword">as</span> DefaultGroovyMavenDeployer</span><br><span class="line">        deployer.pom.version = version</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其次是Git信息的获取，这里我们引入第三方库来帮助我们处理：</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">implementation <span class="string">'org.eclipse.jgit:org.eclipse.jgit:5.4.0.201906121030-r'</span></span><br></pre></td></tr></table></figure>

<p>这里我封装了GitInfo类，通过传入Git的路径，可以自动获取当前用户名，分支名，commit提交id和log记录等信息。</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GitInfo</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Git mGit</span><br><span class="line">    <span class="keyword">private</span> Repository mRepository</span><br><span class="line"></span><br><span class="line">    GitInfo(String gitPath) &#123;</span><br><span class="line">        String path = <span class="string">"$&#123;gitPath&#125;$&#123;File.separator&#125;.git"</span></span><br><span class="line">        File repoDir = <span class="keyword">new</span> File(path)</span><br><span class="line">        <span class="keyword">if</span> (!repoDir.exists()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">'no git info'</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        FileRepositoryBuilder builder = <span class="keyword">new</span> FileRepositoryBuilder()</span><br><span class="line">        mRepository = builder.setGitDir(repoDir)</span><br><span class="line">                .readEnvironment() <span class="comment">// scan environment GIT_* variables</span></span><br><span class="line">                .findGitDir() <span class="comment">// scan up the file system tree</span></span><br><span class="line">                .build()</span><br><span class="line">        mGit = <span class="keyword">new</span> Git(mRepository)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    String name() &#123;</span><br><span class="line">        Config config = mRepository.getConfig()</span><br><span class="line">        <span class="keyword">return</span> config.getString(<span class="string">"user"</span>, <span class="literal">null</span>, <span class="string">"name"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    String branch() &#123;</span><br><span class="line">        <span class="keyword">return</span> mRepository.branch</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    String commitId() &#123;</span><br><span class="line">        Iterable&lt;RevCommit&gt; logs = mGit.log().call()</span><br><span class="line">        Iterator&lt;RevCommit&gt; iterator = logs.iterator()</span><br><span class="line">        <span class="keyword">if</span> (!iterator.hasNext()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"no_commit_id"</span></span><br><span class="line">        &#125;</span><br><span class="line">        RevCommit revCommit = iterator.next()</span><br><span class="line">        <span class="keyword">if</span> (revCommit == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"no_commit_id"</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> revCommit.name</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    String shortCommitId() &#123;</span><br><span class="line">        Iterable&lt;RevCommit&gt; logs = mGit.log().call()</span><br><span class="line">        Iterator&lt;RevCommit&gt; iterator = logs.iterator()</span><br><span class="line">        <span class="keyword">if</span> (!iterator.hasNext()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"no_commit_id"</span></span><br><span class="line">        &#125;</span><br><span class="line">        RevCommit revCommit = iterator.next()</span><br><span class="line">        <span class="keyword">if</span> (revCommit == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"no_commit_id"</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> revCommit.name.substring(<span class="number">0</span>, <span class="number">7</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    String lastLog() &#123;</span><br><span class="line">        Iterable&lt;RevCommit&gt; logs = mGit.log().call()</span><br><span class="line">        Iterator&lt;RevCommit&gt; iterator = logs.iterator()</span><br><span class="line">        <span class="keyword">if</span> (!iterator.hasNext()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"message"</span></span><br><span class="line">        &#125;</span><br><span class="line">        RevCommit revCommit = iterator.next()</span><br><span class="line">        <span class="keyword">if</span> (revCommit == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"message"</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> revCommit.shortMessage</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其他的部分例如如何写文件，逻辑判断等这里就不多说了。</p>
<h2 id="上传插件及使用"><a href="#上传插件及使用" class="headerlink" title="上传插件及使用"></a>上传插件及使用</h2><p>上传方式之前就介绍过了，使用起来也很简单,在Android工程的根目录的build.gradle中，首先引入我们上传的插件：</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">buildscript &#123;</span><br><span class="line">    dependencies &#123;</span><br><span class="line">        classpath <span class="string">'$&#123;your group id&#125;:auto-version:$&#123;your version&#125;'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其次找到需要上传的模块所在的build.gradle文件，假设这里已经引入了maven插件并配置了uploadArchives task,<br>我们引入我们的auto-version plugin</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">apply <span class="string">plugin:</span> <span class="string">'auto_version_plugin'</span></span><br><span class="line"></span><br><span class="line">autoVersion &#123;</span><br><span class="line">    version <span class="string">'1.0.0'</span></span><br><span class="line">    fixVersion <span class="string">'1.1.0-SNAPSHOT'</span></span><br><span class="line">    isSnapShot <span class="literal">true</span></span><br><span class="line">    needFileLog <span class="literal">true</span></span><br><span class="line">    logFilePath rootProject.projectDir.absolutePath + File.separator + <span class="string">'xxx'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样，上传maven任务和此前就一样，执行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gradle uploadArchives</span><br></pre></td></tr></table></figure>

<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>本篇介绍了如何开发一个独立的gradle插件，来协助管理maven发布的版本号和记录发布信息。不足之处，多多包涵。</p>
]]></content>
      
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> Gradle </tag>
            
            <tag> Maven </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android的消息机制]]></title>
      <url>http://wangyeming.github.com/2019/04/08/android-handler/</url>
      <content type="html"><![CDATA[<p>三年前我写过一篇Android的消息机制的<a href="https://www.jianshu.com/p/0e372a9bd3b3" target="_blank" rel="noopener">文章</a>，时隔三年，重新再讲Handler，希望有新的理解和收获。</p>
<a id="more"></a>

<h1 id="Android线程的通信"><a href="#Android线程的通信" class="headerlink" title="Android线程的通信"></a>Android线程的通信</h1><h2 id="何为线程"><a href="#何为线程" class="headerlink" title="何为线程"></a>何为线程</h2><p>Android的消息机制，是也就是Handler机制，是Android上进行线程间通信的最重要的框架。既然说到线程间通信，那么线程是什么呢？</p>
<p>教科书上说，进程是资源分配的最小单位，线程是CPU调度的最小单位。不过更好的说法是，进程和线程都是一个时间段的描述，是CPU工作时间段的描述，不过是颗粒大小不同。</p>
<p>知乎上某位答主的回答很好，我就大段引用一下:</p>
<p>CPU+RAM+各种资源（比如显卡，光驱，键盘，GPS, 等等外设）构成我们的电脑，但是电脑的运行，实际就是CPU和相关寄存器以及RAM之间的事情。</p>
<p><strong>一个最最基础的事实</strong>：CPU太快，太快，太快了，寄存器仅仅能够追的上他的脚步，RAM和别的挂在各总线上的设备完全是望其项背。那当多个任务要执行的时候怎么办呢？轮流着来?或者谁优先级高谁来？不管怎么样的策略，一句话就是在CPU看来就是轮流着来。</p>
<p><strong>一个必须知道的事实</strong>：执行一段程序代码，实现一个功能的过程介绍 ，当得到CPU的时候，相关的资源必须也已经就位，就是显卡啊，GPS啊什么的必须就位，然后CPU开始执行。这里除了CPU以外所有的就构成了这个程序的执行环境，也就是我们所定义的程序上下文。当这个程序执行完了，或者分配给他的CPU执行时间用完了，那它就要被切换出去，等待下一次CPU的临幸。在被切换出去的最后一步工作就是保存程序上下文，因为这个是下次他被CPU临幸的运行环境，必须保存。</p>
<p><strong>串联起来的事实</strong>：前面讲过在CPU看来所有的任务都是一个一个的轮流执行的，具体的轮流方法就是：先加载程序A的上下文，然后开始执行A，保存程序A的上下文，调入下一个要执行的程序B的程序上下文，然后开始执行B,保存程序B的上下文。。。。</p>
<p>进程和线程就是这样的背景出来的，两个名词不过是对应的CPU时间段的描述，名词就是这样的功能。<br>进程就是包换上下文切换的程序执行时间总和 = CPU加载上下文+CPU执行+CPU保存上下文</p>
<p>线程是什么呢？进程的颗粒度太大，每次都要有上下文的调入，保存，调出。如果我们把进程比喻为一个运行在电脑上的软件，那么一个软件的执行不可能是一条逻辑执行的，必定有多个分支和多个程序段，就好比要实现程序A，实际分成 a，b，c等多个块组合而成。那么这里具体的执行就可能变成：程序A得到CPU =》CPU加载上下文，开始执行程序A的a小段，然后执行A的b小段，然后再执行A的c小段，最后CPU保存A的上下文。这里a，b，c的执行是共享了A的上下文，CPU在执行的时候没有进行上下文切换的。这里的a，b，c就是线程，也就是说线程是共享了进程的上下文环境，的更为细小的CPU时间段。</p>
<p>以上引用自<a href="https://www.zhihu.com/question/25532384/answer/81152571" target="_blank" rel="noopener">线程和进程的区别是什么？ - zhonyong的回答 - 知乎</a></p>
<h2 id="线程的状态"><a href="#线程的状态" class="headerlink" title="线程的状态"></a>线程的状态</h2><ul>
<li>初始(NEW)：新创建了一个线程对象，但还没有调用start()方法。</li>
<li>运行(RUNNABLE)：Java线程中将就绪（ready）和运行中（running）两种状态笼统的称为“运行”。<br>线程对象创建后，其他线程(比如main线程）调用了该对象的start()方法。该状态的线程位于可运行线程池中，等待被线程调度选中，获取CPU的使用权，此时处于就绪状态（ready）。就绪状态的线程在获得CPU时间片后变为运行中状态（running）。</li>
<li>阻塞(BLOCKED)：表示线程阻塞于锁。</li>
<li>等待(WAITING)：进入该状态的线程需要等待其他线程做出一些特定动作（通知或中断）。</li>
<li>超时等待(TIMED_WAITING)：该状态不同于WAITING，它可以在指定的时间后自行返回。</li>
<li>终止(TERMINATED)：表示该线程已经执行完毕。</li>
</ul>
<p>后面关于消息队列，就涉及到线程的阻塞状态。</p>
<p>我曾经写过一篇关于如何打印出java线程的六种状态的文章，可以参考：</p>
<p><a href="/2016/08/22/java-thread-state">java 打印线程的六种状态</a></p>
<h2 id="线程通信的方式"><a href="#线程通信的方式" class="headerlink" title="线程通信的方式"></a>线程通信的方式</h2><ul>
<li><p>Handler机制，这即是Android上进行线程间通信的最重要的方法，也是我们今天要讲的重点。</p>
</li>
<li><p>Broadcast广播，广播机制可用于进程/线程间通信</p>
</li>
<li><p>共享内存,例如单例，类成员变量等</p>
</li>
<li><p>文件/数据库</p>
</li>
<li><p>传统的java技术，例如java.io包的管道(Pipes)，Object的信号量(Signalling), 阻塞队列(BlockingQueue)等</p>
</li>
</ul>
<p>这一篇博文讲的很详细：</p>
<p><a href="https://www.oreilly.com/library/view/efficient-android-threading/9781449364120/ch04.html" target="_blank" rel="noopener">Chapter 4. Thread Communication</a></p>
<h1 id="Handler消息机制"><a href="#Handler消息机制" class="headerlink" title="Handler消息机制"></a>Handler消息机制</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>Android系统中将通信的消息封装成<strong>Message</strong>对象,并且配备有专门的<strong>Handler</strong>去做事件的处理。而<strong>Message</strong>存放在一个叫<strong>MessageQueue</strong>的消息队列当中被分发处理的，而保证消息队列中消息不断被分发出去，正是<strong>Looper</strong>对象所做的事。</p>
<h2 id="Looper"><a href="#Looper" class="headerlink" title="Looper"></a>Looper</h2><h3 id="线程中如何启用Looper"><a href="#线程中如何启用Looper" class="headerlink" title="线程中如何启用Looper"></a>线程中如何启用Looper</h3><p>正如我们概述中最后说的，是<strong>Looper</strong>所做的事。我们先直观的看Looper在线程中是如何启用的</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LooperThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 将当前线程初始化为Looper线程 </span></span><br><span class="line">        Looper.prepare();</span><br><span class="line">        <span class="comment">// ...其他处理，如实例化handler</span></span><br><span class="line">        <span class="comment">// 开始循环处理消息队列 </span></span><br><span class="line">        Looper.loop();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>很简单，那Looper本身到底是什么？</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Looper</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * API Implementation Note:</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * This class contains the code required to set up and manage an event loop</span></span><br><span class="line"><span class="comment">     * based on MessageQueue.  APIs that affect the state of the queue should be</span></span><br><span class="line"><span class="comment">     * defined on MessageQueue or Handler rather than on Looper itself.  For example,</span></span><br><span class="line"><span class="comment">     * idle handlers and sync barriers are defined on the queue whereas preparing the</span></span><br><span class="line"><span class="comment">     * thread, looping, and quitting are defined on the looper.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"Looper"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// sThreadLocal.get() will return null unless you've called prepare().</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;Looper&gt; sThreadLocal = <span class="keyword">new</span> ThreadLocal&lt;Looper&gt;();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Looper sMainLooper;  <span class="comment">// guarded by Looper.class</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> MessageQueue mQueue;</span><br><span class="line">    <span class="keyword">final</span> Thread mThread;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Looper</span><span class="params">(<span class="keyword">boolean</span> quitAllowed)</span> </span>&#123;</span><br><span class="line">        mQueue = <span class="keyword">new</span> MessageQueue(quitAllowed);</span><br><span class="line">        mThread = Thread.currentThread();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看到Looper本身持有线程本身，持有消息队列，还持有线程局部变量<strong>ThreadLocal</strong>，并且通过线程局部变量持有Looper对象本身。</p>
<h3 id="ThreadLocal"><a href="#ThreadLocal" class="headerlink" title="ThreadLocal"></a>ThreadLocal</h3><p>穿插简单讲一下<strong>ThreadLocal</strong>是什么？</p>
<p><strong>ThreadLocal</strong>也就是线程局部变量，为每一个使用该变量的线程都提供一个变量值的副本，是Java中一种较为特殊的线程绑定机制，每一个线程都可以独立地改变自己的副本，而不会和其它线程的副本冲突。</p>
<p>从线程的角度看，每个线程都保持一个对其线程局部变量副本的隐式引用，只要线程是活动的并且 ThreadLocal 实例是可访问的；在线程消失之后，其线程局部实例的所有副本都会被垃圾回收（除非存在对这些副本的其他引用）。</p>
<p>通过ThreadLocal存取的数据，总是与当前线程相关，也就是说，JVM 为每个运行的线程，绑定了私有的本地实例存取空间，从而为多线程环境常出现的并发访问问题提供了一种隔离机制。</p>
<p>ThreadLocal是如何做到为每一个线程维护变量的副本的呢？其实实现的思路很简单，在ThreadLocal类中有一个Map，用于存储每一个线程的变量的副本。</p>
<p>概括起来说，对于多线程资源共享的问题，同步机制采用了“以时间换空间”的方式，而ThreadLocal采用了“以空间换时间”的方式。前者仅提供一份变量，让不同的线程排队访问，而后者为每一个线程都提供了一份变量，因此可以同时访问而互不影响。</p>
<p>更多内容可以参考：<a href="https://blog.51cto.com/lavasoft/51926" target="_blank" rel="noopener">深入研究java.lang.ThreadLocal类</a></p>
<h3 id="Looper-prepare"><a href="#Looper-prepare" class="headerlink" title="Looper.prepare()"></a>Looper.prepare()</h3><p>回到Looper上来，我们来看一下Looper的prepare()方法到底做了什么</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** Initialize the current thread as a looper.</span></span><br><span class="line"><span class="comment">  * This gives you a chance to create handlers that then reference</span></span><br><span class="line"><span class="comment">  * this looper, before actually starting the loop. Be sure to call</span></span><br><span class="line"><span class="comment">  * &#123;<span class="doctag">@link</span> #loop()&#125; after calling this method, and end it by calling</span></span><br><span class="line"><span class="comment">  * &#123;<span class="doctag">@link</span> #quit()&#125;.</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">prepare</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    prepare(<span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">prepare</span><span class="params">(<span class="keyword">boolean</span> quitAllowed)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (sThreadLocal.get() != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Only one Looper may be created per thread"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    sThreadLocal.set(<span class="keyword">new</span> Looper(quitAllowed));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>看起来很简单哈，也就是创建了Looper对象，并通过线程局部变量存了下来。</p>
<h3 id="Looper-loop"><a href="#Looper-loop" class="headerlink" title="Looper.loop()"></a>Looper.loop()</h3><p>前面的介绍我们知道Looper的loop()方法会启动消息队列的循环，来进行消息的实际分发，我们来看一下looper里面具体做的事：</p>
<p>代码很长，我们拆分成两部分看，先看外壳：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Run the message queue in this thread. Be sure to call</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> #quit()&#125; to end the loop.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Looper me = myLooper();</span><br><span class="line">    <span class="keyword">if</span> (me == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"No Looper; Looper.prepare() wasn't called on this thread."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">final</span> MessageQueue queue = me.mQueue;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//clearCallingIdentity这个可以看成是安全性代码，也可以看成是调试代码作用是确定当前这个looper所在的“进程”</span></span><br><span class="line">    <span class="comment">//是否一直在同一个“进程”里，如果进程变多半是说明这个线程运行在某种跨进程代码里。</span></span><br><span class="line">    <span class="comment">//比如说你通过AIDL调用stub，远程那边接到之后启动一个线程，就有可能触发ident != newIdent了</span></span><br><span class="line">    <span class="comment">// Make sure the identity of this thread is that of the local process,</span></span><br><span class="line">    <span class="comment">// and keep track of what that identity token actually is.</span></span><br><span class="line">    Binder.clearCallingIdentity();</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">long</span> ident = Binder.clearCallingIdentity();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Allow overriding a threshold with a system prop. e.g.</span></span><br><span class="line">    <span class="comment">// adb shell 'setprop log.looper.1000.main.slow 1 &amp;&amp; stop &amp;&amp; start'</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> thresholdOverride =</span><br><span class="line">            SystemProperties.getInt(<span class="string">"log.looper."</span></span><br><span class="line">                    + Process.myUid() + <span class="string">"."</span></span><br><span class="line">                    + Thread.currentThread().getName()</span><br><span class="line">                    + <span class="string">".slow"</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">boolean</span> slowDeliveryDetected = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>准备工作没什么可说的，我们直接看for循环里面的代码</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (;;) &#123;</span><br><span class="line">    Message msg = queue.next(); <span class="comment">// might block</span></span><br><span class="line">    <span class="keyword">if</span> (msg == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// No message indicates that the message queue is quitting.</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// This must be in a local variable, in case a UI event sets the logger</span></span><br><span class="line">    <span class="keyword">final</span> Printer logging = me.mLogging;</span><br><span class="line">    <span class="keyword">if</span> (logging != <span class="keyword">null</span>) &#123;</span><br><span class="line">        logging.println(<span class="string">"&gt;&gt;&gt;&gt;&gt; Dispatching to "</span> + msg.target + <span class="string">" "</span> +</span><br><span class="line">                msg.callback + <span class="string">": "</span> + msg.what);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">long</span> traceTag = me.mTraceTag;</span><br><span class="line">    <span class="keyword">long</span> slowDispatchThresholdMs = me.mSlowDispatchThresholdMs;</span><br><span class="line">    <span class="keyword">long</span> slowDeliveryThresholdMs = me.mSlowDeliveryThresholdMs;</span><br><span class="line">    <span class="keyword">if</span> (thresholdOverride &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        slowDispatchThresholdMs = thresholdOverride;</span><br><span class="line">        slowDeliveryThresholdMs = thresholdOverride;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">boolean</span> logSlowDelivery = (slowDeliveryThresholdMs &gt; <span class="number">0</span>) &amp;&amp; (msg.when &gt; <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">boolean</span> logSlowDispatch = (slowDispatchThresholdMs &gt; <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">boolean</span> needStartTime = logSlowDelivery || logSlowDispatch;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">boolean</span> needEndTime = logSlowDispatch;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (traceTag != <span class="number">0</span> &amp;&amp; Trace.isTagEnabled(traceTag)) &#123;</span><br><span class="line">        Trace.traceBegin(traceTag, msg.target.getTraceName(msg));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">long</span> dispatchStart = needStartTime ? SystemClock.uptimeMillis() : <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">long</span> dispatchEnd;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        msg.target.dispatchMessage(msg);</span><br><span class="line">        dispatchEnd = needEndTime ? SystemClock.uptimeMillis() : <span class="number">0</span>;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (traceTag != <span class="number">0</span>) &#123;</span><br><span class="line">            Trace.traceEnd(traceTag);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (logSlowDelivery) &#123;</span><br><span class="line">        <span class="keyword">if</span> (slowDeliveryDetected) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((dispatchStart - msg.when) &lt;= <span class="number">10</span>) &#123;</span><br><span class="line">                Slog.w(TAG, <span class="string">"Drained"</span>);</span><br><span class="line">                slowDeliveryDetected = <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (showSlowLog(slowDeliveryThresholdMs, msg.when, dispatchStart, <span class="string">"delivery"</span>,</span><br><span class="line">                    msg)) &#123;</span><br><span class="line">                <span class="comment">// Once we write a slow delivery log, suppress until the queue drains.</span></span><br><span class="line">                slowDeliveryDetected = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (logSlowDispatch) &#123;</span><br><span class="line">        showSlowLog(slowDispatchThresholdMs, dispatchStart, dispatchEnd, <span class="string">"dispatch"</span>, msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (logging != <span class="keyword">null</span>) &#123;</span><br><span class="line">        logging.println(<span class="string">"&lt;&lt;&lt;&lt;&lt; Finished to "</span> + msg.target + <span class="string">" "</span> + msg.callback);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Make sure that during the course of dispatching the</span></span><br><span class="line">    <span class="comment">// identity of the thread wasn't corrupted.</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">long</span> newIdent = Binder.clearCallingIdentity();</span><br><span class="line">    <span class="keyword">if</span> (ident != newIdent) &#123;</span><br><span class="line">        Log.wtf(TAG, <span class="string">"Thread identity changed from 0x"</span></span><br><span class="line">                + Long.toHexString(ident) + <span class="string">" to 0x"</span></span><br><span class="line">                + Long.toHexString(newIdent) + <span class="string">" while dispatching to "</span></span><br><span class="line">                + msg.target.getClass().getName() + <span class="string">" "</span></span><br><span class="line">                + msg.callback + <span class="string">" what="</span> + msg.what);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    msg.recycleUnchecked();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>代码很长，我们看几个关键点，首先是从消息队列中读取下一个消息</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Message msg = queue.next(); <span class="comment">// might block</span></span><br></pre></td></tr></table></figure>

<p>这里因为<strong>MessageQueue</strong>本身是个堵塞队列，所以这里可能会阻塞住，next()方法里面具体怎么执行的，待会说。<br>接着就是log和trace操作没什么可说的，下一个关键点是消息的分发：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//target就是Handler，可以看到这里通过调用Handler去分发消息事件</span></span><br><span class="line">msg.target.dispatchMessage(msg);</span><br></pre></td></tr></table></figure>

<p>最后就是回收<strong>Message</strong>资源</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msg.recycleUnchecked();</span><br></pre></td></tr></table></figure>

<p>其实可以看到，整个loop()方法里面，核心的代码其实可以简化为：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Looper me = myLooper();</span><br><span class="line">    <span class="keyword">if</span> (me == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"No Looper; Looper.prepare() wasn't called on this thread."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">final</span> MessageQueue queue = me.mQueue;</span><br><span class="line">    Binder.clearCallingIdentity();</span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        Message msg = queue.next(); <span class="comment">// might block</span></span><br><span class="line">        <span class="keyword">if</span> (msg == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        msg.target.dispatchMessage(msg);</span><br><span class="line">        msg.recycleUnchecked();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="MessageQueue"><a href="#MessageQueue" class="headerlink" title="MessageQueue"></a>MessageQueue</h2><p>看完<strong>Looper</strong>的代码，我们顺着留下来的MessageQueue.next()方法，来看消息队列的实现。</p>
<h3 id="MessageQueue初始化"><a href="#MessageQueue初始化" class="headerlink" title="MessageQueue初始化"></a>MessageQueue初始化</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageQueue</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"MessageQueue"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">boolean</span> DEBUG = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// True if the message queue can be quit.</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">boolean</span> mQuitAllowed;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unused"</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> mPtr; <span class="comment">// used by native code</span></span><br><span class="line"></span><br><span class="line">    Message mMessages;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ArrayList&lt;IdleHandler&gt; mIdleHandlers = <span class="keyword">new</span> ArrayList&lt;IdleHandler&gt;();</span><br><span class="line">    <span class="keyword">private</span> SparseArray&lt;FileDescriptorRecord&gt; mFileDescriptorRecords;</span><br><span class="line">    <span class="keyword">private</span> IdleHandler[] mPendingIdleHandlers;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> mQuitting;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Indicates whether next() is blocked waiting in pollOnce() with a non-zero timeout.</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> mBlocked;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// The next barrier token.</span></span><br><span class="line">    <span class="comment">// Barriers are indicated by messages with a null target whose arg1 field carries the token.</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mNextBarrierToken;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">native</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">nativeInit</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">native</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">nativeDestroy</span><span class="params">(<span class="keyword">long</span> ptr)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">nativePollOnce</span><span class="params">(<span class="keyword">long</span> ptr, <span class="keyword">int</span> timeoutMillis)</span></span>; <span class="comment">/*non-static for callbacks*/</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">native</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">nativeWake</span><span class="params">(<span class="keyword">long</span> ptr)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">native</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">nativeIsPolling</span><span class="params">(<span class="keyword">long</span> ptr)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">native</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">nativeSetFileDescriptorEvents</span><span class="params">(<span class="keyword">long</span> ptr, <span class="keyword">int</span> fd, <span class="keyword">int</span> events)</span></span>;</span><br><span class="line"></span><br><span class="line">    MessageQueue(<span class="keyword">boolean</span> quitAllowed) &#123;</span><br><span class="line">        mQuitAllowed = quitAllowed;</span><br><span class="line">        mPtr = nativeInit();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看到，<strong>MessageQueue</strong>里面有相当多的native代码，其实Android的消息机制中，除了Java层的handler机制外，还包括native的AHandler机制。对应着Java层的Looper和Message，就有对应的ALooper和AMessage.</p>
<p>其中nativeInit()方法对应的native方法实现如下，创建了NativeMessageQueue,并将这个对象的指针赋给了Java层的mPtr。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> jlong <span class="title">android_os_MessageQueue_nativeInit</span><span class="params">(JNIEnv* env, jclass clazz)</span> </span>&#123;</span><br><span class="line">    NativeMessageQueue* nativeMessageQueue = <span class="keyword">new</span> NativeMessageQueue();</span><br><span class="line">    <span class="keyword">if</span> (!nativeMessageQueue) &#123;</span><br><span class="line">        jniThrowRuntimeException(env, <span class="string">"Unable to allocate native queue"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    nativeMessageQueue-&gt;incStrong(env);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">reinterpret_cast</span>&lt;jlong&gt;(nativeMessageQueue);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="MessageQueue读取下一条消息"><a href="#MessageQueue读取下一条消息" class="headerlink" title="MessageQueue读取下一条消息"></a>MessageQueue读取下一条消息</h3><p>来看next()方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Message <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Return here if the message loop has already quit and been disposed.</span></span><br><span class="line">    <span class="comment">// This can happen if the application tries to restart a looper after quit</span></span><br><span class="line">    <span class="comment">// which is not supported.</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">long</span> ptr = mPtr;</span><br><span class="line">    <span class="keyword">if</span> (ptr == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> pendingIdleHandlerCount = -<span class="number">1</span>; <span class="comment">// -1 only during first iteration</span></span><br><span class="line">    <span class="keyword">int</span> nextPollTimeoutMillis = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nextPollTimeoutMillis != <span class="number">0</span>) &#123;</span><br><span class="line">            Binder.flushPendingCommands();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        nativePollOnce(ptr, nextPollTimeoutMillis);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">            <span class="comment">// Try to retrieve the next message.  Return if found.</span></span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">long</span> now = SystemClock.uptimeMillis();</span><br><span class="line">            Message prevMsg = <span class="keyword">null</span>;</span><br><span class="line">            Message msg = mMessages;</span><br><span class="line">            <span class="keyword">if</span> (msg != <span class="keyword">null</span> &amp;&amp; msg.target == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">// Stalled by a barrier.  Find the next asynchronous message in the queue.</span></span><br><span class="line">                <span class="keyword">do</span> &#123;</span><br><span class="line">                    prevMsg = msg;</span><br><span class="line">                    msg = msg.next;</span><br><span class="line">                &#125; <span class="keyword">while</span> (msg != <span class="keyword">null</span> &amp;&amp; !msg.isAsynchronous());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (msg != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (now &lt; msg.when) &#123;</span><br><span class="line">                    <span class="comment">// Next message is not ready.  Set a timeout to wake up when it is ready.</span></span><br><span class="line">                    nextPollTimeoutMillis = (<span class="keyword">int</span>) Math.min(msg.when - now, Integer.MAX_VALUE);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// Got a message.</span></span><br><span class="line">                    mBlocked = <span class="keyword">false</span>;</span><br><span class="line">                    <span class="keyword">if</span> (prevMsg != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        prevMsg.next = msg.next;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        mMessages = msg.next;</span><br><span class="line">                    &#125;</span><br><span class="line">                    msg.next = <span class="keyword">null</span>;</span><br><span class="line">                    <span class="keyword">if</span> (DEBUG) Log.v(TAG, <span class="string">"Returning message: "</span> + msg);</span><br><span class="line">                    msg.markInUse();</span><br><span class="line">                    <span class="keyword">return</span> msg;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// No more messages.</span></span><br><span class="line">                nextPollTimeoutMillis = -<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Process the quit message now that all pending messages have been handled.</span></span><br><span class="line">            <span class="keyword">if</span> (mQuitting) &#123;</span><br><span class="line">                dispose();</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// If first time idle, then get the number of idlers to run.</span></span><br><span class="line">            <span class="comment">// Idle handles only run if the queue is empty or if the first message</span></span><br><span class="line">            <span class="comment">// in the queue (possibly a barrier) is due to be handled in the future.</span></span><br><span class="line">            <span class="keyword">if</span> (pendingIdleHandlerCount &lt; <span class="number">0</span></span><br><span class="line">                    &amp;&amp; (mMessages == <span class="keyword">null</span> || now &lt; mMessages.when)) &#123;</span><br><span class="line">                pendingIdleHandlerCount = mIdleHandlers.size();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (pendingIdleHandlerCount &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">// No idle handlers to run.  Loop and wait some more.</span></span><br><span class="line">                mBlocked = <span class="keyword">true</span>;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (mPendingIdleHandlers == <span class="keyword">null</span>) &#123;</span><br><span class="line">                mPendingIdleHandlers = <span class="keyword">new</span> IdleHandler[Math.max(pendingIdleHandlerCount, <span class="number">4</span>)];</span><br><span class="line">            &#125;</span><br><span class="line">            mPendingIdleHandlers = mIdleHandlers.toArray(mPendingIdleHandlers);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Run the idle handlers.</span></span><br><span class="line">        <span class="comment">// We only ever reach this code block during the first iteration.</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; pendingIdleHandlerCount; i++) &#123;</span><br><span class="line">            <span class="keyword">final</span> IdleHandler idler = mPendingIdleHandlers[i];</span><br><span class="line">            mPendingIdleHandlers[i] = <span class="keyword">null</span>; <span class="comment">// release the reference to the handler</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">boolean</span> keep = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                keep = idler.queueIdle();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">                Log.wtf(TAG, <span class="string">"IdleHandler threw exception"</span>, t);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!keep) &#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">                    mIdleHandlers.remove(idler);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Reset the idle handler count to 0 so we do not run them again.</span></span><br><span class="line">        pendingIdleHandlerCount = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// While calling an idle handler, a new message could have been delivered</span></span><br><span class="line">        <span class="comment">// so go back and look again for a pending message without waiting.</span></span><br><span class="line">        nextPollTimeoutMillis = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>不出意外，这里的方法也很长，同样的，我们分析下核心的代码执行了些什么操作</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nativePollOnce(ptr, nextPollTimeoutMillis);</span><br></pre></td></tr></table></figure>

<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">android_os_MessageQueue_nativePollOnce</span><span class="params">(JNIEnv* env, jobject obj,</span></span></span><br><span class="line"><span class="function"><span class="params">        jlong ptr, jint timeoutMillis)</span> </span>&#123;</span><br><span class="line">    NativeMessageQueue* nativeMessageQueue = <span class="keyword">reinterpret_cast</span>&lt;NativeMessageQueue*&gt;(ptr);</span><br><span class="line">    nativeMessageQueue-&gt;pollOnce(env, obj, timeoutMillis);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> NativeMessageQueue::pollOnce(JNIEnv* env, jobject pollObj, <span class="keyword">int</span> timeoutMillis) &#123;</span><br><span class="line">    mPollEnv = env;</span><br><span class="line">    mPollObj = pollObj;</span><br><span class="line">    mLooper-&gt;pollOnce(timeoutMillis);</span><br><span class="line">    mPollObj = <span class="literal">NULL</span>;</span><br><span class="line">    mPollEnv = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (mExceptionObj) &#123;</span><br><span class="line">        env-&gt;Throw(mExceptionObj);</span><br><span class="line">        env-&gt;DeleteLocalRef(mExceptionObj);</span><br><span class="line">        mExceptionObj = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>pollOnce()最终都是通过 Linux 的 epoll 模型来实现的。pollOnce() 通过等待被激活，然后从消息队列中获取消息。对应的也有一个wake()方法，则是激活处于等待状态的消息队列，通知它有消息到达了。这就是典型的生产者-消费者模型.</p>
<p>接着往下看，nativePollOnce()之后的大段逻辑就是如何分发Message，这里就不多说了。</p>
<h3 id="MessageQueue插入消息"><a href="#MessageQueue插入消息" class="headerlink" title="MessageQueue插入消息"></a>MessageQueue插入消息</h3><p>对应的方法是enqueueMessage(Message msg, long when)</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">enqueueMessage</span><span class="params">(Message msg, <span class="keyword">long</span> when)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (msg.target == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Message must have a target."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (msg.isInUse()) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(msg + <span class="string">" This message is already in use."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (mQuitting) &#123;</span><br><span class="line">            IllegalStateException e = <span class="keyword">new</span> IllegalStateException(</span><br><span class="line">                    msg.target + <span class="string">" sending message to a Handler on a dead thread"</span>);</span><br><span class="line">            Log.w(TAG, e.getMessage(), e);</span><br><span class="line">            msg.recycle();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        msg.markInUse();</span><br><span class="line">        msg.when = when;</span><br><span class="line">        Message p = mMessages;</span><br><span class="line">        <span class="keyword">boolean</span> needWake;</span><br><span class="line">        <span class="keyword">if</span> (p == <span class="keyword">null</span> || when == <span class="number">0</span> || when &lt; p.when) &#123;</span><br><span class="line">            <span class="comment">// New head, wake up the event queue if blocked.</span></span><br><span class="line">            msg.next = p;</span><br><span class="line">            mMessages = msg;</span><br><span class="line">            needWake = mBlocked;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// Inserted within the middle of the queue.  Usually we don't have to wake</span></span><br><span class="line">            <span class="comment">// up the event queue unless there is a barrier at the head of the queue</span></span><br><span class="line">            <span class="comment">// and the message is the earliest asynchronous message in the queue.</span></span><br><span class="line">            needWake = mBlocked &amp;&amp; p.target == <span class="keyword">null</span> &amp;&amp; msg.isAsynchronous();</span><br><span class="line">            Message prev;</span><br><span class="line">            <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">                prev = p;</span><br><span class="line">                p = p.next;</span><br><span class="line">                <span class="keyword">if</span> (p == <span class="keyword">null</span> || when &lt; p.when) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (needWake &amp;&amp; p.isAsynchronous()) &#123;</span><br><span class="line">                    needWake = <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            msg.next = p; <span class="comment">// invariant: p == prev.next</span></span><br><span class="line">            prev.next = msg;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// We can assume mPtr != 0 because mQuitting is false.</span></span><br><span class="line">        <span class="keyword">if</span> (needWake) &#123;</span><br><span class="line">            nativeWake(mPtr);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里的核心代码nativeWake(mPtr)前面也提到过了，和nativePollOnce(ptr, nextPollTimeoutMillis)一样，都是基于Linux 的 epoll 模型来实现的。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">android_os_MessageQueue_nativeWake</span><span class="params">(JNIEnv* env, jclass clazz, jlong ptr)</span> </span>&#123;</span><br><span class="line">    NativeMessageQueue* nativeMessageQueue = <span class="keyword">reinterpret_cast</span>&lt;NativeMessageQueue*&gt;(ptr);</span><br><span class="line">    nativeMessageQueue-&gt;wake();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>关于Android中Natvie层消息机制，这篇文章我认为讲的不错：</p>
<p><a href="https://www.cnblogs.com/kesalin/p/android_messagequeue.html" target="_blank" rel="noopener">Android多线程分析之四：MessageQueue的实现</a></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>首先我们了解了线程，进程的基本概念，Java线程的六种状态，Android中线程间通信的几种基础方式等。随后我们结合了源码，着重介绍了Android中Handler的运行机制，在分析源码的过程中，我们发现了Android系统中，除了Java层的消息机制外，Natvie层也有一层消息机制，并且内部是通过Linux的epoll模型来实现的。而消息队列不断读取消息的本质，就是线程的阻塞。</p>
]]></content>
      
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[React Native in Android的项目实战03--基于ReactRootView封装RN Fragment]]></title>
      <url>http://wangyeming.github.com/2019/03/14/react-natvie-for-android-03/</url>
      <content type="html"><![CDATA[<p>ReactNative提供了ReactRootView，提供了集成RN View的途径。那么我们来看一下，如何通过ReactRootView，来封装项目中可以使用的Fragment。</p>
<a id="more"></a>

<h1 id="深入ReactRootView源码"><a href="#深入ReactRootView源码" class="headerlink" title="深入ReactRootView源码"></a>深入ReactRootView源码</h1><p>首先来看下</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReactRootView</span> <span class="keyword">extends</span> <span class="title">SizeMonitoringFrameLayout</span></span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">RootView</span>, <span class="title">MeasureSpecProvider</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>SizeMonitoringFrameLayout类就是FrameLayout的再封装,对外提供了一个onSizeChange的监听方法.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SizeMonitoringFrameLayout</span> <span class="keyword">extends</span> <span class="title">FrameLayout</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OnSizeChangedListener</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onSizeChanged</span><span class="params">(<span class="keyword">int</span> width, <span class="keyword">int</span> height, <span class="keyword">int</span> oldWidth, <span class="keyword">int</span> oldHeight)</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="meta">@Nullable</span> OnSizeChangedListener mOnSizeChangedListener;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//...省略构造函数</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOnSizeChangedListener</span><span class="params">(OnSizeChangedListener onSizeChangedListener)</span> </span>&#123;</span><br><span class="line">    mOnSizeChangedListener = onSizeChangedListener;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onSizeChanged</span><span class="params">(<span class="keyword">int</span> w, <span class="keyword">int</span> h, <span class="keyword">int</span> oldw, <span class="keyword">int</span> oldh)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onSizeChanged(w, h, oldw, oldh);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (mOnSizeChangedListener != <span class="keyword">null</span>) &#123;</span><br><span class="line">      mOnSizeChangedListener.onSizeChanged(w, h, oldw, oldh);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>再回来看ReactRootView内部，提供了startReactApplication()方法, 需要我们传入ReactInstanceManager和模块名等参数。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startReactApplication</span><span class="params">(ReactInstanceManager reactInstanceManager, String moduleName)</span> </span>&#123;</span><br><span class="line">  startReactApplication(reactInstanceManager, moduleName, <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startReactApplication</span><span class="params">(ReactInstanceManager reactInstanceManager, String moduleName, @Nullable Bundle initialProperties)</span> </span>&#123;</span><br><span class="line">  startReactApplication(reactInstanceManager, moduleName, initialProperties, <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startReactApplication</span><span class="params">(ReactInstanceManager reactInstanceManager, String moduleName, </span></span></span><br><span class="line"><span class="function"><span class="params">                                  @Nullable Bundle initialProperties, @Nullable String initialUITemplate)</span> </span>&#123;</span><br><span class="line">  Systrace.beginSection(TRACE_TAG_REACT_JAVA_BRIDGE, <span class="string">"startReactApplication"</span>);</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    UiThreadUtil.assertOnUiThread();</span><br><span class="line">    Assertions.assertCondition(</span><br><span class="line">      mReactInstanceManager == <span class="keyword">null</span>,</span><br><span class="line">      <span class="string">"This root view has already been attached to a catalyst instance manager"</span>);</span><br><span class="line"></span><br><span class="line">    mReactInstanceManager = reactInstanceManager;</span><br><span class="line">    mJSModuleName = moduleName;</span><br><span class="line">    mAppProperties = initialProperties;</span><br><span class="line">    mInitialUITemplate = initialUITemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!mReactInstanceManager.hasStartedCreatingInitialContext()) &#123;</span><br><span class="line">      mReactInstanceManager.createReactContextInBackground();</span><br><span class="line">    &#125;</span><br><span class="line">    attachToReactInstanceManager();</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    Systrace.endSection(TRACE_TAG_REACT_JAVA_BRIDGE);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>startReactApplication内部主要是做了两件事，一件是在后台去创建React<br>Context,另一个是attachToReactInstanceManager()，那么另一个是attachToReactInstanceManager()做了什么呢？</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">attachToReactInstanceManager</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Systrace.beginSection(TRACE_TAG_REACT_JAVA_BRIDGE, <span class="string">"attachToReactInstanceManager"</span>);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (mIsAttachedToInstance) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      mIsAttachedToInstance = <span class="keyword">true</span>;</span><br><span class="line">      Assertions.assertNotNull(mReactInstanceManager).attachRootView(<span class="keyword">this</span>);</span><br><span class="line">      getViewTreeObserver().addOnGlobalLayoutListener(getCustomGlobalLayoutListener());</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      Systrace.endSection(TRACE_TAG_REACT_JAVA_BRIDGE);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>ReactInstanceManager.attachRootView(ReactRootView)又做了什么呢？</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Set&lt;ReactRootView&gt; mAttachedRootViews = Collections.synchronizedSet(</span><br><span class="line">    <span class="keyword">new</span> HashSet&lt;ReactRootView&gt;());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@ThreadConfined</span>(UI)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attachRootView</span><span class="params">(ReactRootView rootView)</span> </span>&#123;</span><br><span class="line">    UiThreadUtil.assertOnUiThread();</span><br><span class="line">    mAttachedRootViews.add(rootView);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Reset view content as it's going to be populated by the application content from JS.</span></span><br><span class="line">    rootView.removeAllViews();</span><br><span class="line">    rootView.setId(View.NO_ID);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// If react context is being created in the background, JS application will be started</span></span><br><span class="line">    <span class="comment">// automatically when creation completes, as root view is part of the attached root view list.</span></span><br><span class="line">    ReactContext currentContext = getCurrentReactContext();</span><br><span class="line">    <span class="keyword">if</span> (mCreateReactContextThread == <span class="keyword">null</span> &amp;&amp; currentContext != <span class="keyword">null</span>) &#123;</span><br><span class="line">      attachRootViewToInstance(rootView);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看到ReactInstanceManager内部维护了一个Set<reactrootview>,所有attach到ReactInstanceManager的ReactRootView都会被记录下来。</reactrootview></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">attachRootViewToInstance</span><span class="params">(<span class="keyword">final</span> ReactRootView rootView)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//...省略无关紧要的代码</span></span><br><span class="line">    rootView.runApplication();</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    UiThreadUtil.runOnUiThread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        rootView.onAttachedToReactInstance();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>ReactRootView的runApplication()方法我们就不再深入了，可以看一下它的注释说明</p>
<p>   Calls into JS to start the React application. Can be called multiple times with the same rootTag, which will re-render the application from the root.</p>
<p>可以看到，目的就是调到JS那里去启动React application。</p>
<p>而onAttachedToReactInstance()方法如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAttachedToReactInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Create the touch dispatcher here instead of having it always available, to make sure</span></span><br><span class="line">    <span class="comment">// that all touch events are only passed to JS after React/JS side is ready to consume</span></span><br><span class="line">    <span class="comment">// them. Otherwise, these events might break the states expected by JS.</span></span><br><span class="line">    <span class="comment">// Note that this callback was invoked from within the UI thread.</span></span><br><span class="line">    mJSTouchDispatcher = <span class="keyword">new</span> JSTouchDispatcher(<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">if</span> (mRootViewEventListener != <span class="keyword">null</span>) &#123;</span><br><span class="line">      mRootViewEventListener.onAttachedToReactInstance(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看到，目的就是将原生的View绑定上Js的Touch事件分发。至此，我们重新梳理下ReactRootView的逻辑，可以明确以下几点：</p>
<ol>
<li>ReactRootView继承自Android上FrameLayout,对外提供onSizeChange的接口。</li>
<li>ReactRootView提供了startReactApplication方法，用于在后台去创建React<br>Context以及绑定ReactRootView到ReactApplication上。</li>
<li>绑定ReactRootView到ReactApplication上这一步做了两件事，一个是启动React application，一个是启用JSTouchDispatcher，用于View的JS事件分发。</li>
</ol>
<h1 id="封装ReactRootView"><a href="#封装ReactRootView" class="headerlink" title="封装ReactRootView"></a>封装ReactRootView</h1><p>为了封装出我们需要的ReactNatvieFragment,我们需要对ReactRootView本身做一些封装，以实现怎么几个目的：</p>
<ol>
<li>外部不需要处理ReactInstanceManager的逻辑</li>
<li>通过Bundle或者其他参数的形式，传入url，通知JS具体加载哪个页面</li>
</ol>
<p>假设我们封装的一层View叫做RNBaseRootView，那么RNBaseRootView的构造函数可以是：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">RNBaseRootView</span><span class="params">(Context context, String <span class="keyword">module</span>, Bundle bundle)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context);</span><br><span class="line">        <span class="keyword">this</span>.mModule = <span class="keyword">module</span>;</span><br><span class="line">        <span class="keyword">this</span>.mBundle = bundle;</span><br><span class="line">        initial();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>为了抽离RNBaseRootView和ReactInstanceManager的逻辑,我们把ReactInstanceManager的相关处理逻辑委托给RNApiManager类，例如初始化ReactInstanceManage：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@UiThread</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">initialReactInstanceManager</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ReactInstanceManagerBuilder builder = ReactInstanceManager.builder()</span><br><span class="line">            .setApplication(mRnDependency.getApplication())</span><br><span class="line">            .addPackage(<span class="keyword">new</span> MainReactPackage())</span><br><span class="line">            .addPackage(<span class="keyword">new</span> CommonReactPackage())</span><br><span class="line">            .addPackage(<span class="keyword">new</span> CustomComponentPackage())</span><br><span class="line">            .setJSBundleFile(mRnDependency.isRNDebug() ? <span class="string">""</span> : mRnDependency.bundlePath())</span><br><span class="line">            .setUseDeveloperSupport(mRnDependency.isRNDebug())</span><br><span class="line">            .setInitialLifecycleState(LifecycleState.BEFORE_RESUME);</span><br><span class="line">    <span class="keyword">if</span> (mRnDependency.isRNDebug()) &#123;</span><br><span class="line">        builder.setJSMainModulePath(<span class="string">"index"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (mRnDependency.isRNDebug()) &#123;</span><br><span class="line">        mBundlePath = mReactInstanceManager.getDevSupportManager().getJSBundleURLForRemoteDebugging();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        mBundlePath = mRnDependency.bundlePath();</span><br><span class="line">    &#125;</span><br><span class="line">    mReactInstanceManager.createReactContextInBackground();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>类似的，释放React Natvie的资源也可以放在里面</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@UiThread</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">destroyReact</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (mReactInstanceManager != <span class="keyword">null</span>) &#123;</span><br><span class="line">        mReactInstanceManager.destroy();</span><br><span class="line">        mReactInstanceManager = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (FrescoModule.hasBeenInitialized()) &#123;</span><br><span class="line">        Fresco.getImagePipeline().clearMemoryCaches();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样，在NBaseRootView的初始化方法里面，我们可以通过调用RNApiManager类，完成我们的初始化操作。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initial</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    RNApiManager.getInstance().initialReact(<span class="keyword">new</span> OnInitialCompleteListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onInitialSuccess</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (initialed)</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                mReactInstanceManager = RNApiManager.getInstance().getReactInstanceManager();</span><br><span class="line">                initialed = <span class="keyword">true</span>;</span><br><span class="line">                vReactRootView.startReactApplication(mReactInstanceManager, mModule, mBundle);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (vReactRootView != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    sendPageSize(vReactRootView.getMeasuredWidth(), vReactRootView.getMeasuredHeight());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onInitialFail</span><span class="params">()</span> </span>&#123;</span><br><span class="line">              <span class="comment">//...</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>接下来，ReactNativeFragment的实现就水到渠成了</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReactNativeFragment</span> <span class="keyword">extends</span> <span class="title">Fragment</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> RNBaseRootView vRNBaseRootView;</span><br><span class="line">    <span class="keyword">private</span> String mModule;</span><br><span class="line">    <span class="keyword">private</span> Bundle mBundle;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RNBaseRootView <span class="title">createRootView</span><span class="params">(Context context, String <span class="keyword">module</span>, Bundle bundle)</span> </span>&#123;</span><br><span class="line">        vRNBaseRootView = <span class="keyword">new</span> RNBaseRootView(context, <span class="keyword">module</span>, bundle);</span><br><span class="line">        <span class="keyword">return</span> vRNBaseRootView;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">onCreateView</span><span class="params">(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (vRNBaseRootView == <span class="keyword">null</span>) &#123;</span><br><span class="line">            vRNBaseRootView = createRootView(getActivity(), mModule, mBundle);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> vRNBaseRootView;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样，我们就可以在工程中顺利的使用我们自己封装的ReactNativeFragment，可以很容易的嵌入到Tab中。</p>
]]></content>
      
        <categories>
            
            <category> React Native in Android的项目实战 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> React Native </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[React Native in Android的项目实战02--Android接口和View封装]]></title>
      <url>http://wangyeming.github.com/2019/03/14/react-natvie-for-android-02/</url>
      <content type="html"><![CDATA[<p>上一章我们看到rn for Adnroid的模版工程，基于ReactActivity，仅仅几十行代码就完成了一个简单的RN示例工程。上一章结束后也遗留了很多问题，今天先说一说rn中是如何调用客户端提供的接口的。又是如何使用客户端封装的View的呢？</p>
<a id="more"></a>

<h1 id="如何调试rn代码"><a href="#如何调试rn代码" class="headerlink" title="如何调试rn代码"></a>如何调试rn代码</h1><p>rn的调试可以通过chrome的插件<a href="https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi" target="_blank" rel="noopener">React Developer Tools</a>来做。</p>
<p>然后在dev环境下，点击</p>
<p><img src="/img/2019-03-14-react-natvie-for-android-02-01.jpg" alt></p>
<p>chrome会自动打开一个页面 <a href="http://localhost:8081/debugger-ui/" target="_blank" rel="noopener">http://localhost:8081/debugger-ui/</a> 在这个页面下，你可以进行rn代码的调试。例如<br>鼠标右键-菜单点击检查-打开控制台，点击Console，你就可以看到js里面输出的log信息了。</p>
<p><img src="/img/2019-03-14-react-natvie-for-android-02-02.png" alt></p>
<h1 id="ReactPackage和NativeModule"><a href="#ReactPackage和NativeModule" class="headerlink" title="ReactPackage和NativeModule"></a>ReactPackage和NativeModule</h1><h2 id="ReactPackage"><a href="#ReactPackage" class="headerlink" title="ReactPackage"></a>ReactPackage</h2><p>首先看下代码(省略了注释信息)</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ReactPackage</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Nonnull</span></span><br><span class="line">  <span class="function">List&lt;NativeModule&gt; <span class="title">createNativeModules</span><span class="params">(@Nonnull ReactApplicationContext reactContext)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Nonnull</span></span><br><span class="line">  <span class="function">List&lt;ViewManager&gt; <span class="title">createViewManagers</span><span class="params">(@Nonnull ReactApplicationContext reactContext)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>ReactPackage提供了封装了两个方法, createNativeModules()返回的是NativeModule的列表，createViewManagers()返回的是ViewManager的列表。</p>
<h2 id="NativeModule"><a href="#NativeModule" class="headerlink" title="NativeModule"></a>NativeModule</h2><p>NativeModule就是native模块提供给js接口的模块。来看一下NativeModule的代码(省略了注释信息)，同样也是一个接口。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@DoNotStrip</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">NativeModule</span> </span>&#123;</span><br><span class="line">  <span class="class"><span class="keyword">interface</span> <span class="title">NativeMethod</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">invoke</span><span class="params">(JSInstance jsInstance, ReadableArray parameters)</span></span>;</span><br><span class="line">    <span class="function">String <span class="title">getType</span><span class="params">()</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Nonnull</span> <span class="function">String <span class="title">getName</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">initialize</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">boolean</span> <span class="title">canOverrideExistingModule</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">onCatalystInstanceDestroy</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>从注释中我们可以看到，rn提供了NativeModule的一些默认实现，例如抽象类<strong>BaseJavaModule</strong>和他的子抽象类<strong>ReactContextBaseJavaModule</strong>。我们只要继承其中某个module，就可以实现自己的方法。同时注释里也提到了C++方法的注册</p>
<pre><code>{@link NativeModule}s whose implementation is written in C++
must not provide any Java code (so they can be reused on other platforms), and instead should
register themselves using {@link CxxModuleWrapper}.</code></pre><h2 id="ViewManager"><a href="#ViewManager" class="headerlink" title="ViewManager"></a>ViewManager</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ReactPropertyHolder</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">ViewManager</span>&lt;<span class="title">T</span> <span class="keyword">extends</span> <span class="title">View</span>, <span class="title">C</span> <span class="keyword">extends</span> <span class="title">ReactShadowNode</span>&gt;</span></span><br><span class="line"><span class="class">  <span class="keyword">extends</span> <span class="title">BaseJavaModule</span> </span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>ViewManager的代码比较长，我们可以看到，ViewManager本身也是BaseJavaModule的一个实现。具体用法我们下面结合例子来讲。</p>
<h1 id="实现示例"><a href="#实现示例" class="headerlink" title="实现示例"></a>实现示例</h1><h2 id="封装native-java方法"><a href="#封装native-java方法" class="headerlink" title="封装native java方法"></a>封装native java方法</h2><p>首先我们继承ReactContextBaseJavaModule</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommonBridgeModule</span> <span class="keyword">extends</span> <span class="title">ReactContextBaseJavaModule</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CommonBridgeModule</span><span class="params">(ReactApplicationContext reactContext)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(reactContext);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//这里的名字就是js里面找到指定module的key</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"CommonBridgeModule"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//提供给rn的方法要加注解</span></span><br><span class="line">    <span class="meta">@ReactMethod</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">logMessage</span><span class="params">(String tag, String message, Callback callback)</span> </span>&#123;</span><br><span class="line">        Log.d(tag, message);</span><br><span class="line">        callback.invoke(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>接着定义ReactPackage，把刚才的Module封装进去</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommonReactPackage</span> <span class="keyword">implements</span> <span class="title">ReactPackage</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Nonnull</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;NativeModule&gt; <span class="title">createNativeModules</span><span class="params">(@Nonnull ReactApplicationContext reactContext)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Arrays.asList(<span class="keyword">new</span> CommonBridgeModule(reactContext));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nonnull</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;ViewManager&gt; <span class="title">createViewManagers</span><span class="params">(@Nonnull ReactApplicationContext reactContext)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>接着，找到注册ReactPackage的地方，模版代码里是创建ReactNativeHost的地方</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> ReactNativeHost mReactNativeHost = <span class="keyword">new</span> ReactNativeHost(<span class="keyword">this</span>) &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">getUseDeveloperSupport</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> BuildConfig.DEBUG;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> List&lt;ReactPackage&gt; <span class="title">getPackages</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> Arrays.&lt;ReactPackage&gt;asList(</span><br><span class="line">                    <span class="keyword">new</span> MainReactPackage(), </span><br><span class="line">                    <span class="comment">//添加自定义ReactPackage</span></span><br><span class="line">                    <span class="keyword">new</span> CommonReactPackage()</span><br><span class="line">            );</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> String <span class="title">getJSMainModuleName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"index"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure>

<p>最后我们在js里面调用一下试试</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;NativeModules&#125; <span class="keyword">from</span> <span class="string">"react-native"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> CommonBridgeModule = NativeModules.CommonBridgeModule;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span>&lt;<span class="title">Props</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="comment">//调接口</span></span><br><span class="line">    CommonBridge.logMessage(<span class="string">'demo'</span>, <span class="string">'hello react native'</span>, (result) =&gt; &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'demo'</span>, result)</span><br><span class="line">     &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出结果</p>
<p>android studio控制台输出：</p>
<pre><code>/com.awesomeproject I/ReactNativeJS: &apos;demo&apos;, 0
/com.awesomeproject D/demo: hello react native</code></pre><p>Chrome的React Developer Tools插件输出：</p>
<pre><code>demo 0</code></pre><h2 id="封装Android-View"><a href="#封装Android-View" class="headerlink" title="封装Android View"></a>封装Android View</h2><p>这里我们封装AppCompatButton提供给rn使用,首先是实现ViewManager</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppCompactButtonViewManager</span> <span class="keyword">extends</span> <span class="title">SimpleViewManager</span>&lt;<span class="title">AppCompatButton</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Nonnull</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"AppCompatButton"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nonnull</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> AppCompatButton <span class="title">createViewInstance</span><span class="params">(@Nonnull ThemedReactContext reactContext)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> AppCompatButton(reactContext);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ReactProp</span>(name = <span class="string">"buttonText"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setButtonText</span><span class="params">(AppCompatButton appCompatButton, String buttonText)</span> </span>&#123;</span><br><span class="line">        appCompatButton.setText(buttonText);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>封装进ReactPackage以及注册到rn当中的步骤和前面一样，这里就不多说了。</p>
<p>接着我们修改rn这边代码：</p>
<p>这里我们用到了一个node包 create-react-class 需要执行npm install，然后重新npm start。</p>
<p>规范一点写，我们新建一个AppCompatButtonControl.js文件,然后将AppCompatButton封装成AppCompatButtonControl</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"><span class="keyword">import</span> createReactClass <span class="keyword">from</span> <span class="string">'create-react-class'</span>;</span><br><span class="line"><span class="keyword">const</span> NativeMethodsMixin = <span class="built_in">require</span>(<span class="string">'NativeMethodsMixin'</span>);</span><br><span class="line"><span class="keyword">const</span> React = <span class="built_in">require</span>(<span class="string">'React'</span>);</span><br><span class="line"><span class="keyword">const</span> View = <span class="built_in">require</span>(<span class="string">'View'</span>);</span><br><span class="line"><span class="keyword">import</span> PropTypes <span class="keyword">from</span> <span class="string">'prop-types'</span></span><br><span class="line"><span class="keyword">const</span> requireNativeComponent = <span class="built_in">require</span>(<span class="string">'requireNativeComponent'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> AppCompatButtonControl = createReactClass(&#123;</span><br><span class="line"></span><br><span class="line">    mixins: [NativeMethodsMixin],</span><br><span class="line"></span><br><span class="line">    propTypes: &#123;</span><br><span class="line">        ...View.propTypes,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * set button text</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        buttonText: PropTypes.string,</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;AppCompatButton</span><br><span class="line">                &#123;...this.props&#125;</span><br><span class="line">            /&gt;</span><br><span class="line">        );</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> componentName = <span class="string">'AppCompatButton'</span>;</span><br><span class="line"><span class="keyword">let</span> AppCompatButton = requireNativeComponent(</span><br><span class="line">    componentName,</span><br><span class="line">    AppCompatButtonControl</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123;AppCompatButtonControl&#125;</span><br></pre></td></tr></table></figure>

<p>最后，在布局中，直接使用<appcompatbuttoncontrol>标签</appcompatbuttoncontrol></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;View style=&#123;styles.container&#125;&gt;</span><br><span class="line">        &lt;Text style=&#123;styles.welcome&#125;&gt;Welcome to React Native!&lt;/Text&gt;</span><br><span class="line">        &lt;Text style=&#123;styles.instructions&#125;&gt;To get started, edit App.js&lt;/Text&gt;</span><br><span class="line">        &lt;Text style=&#123;styles.instructions&#125;&gt;&#123;instructions&#125;&lt;/Text&gt;</span><br><span class="line">        &lt;AppCompatButtonControl style=&#123;&#123;width: <span class="number">200</span>, height:<span class="number">50</span>&#125;&#125; buttonText=&#123;<span class="string">'按钮'</span>&#125; /&gt;</span><br><span class="line">      &lt;/View&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>最终效果如下图所示：</p>
<p><img src="/img/2019-03-14-react-natvie-for-android-02-03.png" alt></p>
<h1 id="本节小结"><a href="#本节小结" class="headerlink" title="本节小结"></a>本节小结</h1><p>本节简单介绍了利用Chrome插件调试rn代码的方式，并通过ReactPackage和NativeModule，介绍了如何给rn提供安卓接口以及安卓封装的View，算是比较基础入门的知识。下一篇我们讲一讲如何基于ReactRootView封装RN Fragment</p>
]]></content>
      
        <categories>
            
            <category> React Native in Android的项目实战 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> React Native </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[React Native in Android的项目实战01--从RN的官方Demo讲起]]></title>
      <url>http://wangyeming.github.com/2019/03/12/react-natvie-for-android-01/</url>
      <content type="html"><![CDATA[<p>首先我们从React Native官方的教程开始，先研究清楚RN默认新建的工程的结构，方便我们后续进行进一步的定制。<br>这一章讲的比较基础，不会过多展开。</p>
<a id="more"></a>

<h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><h2 id="JavaScript和ECMAScript"><a href="#JavaScript和ECMAScript" class="headerlink" title="JavaScript和ECMAScript"></a>JavaScript和ECMAScript</h2><p>如果只是从事客户端这边的开发，即使是和RN协同开发，负责中间桥的相关业务，其实不了解JavaScript也不要紧。不过简单了解下也有好处，而且我们最终的项目Demo也有一些RN端的代码。</p>
<p>推荐一本JavaScript入门书籍 <a href="https://wangdoc.com/javascript/" target="_blank" rel="noopener">JavaScript 语言入门教程</a></p>
<p>ECMAScript又是什么呢？引入一段说明：</p>
<pre><code>ECMAScript 和 JavaScript 的关系是，前者是后者的规格，后者是前者的一种实现（另外的 ECMAScript 方言还有 JScript 和 ActionScript）。日常场合，这两个词是可以互换的。</code></pre><p>目前可以简单的了解下ES6.<a href="http://es6.ruanyifeng.com/" target="_blank" rel="noopener">ECMAScript 6 入门</a></p>
<h2 id="node-js，npm和package-json"><a href="#node-js，npm和package-json" class="headerlink" title="node js，npm和package.json"></a>node js，npm和package.json</h2><p><a href="https://nodejs.org/en/" target="_blank" rel="noopener">node js官网</a></p>
<p>首先要了解node js是什么？</p>
<pre><code>JavaScript 是一种轻量级的脚本语言。所谓“脚本语言”（script language），指的是它不具备开发操作系统的能力，而是只用来编写控制其他大型应用程序（比如浏览器）的“脚本”。

JavaScript 也是一种嵌入式（embedded）语言。它本身提供的核心语法不算很多，只能用来做一些数学和逻辑运算。JavaScript 本身不提供任何与 I/O（输入/输出）相关的 API，都要靠宿主环境（host）提供，所以 JavaScript 只合适嵌入更大型的应用程序环境，去调用宿主环境提供的底层 API。

目前，已经嵌入 JavaScript 的宿主环境有多种，最常见的环境就是浏览器，另外还有服务器环境，也就是 Node 项目。</code></pre><p>也就是说，如果我们平时想练习js的语法，和python，java之类的语言可以直接在命令行执行不同,如果不借助浏览器的话，通常我们需要安装node，通过node来加载，编译和运行我们的js脚本。</p>
<p>npm是nodejs提供的包管理工具。类似brew之于mac os，apt之于linux。</p>
<p>对我们来说，其实主要就是两条命令：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br><span class="line">npm start</span><br></pre></td></tr></table></figure>

<p>关于npm更多的信息和package.json,可以参考下面这篇文章：</p>
<p><a href="https://juejin.im/entry/598286cb6fb9a03c5b04a4ff" target="_blank" rel="noopener">npm 与 package.json 快速入门</a></p>
<h2 id="React和React-Native"><a href="#React和React-Native" class="headerlink" title="React和React Native"></a>React和React Native</h2><p>终于说到了我们的主角React Native。说之前有必要了解什么事React。React是针对View层的使用Javascript的UI组件开发库，从设计初衷来说，React是不关心View层具体技术实现的（比如是否web，android，iOS甚至是windows还是macOS）。</p>
<pre><code>A JavaScript library for building user interfaces</code></pre><p>ReactNative更多的是一个基于React进行iOS和Android原生App开发的框架，包括封装好的UI组件库，同时提供了React组件生成原生APP的能力。</p>
<pre><code>A framework for building native apps using React</code></pre><p><a href="https://facebook.github.io/react-native/" target="_blank" rel="noopener">ReactNative</a></p>
<h1 id="初探示例工程"><a href="#初探示例工程" class="headerlink" title="初探示例工程"></a>初探示例工程</h1><h2 id="项目初始化"><a href="#项目初始化" class="headerlink" title="项目初始化"></a>项目初始化</h2><p>按照教程的要求,安装好node，脚手架工具react-native-cli，然后利用react-native-cli快速搭建Demo工程。</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">react-native init AwesomeProject</span><br></pre></td></tr></table></figure>

<p>执行成功后，我们可以看到文件夹下，包含着这些文件。</p>
<p><img src="/img/2019-03-12-react-natvie-for-android-01-01.png" alt></p>
<h2 id="运行示例"><a href="#运行示例" class="headerlink" title="运行示例"></a>运行示例</h2><h3 id="运行rn工程"><a href="#运行rn工程" class="headerlink" title="运行rn工程"></a>运行rn工程</h3><ul>
<li>在工程根目录下，执行命令行</li>
</ul>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure>

<p>安装node依赖包，成功后，执行</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure>

<p>这时，系统会执行package.json下scripts里面的start对应的命令：</p>
<p><img src="/img/2019-03-12-react-natvie-for-android-01-02.png" alt></p>
<p>这时，rn工程这边的测试服务就开启了,在本地8081端口号上，rn运行起了Metro Bundler服务。关于Metro我们之后再讲。接下来只需要在手机上运行起安卓工程就可以进行测试环境的调试了。</p>
<h3 id="运行安卓工程"><a href="#运行安卓工程" class="headerlink" title="运行安卓工程"></a>运行安卓工程</h3><p>本文默认是安卓工程师的角度，所以运行安卓工程就不多说了。额外的，我们需要执行一条命令：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb reverse tcp:8081 tcp:8081</span><br></pre></td></tr></table></figure>

<p>成功连接上本地的rn服务后，会看到Metro Bundler服务开始进行bundle打包，传入正在运行工程的安卓上，代码也就跑起来了。</p>
<p><img src="/img/2019-03-12-react-natvie-for-android-01-03.png" alt></p>
<h2 id="了解工程结构"><a href="#了解工程结构" class="headerlink" title="了解工程结构"></a>了解工程结构</h2><p><img src="/img/2019-03-12-react-natvie-for-android-01-01.png" alt></p>
<p>其中android和ios分别对应着两端的工程项目。package.json是node工程的配置文件, node_module里面是node依赖模块。app.json文件很简单，内容就是</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"AwesomeProject"</span>,</span><br><span class="line">  <span class="attr">"displayName"</span>: <span class="string">"AwesomeProject"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中name待会我们在安卓工程代码中会用到。我们重点关心下面两个文件：</p>
<p>App.js和index.js</p>
<p>先看index.js的代码：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @format</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123;AppRegistry&#125; <span class="keyword">from</span> <span class="string">'react-native'</span>;</span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;name <span class="keyword">as</span> appName&#125; <span class="keyword">from</span> <span class="string">'./app.json'</span>;</span><br><span class="line"></span><br><span class="line">AppRegistry.registerComponent(appName, () =&gt; App);</span><br></pre></td></tr></table></figure>

<p>很简单,就是根据app.json文件中的name，将<strong>App</strong>这个组件注册为app的根组件。接下来来看App.js的代码：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Sample React Native App</span></span><br><span class="line"><span class="comment"> * https://github.com/facebook/react-native</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @format</span></span><br><span class="line"><span class="comment"> * @flow</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> React, &#123;Component&#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;Platform, StyleSheet, Text, View&#125; <span class="keyword">from</span> <span class="string">'react-native'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> instructions = Platform.select(&#123;</span><br><span class="line">  ios: <span class="string">'Press Cmd+R to reload,\n'</span> + <span class="string">'Cmd+D or shake for dev menu'</span>,</span><br><span class="line">  android:</span><br><span class="line">    <span class="string">'Double tap R on your keyboard to reload,\n'</span> +</span><br><span class="line">    <span class="string">'Shake or press menu button for dev menu'</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">type Props = &#123;&#125;;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span>&lt;<span class="title">Props</span>&gt; </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;View style=&#123;styles.container&#125;&gt;</span><br><span class="line">        &lt;Text style=&#123;styles.welcome&#125;&gt;Welcome to React Native!<span class="xml"><span class="tag">&lt;/<span class="name">Text</span>&gt;</span></span></span><br><span class="line">        &lt;Text style=&#123;styles.instructions&#125;&gt;To get started, edit App.js&lt;<span class="regexp">/Text&gt;</span></span><br><span class="line"><span class="regexp">        &lt;Text style=&#123;styles.instructions&#125;&gt;&#123;instructions&#125;&lt;/</span>Text&gt;</span><br><span class="line">      &lt;<span class="regexp">/View&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">const styles = StyleSheet.create(&#123;</span></span><br><span class="line"><span class="regexp">  container: &#123;</span></span><br><span class="line"><span class="regexp">    flex: 1,</span></span><br><span class="line"><span class="regexp">    justifyContent: 'center',</span></span><br><span class="line"><span class="regexp">    alignItems: 'center',</span></span><br><span class="line"><span class="regexp">    backgroundColor: '#F5FCFF',</span></span><br><span class="line"><span class="regexp">  &#125;,</span></span><br><span class="line"><span class="regexp">  welcome: &#123;</span></span><br><span class="line"><span class="regexp">    fontSize: 20,</span></span><br><span class="line"><span class="regexp">    textAlign: 'center',</span></span><br><span class="line"><span class="regexp">    margin: 10,</span></span><br><span class="line"><span class="regexp">  &#125;,</span></span><br><span class="line"><span class="regexp">  instructions: &#123;</span></span><br><span class="line"><span class="regexp">    textAlign: 'center',</span></span><br><span class="line"><span class="regexp">    color: '#333333',</span></span><br><span class="line"><span class="regexp">    marginBottom: 5,</span></span><br><span class="line"><span class="regexp">  &#125;,</span></span><br><span class="line"><span class="regexp">&#125;);</span></span><br></pre></td></tr></table></figure>

<p>App是继承自Component的RN组件，在render()方法中，创建了相应的View，并最终作为app的根组件被注册进来。<br>这里就不多说了，毕竟我们的重点是Android工程中的代码。</p>
<h2 id="Android工程"><a href="#Android工程" class="headerlink" title="Android工程"></a>Android工程</h2><p>我们来看看RN的模版demo里面，在安卓项目中做了哪些事？</p>
<ul>
<li>build gradle文件夹下，添加了RN库的依赖</li>
</ul>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">implementation <span class="string">"com.facebook.react:react-native:+"</span></span><br></pre></td></tr></table></figure>

<p>java文件只有两个MainApplication和MainActivity</p>
<p>MainActivity的代码很简单，</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.awesomeproject;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.facebook.react.ReactActivity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">ReactActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns the name of the main component registered from JavaScript.</span></span><br><span class="line"><span class="comment">     * This is used to schedule rendering of the component.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> String <span class="title">getMainComponentName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"AwesomeProject"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里示例直接继承了ReactActivity，ReactActivity内部封装了很多native和rn具体配置的接口设置，后面会详细讲到，这里先不多说了。getMainComponentName()方法返回的字符串正是前面rn工程根目录下，app.json文件里面的name。这两者需要确保对应的上。</p>
<p>再看MainApplication的代码</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.awesomeproject;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.app.Application;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.facebook.react.ReactApplication;</span><br><span class="line"><span class="keyword">import</span> com.facebook.react.ReactNativeHost;</span><br><span class="line"><span class="keyword">import</span> com.facebook.react.ReactPackage;</span><br><span class="line"><span class="keyword">import</span> com.facebook.react.shell.MainReactPackage;</span><br><span class="line"><span class="keyword">import</span> com.facebook.soloader.SoLoader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainApplication</span> <span class="keyword">extends</span> <span class="title">Application</span> <span class="keyword">implements</span> <span class="title">ReactApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> ReactNativeHost mReactNativeHost = <span class="keyword">new</span> ReactNativeHost(<span class="keyword">this</span>) &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">getUseDeveloperSupport</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> BuildConfig.DEBUG;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> List&lt;ReactPackage&gt; <span class="title">getPackages</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> Arrays.&lt;ReactPackage&gt;asList(</span><br><span class="line">          <span class="keyword">new</span> MainReactPackage()</span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> String <span class="title">getJSMainModuleName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">"index"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> ReactNativeHost <span class="title">getReactNativeHost</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> mReactNativeHost;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onCreate();</span><br><span class="line">    SoLoader.init(<span class="keyword">this</span>, <span class="comment">/* native exopackage */</span> <span class="keyword">false</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看到，RN在Application里实现了ReactApplication，创建了ReactNativeHost对象并通过getReactNativeHost()方法返回。而ReactNativeHost这里实现了有三个方法：</p>
<p>getUseDeveloperSupport()方法只有当打的debug渠道的包，才会开启dev模式。</p>
<p>getJSMainModuleName()返回了”index”，看一下方法的注释：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns the name of the main module. Determines the URL used to fetch the JS bundle</span></span><br><span class="line"><span class="comment"> * from the packager server. It is only used when dev support is enabled.</span></span><br><span class="line"><span class="comment"> * This is the first file to be executed once the &#123;<span class="doctag">@link</span> ReactInstanceManager&#125; is created.</span></span><br><span class="line"><span class="comment"> * e.g. "index.android"</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> String <span class="title">getJSMainModuleName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">"index.android"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里的意思是，仅仅当dev模式下，手机上运行的进程会通过这个字符串名称，去加载此前rn传过来的bundle包的主模块。其实对应着的就是index.js文件。这里提到了<strong>ReactInstanceManager</strong>类，我们后面会具体讲。</p>
<p>getPackages()方法返回的是ReactPackage的列表。关于<strong>ReactPackage</strong>，其实也很简单，我们Android封装给RN的接口也好，View组件也好，都可以通过ReactPackage在启动RN服务的时候，注册给rn这边。这个我们也放到后面再说。</p>
<h1 id="本节小结"><a href="#本节小结" class="headerlink" title="本节小结"></a>本节小结</h1><p>这里简单介绍了rn的一些基础，如何创建，运行rn的模版工程，以及简单的梳理了rn模版工程的目录结构，主要代码的逻辑等。不过随之而来的问题也来了：</p>
<ul>
<li>rn模版工程提供了Activity的实现方法，那么如果想要运行在fragment甚至view里，该如何处理</li>
<li>rn模版工程当中的<strong>ReactInstanceManager</strong>，<strong>ReactPackage</strong>，<strong>ReactNativeHost</strong>都有什么作用？</li>
<li>Android客户端这边如何给rn提供接口？Android客户端这边如何给rn封装view？</li>
</ul>
<p>……等等问题，可以看到，模版代码虽然简单，不过也由于封装层级比较高，很多细节目前还看不出来。所以下一章，我们就深入到内部，研究一下我们刚才提出的问题。</p>
]]></content>
      
        <categories>
            
            <category> React Native in Android的项目实战 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> React Native </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[React Native in Android的项目实战[引]]]></title>
      <url>http://wangyeming.github.com/2019/03/10/react-natvie-for-android-00/</url>
      <content type="html"><![CDATA[<p>从本篇起，我将新开一个系列，和大家分享一下我们目前项目中用到的React Native。我会最终实现一个符合项目80%需求的混合开发的Demo，结合代码跟大家一起分享。</p>
<p><img src="/img/2019-03-10-react-natvie-for-android-00-01.png" alt></p>
<a id="more"></a>

<h1 id="RN们正蚕食客户端开发的工作"><a href="#RN们正蚕食客户端开发的工作" class="headerlink" title="RN们正蚕食客户端开发的工作"></a>RN们正蚕食客户端开发的工作</h1><p>最近几年，以React Native为代表的跨平台移动开发框架可以说非常的火热，以近似前端的开发效率，近似原生优于H5的性能，以及更重要的，可以实现客户端的动态化部署的特性，逐渐的替代了很一大部分原生的开发工作。所以说，跨平台开发框架很大程度上，是客户端应用开发者必须要面对的挑战。</p>
<h1 id="客户端开发可以做的事"><a href="#客户端开发可以做的事" class="headerlink" title="客户端开发可以做的事"></a>客户端开发可以做的事</h1><p>从项目角度而言，集成类似React Native的跨平台移动开发框架的项目中，客户端开发需要做好的工作有：</p>
<ul>
<li>客户端工程中以合适的方式集成React Native(是普通的gradle依赖maven仓库的线上包，还是依赖源码？)</li>
<li>调通客户端与React Native的通信(js如何调用客户端提供的接口？)</li>
<li>页面的跳转分发(打开一个页面，打开的是native页面，还是rn页面？）</li>
</ul>
<h1 id="举一个栗子"><a href="#举一个栗子" class="headerlink" title="举一个栗子"></a>举一个栗子</h1><p>接下来我们将会从这些问题出发，逐步和大家分享安卓当中集成React Native的方式和需要注意的地方。最后我们将会实现一个简单的Demo。Demo实现了以下功能：</p>
<ul>
<li>多Tab下嵌入不同的fragment，tab1是native fragment，tab2是react native fragment</li>
<li>页面跳转通过url的形式进行分发,支持通过url参数的形式，实现四种方式的跳转(native -&gt; native, native -&gt; rn, rn -&gt; native, rn -&gt; native)</li>
</ul>
<p>可以看demo运行起来的样子</p>
<p><img src="/img/2019-03-10-react-natvie-for-android-00-02.png" alt></p>
<p>上图是我实现的一个Demo，首页底部有两个tab，tab1对应的是原生的Fragment实现,tab2对应的是React Native页面。</p>
<p>这里总共定义了四个页面，每个页面都对应着一个url。分别用path表示的话是：</p>
<p>/main   /secondary  /third  /forth</p>
<p>而客户端和RN都实现了url的形式进行页面的跳转,下面的动图展示了四种跳转方式。</p>
<p><img src="/img/2019-03-10-react-natvie-for-android-00-03.gif" alt></p>
<h1 id="子篇索引"><a href="#子篇索引" class="headerlink" title="子篇索引"></a>子篇索引</h1><p><a href="/2019/03/12/react-natvie-for-android-01">React Native in Android的项目实战01–从RN的官方Demo讲起</a><br><a href="/2019/03/14/react-natvie-for-android-02">React Native in Android的项目实战02–Android接口和View封装</a><br><a href="/2019/03/14/react-natvie-for-android-03">React Native in Android的项目实战03–基于ReactRootView封装RN Fragment</a></p>
<p>待补充</p>
<h1 id="仓库地址"><a href="#仓库地址" class="headerlink" title="仓库地址"></a>仓库地址</h1><p>待补充</p>
]]></content>
      
        <categories>
            
            <category> React Native in Android的项目实战 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> React Native </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[TensorFlow入门5-线性回归(下：梯度下降法实际应用)]]></title>
      <url>http://wangyeming.github.com/2019/01/31/tensorflow-introduction-05/</url>
      <content type="html"><![CDATA[<p>线性回归问题最常见的两个方法，一个是最小二乘法，另一个就是<strong>梯度下降</strong>. 上一章我们说明了梯度下降法的原理。现在我们就来看一下线性回归到底是什么类型的问题，以及梯度下降法在线性回归中的实际应用。</p>
<p><img src="/img/2019-01-29-tensorflow-introduction-04-04.svg" alt></p>
<a id="more"></a>

<h1 id="线性回归-Linear-regression"><a href="#线性回归-Linear-regression" class="headerlink" title="线性回归 Linear regression"></a>线性回归 Linear regression</h1><h2 id="定义-Definition"><a href="#定义-Definition" class="headerlink" title="定义 Definition"></a>定义 Definition</h2><p>看一下线性回归的定义：</p>
<pre><code>Linear regression is a linear model, e.g. a model that assumes a linear relationship between 
the input variables (x) and the single output variable (y). 
More specifically, that output variable (y) can be calculated from a linear combination of 
the input variables (x).</code></pre><p><a href="https://en.wikipedia.org/wiki/Linear_regression]" target="_blank" rel="noopener">Linear Regression on Wikipedia</a></p>
<p><img src="/img/2019-01-29-tensorflow-introduction-04-01.svg" alt></p>
<h2 id="特征-Features"><a href="#特征-Features" class="headerlink" title="特征 Features"></a>特征 Features</h2><p>每一份训练的样本中都包含了用于描述样本的特征，也就是变量。</p>
<p><img src="/img/2019-01-29-tensorflow-introduction-04-02.svg" alt></p>
<p>n 表示特征数<br>R<sup>n+1</sup> 表示包含n+1个实数的向量</p>
<p>对于单变量的线性回归，特征数n是1，只有x<sub>0</sub>一个特征</p>
<h2 id="参数-Parameters"><a href="#参数-Parameters" class="headerlink" title="参数 Parameters"></a>参数 Parameters</h2><p>对于这些特征x<sub>i</sub>而言，每个特征都有一个参数值θ<sub>i</sub></p>
<p><img src="/img/2019-01-29-tensorflow-introduction-04-03.svg" alt></p>
<h2 id="假设-Hypothesis"><a href="#假设-Hypothesis" class="headerlink" title="假设 Hypothesis"></a>假设 Hypothesis</h2><p>线性回归问题基于的假设就是，输出值y与X是存在线性关系的。也就可以用下面的表达式进行定义</p>
<p><img src="/img/2019-01-29-tensorflow-introduction-04-04.svg" alt></p>
<p>其中θ<sub>i</sub>是参数，也就是我们希望模型能够计算出的结果。<strong>为了方便标记，我们将x<sub>0</sub>定义为1</strong></p>
<h2 id="价值函数-Cost-Function"><a href="#价值函数-Cost-Function" class="headerlink" title="价值函数 Cost Function"></a>价值函数 Cost Function</h2><p>线型回归问题终究是基于线性关系的假设，那如何衡量我们计算出的<strong>θ</strong>的准确性呢？那显然需要用到cost function(价值函数)。也可以称作误差方程，损失函数等等。</p>
<p><img src="/img/2019-01-31-tensorflow-introduction-05-11.svg" alt></p>
<p>x<sup>i</sup> - 第i个样本的特征值</p>
<p>y<sup>i</sup> - 第i个样本的输出值</p>
<p>m - 样本个数</p>
<p>在线性回归中，损失函数通常为样本输出和假设函数的差取平方。这里就是采用这种方式。</p>
<h1 id="线性回归中的梯度下降"><a href="#线性回归中的梯度下降" class="headerlink" title="线性回归中的梯度下降"></a>线性回归中的梯度下降</h1><h2 id="代数表示方法"><a href="#代数表示方法" class="headerlink" title="代数表示方法"></a>代数表示方法</h2><h3 id="样本"><a href="#样本" class="headerlink" title="样本"></a>样本</h3><p>首先我们有n个样本数据</p>
<p><img src="/img/2019-01-31-tensorflow-introduction-05-08.svg" alt></p>
<p>也可以表示为：</p>
<p><img src="/img/2019-01-31-tensorflow-introduction-05-14.svg" alt>  </p>
<h3 id="价值函数求梯度"><a href="#价值函数求梯度" class="headerlink" title="价值函数求梯度"></a>价值函数求梯度</h3><p>接着我们对价值函数(误差方程)求偏导：</p>
<p><img src="/img/2019-01-31-tensorflow-introduction-05-12.svg" alt>  </p>
<h3 id="确定参数的初始值"><a href="#确定参数的初始值" class="headerlink" title="确定参数的初始值"></a>确定参数的初始值</h3><p><img src="/img/2019-01-31-tensorflow-introduction-05-09.svg" alt></p>
<p>例如我们可以初始化都赋值成1</p>
<p><img src="/img/2019-01-31-tensorflow-introduction-05-13.svg" alt></p>
<h3 id="生成参数的转移矢量"><a href="#生成参数的转移矢量" class="headerlink" title="生成参数的转移矢量"></a>生成参数的转移矢量</h3><p>根据学习速率确定步长α,乘以损失函数的梯度，这样我们就能得到参数的转移矢量，模就是θ的梯度下降距离</p>
<p><img src="/img/2019-01-31-tensorflow-introduction-05-10.svg" alt></p>
<h3 id="生成新参数"><a href="#生成新参数" class="headerlink" title="生成新参数"></a>生成新参数</h3><p>参数的转移矢量的大小，如果所有的θ的梯度下降距离都小于阈值ε,那么计算终止。如果不满足要求，那么</p>
<p><img src="/img/2019-01-31-tensorflow-introduction-05-15.svg" alt></p>
<h2 id="矩阵表示"><a href="#矩阵表示" class="headerlink" title="矩阵表示"></a>矩阵表示</h2><h3 id="样本-1"><a href="#样本-1" class="headerlink" title="样本"></a>样本</h3><p>样本可以用矩阵X Y表示。</p>
<h3 id="假设函数"><a href="#假设函数" class="headerlink" title="假设函数"></a>假设函数</h3><p><img src="/img/2019-01-29-tensorflow-introduction-04-23.svg" alt></p>
<p><strong>θ</strong>表示n<em>1的参数矩阵，*</em>X**表示nx1的自变量矩阵</p>
<h3 id="价值函数"><a href="#价值函数" class="headerlink" title="价值函数"></a>价值函数</h3><p>价值函数的定义也用矩阵形式表示：</p>
<p><img src="/img/2019-01-29-tensorflow-introduction-04-24.svg" alt></p>
<h3 id="价值函数的梯度"><a href="#价值函数的梯度" class="headerlink" title="价值函数的梯度"></a>价值函数的梯度</h3><p><img src="/img/2019-01-31-tensorflow-introduction-05-16.svg" alt></p>
<h3 id="确定参数的初始值-1"><a href="#确定参数的初始值-1" class="headerlink" title="确定参数的初始值"></a>确定参数的初始值</h3><p>这里我们同样把参数初始化都赋值成1</p>
<p><img src="/img/2019-01-31-tensorflow-introduction-05-17.svg" alt></p>
<h3 id="生成参数的转移矢量-1"><a href="#生成参数的转移矢量-1" class="headerlink" title="生成参数的转移矢量"></a>生成参数的转移矢量</h3><p><img src="/img/2019-01-31-tensorflow-introduction-05-19.svg" alt></p>
<h3 id="生成新参数-1"><a href="#生成新参数-1" class="headerlink" title="生成新参数"></a>生成新参数</h3><p>参数的转移矢量的大小，如果所有的θ的梯度下降距离都小于阈值ε,那么计算终止。如果不满足要求，那么</p>
<p><img src="/img/2019-01-31-tensorflow-introduction-05-18.svg" alt></p>
<h1 id="过拟合及解决方案-Overfitting-and-Solution"><a href="#过拟合及解决方案-Overfitting-and-Solution" class="headerlink" title="过拟合及解决方案 Overfitting and Solution"></a>过拟合及解决方案 Overfitting and Solution</h1><h2 id="过拟合-Overfitting"><a href="#过拟合-Overfitting" class="headerlink" title="过拟合 Overfitting"></a>过拟合 Overfitting</h2><p>什么是过拟合？简单来说就是机器学习模型过于执着于完美。我们知道实际中的数据肯定是包含随机误差的，以线性回归问题为例，我们训练器学习模型，去找到一条符合我们要求的回归方程即可。而数据点由于包含误差，或者本身回归方程本身也只是近似解，势必会有一些点不落在回归方程上。过拟合又是什么呢？就是为了让结果尽可能的好看(误差方程的值尽可能的小)，而推算出极其复杂的模型，违背了我们寻求简单近似回归方程的本意。</p>
<p><img src="/img/2019-01-31-tensorflow-introduction-05-01.png" alt></p>
<p>其它问题例如分类问题，也会有过拟合的问题。</p>
<p><img src="/img/2019-01-31-tensorflow-introduction-05-02.png" alt></p>
<p><a href="https://morvanzhou.github.io/tutorials/machine-learning/ML-intro/3-05-overfitting/" target="_blank" rel="noopener">莫凡 有趣的机器学习 过拟合 (Overfitting)</a></p>
<h2 id="解决方案-Solution"><a href="#解决方案-Solution" class="headerlink" title="解决方案 Solution"></a>解决方案 Solution</h2><p>一个解决思路是提高样本量。小样本下个例容易被当做普通情况，而样本量足够大的话，会减少机器学习模型过拟合的问题。</p>
<h3 id="正规化-Regularization"><a href="#正规化-Regularization" class="headerlink" title="正规化 Regularization"></a>正规化 Regularization</h3><p>另一个解决办法是<strong>正规化</strong>。在下图中，蓝色的线代表的方程虽然误差较红色的大，但显然是更优于红色的线的。</p>
<p><img src="/img/2019-01-31-tensorflow-introduction-05-03.png" alt></p>
<p>正规化的解决思路就是让红色的回归方程在增加参数导致复杂化的时候，付出相应的代价。换句话说，我们对误差方程中，参数的复杂程度也做为一个评判标准，太复杂的结果误差就大，这样就可以避免过拟合的问题。</p>
<p><img src="/img/2019-01-31-tensorflow-introduction-05-04.png" alt></p>
<p>如上图所示，我们在误差方程的后面加上只跟参数相关的部分，平方和的正规化称为L2正规化，绝对值的和称为L1正规化。</p>
<p>具体可以参考：</p>
<p><a href="https://morvanzhou.github.io/tutorials/machine-learning/ML-intro/3-09-l1l2regularization/" target="_blank" rel="noopener">莫凡 有趣的机器学习 L1 / L2 正规化 (Regularization)</a></p>
<h2 id="线性回归的正规化"><a href="#线性回归的正规化" class="headerlink" title="线性回归的正规化"></a>线性回归的正规化</h2><p>这里假设我们采用L2正规化的方法，更新我们的误差方程：</p>
<p><img src="/img/2019-01-31-tensorflow-introduction-05-05.svg" alt></p>
<p>λ是正规化参数，值得注意的是，对于θ<sub>0</sub>，也就是参数项，我们不应该去正规化它。</p>
<p>这样的话，第四步的计算公式更新为：</p>
<p><img src="/img/2019-01-31-tensorflow-introduction-05-07.svg" alt>
　</p>
<h1 id="参考-References"><a href="#参考-References" class="headerlink" title="参考 References"></a>参考 References</h1><ul>
<li><p><a href="https://github.com/trekhleb/homemade-machine-learning/blob/master/homemade/linear_regression/README.md" target="_blank" rel="noopener">trekhleb/homemade-machine-learning linear_regression/README</a></p>
</li>
<li><p><a href="https://www.cnblogs.com/pinard/p/5970503.html" target="_blank" rel="noopener">刘建平Pinard 梯度下降（Gradient Descent）小结</a></p>
</li>
<li><p><a href="https://morvanzhou.github.io/tutorials/machine-learning/ML-intro/3-05-overfitting/" target="_blank" rel="noopener">莫凡 有趣的机器学习 过拟合 (Overfitting)</a></p>
</li>
<li><p><a href="https://morvanzhou.github.io/tutorials/machine-learning/ML-intro/3-09-l1l2regularization/" target="_blank" rel="noopener">莫凡 有趣的机器学习 L1 / L2 正规化 (Regularization)</a></p>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 机器学习新手入门 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Machine Learning </tag>
            
            <tag> TensorFlow </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[TensorFlow入门4-线性回归(中：梯度下降法的原理)]]></title>
      <url>http://wangyeming.github.com/2019/01/29/tensorflow-introduction-04/</url>
      <content type="html"><![CDATA[<p>上一章我们使用TensorFlow搭建了一个非常简单的关于单参数线性回归的神经网络，并取得了非常好的运行效果。在分析线性回归前，我们有必要针对梯度下降法做一个介绍，看看梯度下降法到底是怎么一回事？</p>
<p><img src="/img/2019-01-29-tensorflow-introduction-04-14.png" alt></p>
<a id="more"></a>

<h1 id="基础-Basic"><a href="#基础-Basic" class="headerlink" title="基础 Basic"></a>基础 Basic</h1><h2 id="多元函数"><a href="#多元函数" class="headerlink" title="多元函数"></a>多元函数</h2><p>首先引出多元函数的概念。在实际问题中尝尝要研究多个变量之间的关系。线性回归问题中同样如此，上一章y关于x的线性回归方程显然只有x一个变量，也就是一元函数。而真实情况下，变量的数目远远不止一个。</p>
<p><img src="/img/2019-01-29-tensorflow-introduction-04-09.svg" alt></p>
<h2 id="方向倒数和偏导数"><a href="#方向倒数和偏导数" class="headerlink" title="方向倒数和偏导数"></a>方向倒数和偏导数</h2><p>对于一元函数而言，x<sub>0</sub>点导数也就是该点切线的斜率。</p>
<p><img src="/img/2019-01-29-tensorflow-introduction-04-06.jpg" alt></p>
<p>导数的定义是</p>
<p><img src="/img/2019-01-29-tensorflow-introduction-04-08.svg" alt></p>
<p>而由单侧极限引申出<strong>单侧导数</strong>，也就是<strong>左导数</strong>，<strong>右导数</strong></p>
<p><img src="/img/2019-01-29-tensorflow-introduction-04-10.svg" alt></p>
<p><img src="/img/2019-01-29-tensorflow-introduction-04-11.svg" alt></p>
<p>对于<strong>多元函数</strong>而言，任意一个点的导数可能有无数个。想象一个漏斗曲面上任意一点，经过该点我们显然可以沿着不同的方向做无数条切线，而这些切线的斜率都是该点的导数。也就是<strong>全导数</strong>。</p>
<p><img src="/img/2019-01-29-tensorflow-introduction-04-07.jpg" alt></p>
<p>而这些不同方向的导数我们称之为<strong>方向导数</strong></p>
<p><img src="/img/2019-01-29-tensorflow-introduction-04-12.svg" alt></p>
<p>其中<strong>l</strong>是方向向量，<strong>e</strong><sub>l</sub>是<strong>l</strong>方向上的单位方向向量。</p>
<pre><code>方向导数实际上是函数f在x&lt;sup&gt;0&lt;/sup&gt;处沿l方向关于距离的变化率。</code></pre><p><strong>偏导数</strong>又是什么概念呢，其实就是对函数中某个变量求导数。例如二元函数f(x,y)在(x<sub>0</sub>, y<sub>0</sub>)点假设可导，那么它的方向导数当中，x轴正方向导数，x轴负方向导数，y轴正方向导数，y轴负方向导数都是它的<strong>偏导数</strong>。</p>
<p><a href="https://www.zhihu.com/question/26966355/answer/154857139" target="_blank" rel="noopener">什么是全导数？ - 马同学的回答 - 知乎</a></p>
<h2 id="梯度"><a href="#梯度" class="headerlink" title="梯度"></a>梯度</h2><pre><code>梯度：是一个矢量，其方向上的方向导数最大，其大小正好是此最大方向导数。</code></pre><p>从直观的角度来说，以爬山为例，三维空间我们建立起高度(z)关于经纬度(x, y)的二元函数。所谓的梯度也就是，当你站在山的任意一个位置时，想爬山的你其实有无数个方向可以选择。而上山角度最陡峭，也就是爬山最快的那个方向，就是梯度得方向，而这个方向的导数的值，也就是梯度的模。没错，梯度是个矢量，有大小和方向。</p>
<p>从数学角度，函数</p>
<p><img src="/img/2019-01-29-tensorflow-introduction-04-09.svg" alt></p>
<p>的如果在点<strong>x<sub>0</sub></strong>处可微，那么f在<strong>x<sub>0</sub></strong>的梯度就是这个点的偏导数，记作<strong>grad</strong> f(<strong>x<sub>0</sub></strong>) 或 ∇ f(<strong>x<sub>0</sub></strong>)</p>
<p><img src="/img/2019-01-29-tensorflow-introduction-04-13.svg" alt></p>
<p>[如何直观形象的理解方向导数与梯度以及它们之间的关系？ - 马同学的回答 - 知乎]<br>(<a href="https://www.zhihu.com/question/36301367/answer/156102040" target="_blank" rel="noopener">https://www.zhihu.com/question/36301367/answer/156102040</a>)</p>
<h1 id="梯度下降-Gradient-Descent"><a href="#梯度下降-Gradient-Descent" class="headerlink" title="梯度下降 Gradient Descent"></a>梯度下降 Gradient Descent</h1><h2 id="一元函数的梯度下降"><a href="#一元函数的梯度下降" class="headerlink" title="一元函数的梯度下降"></a>一元函数的梯度下降</h2><p>我们总算了解了梯度的概念。那么梯度下降到底是个什么样的方法呢？</p>
<p>简而言之就是沿着梯度的方向，尝试找到误差方程的最小值。</p>
<p>什么意思？还是以最简单的一元函数为例，假设图中的曲线是我们的误差方程曲线，小球的位置就是我们随机给的初始值。根据这个初始值，我们能得到误差方程的初始函数值。我们接下来尝试沿着该点的梯度的方向，去移动这个初始点。(为什么是梯度而不是其他的方向导数，因为梯度其方向上的方向导数最大，也就是最快，有捷径我们自然不会去绕远路)。如此反复之后，直到我们获得的误差方程的的值小于我能接受的范围，那么最终小球的位置就是我们要找的值。</p>
<p><img src="/img/2019-01-29-tensorflow-introduction-04-14.png" alt></p>
<p>这里很显然带来了两个问题。</p>
<ol>
<li>我找到的点，就一定是最低点吗？也就是说，我找到的点，就一定是误差方程的最小值点吗？ </li>
<li>梯度的方向有了，那小球每次移动的距离是多少？</li>
</ol>
<p>第一个问题显然，我们无法保证找到的点就一定是最值点。根据误差方程，初始位置，甚至是步长的不同，我们很可能找到的是一个极值点。形象点说，下山的时候，你走了一段路，发现来到了一处谷底，这个谷底一定是山脚吗？不一定，它也可能只是山上的一处低处。当然，图中实例的曲线，显然是一个凸函数，那我们找到的极值点也一定是它的最值点。</p>
<p><img src="/img/2019-01-29-tensorflow-introduction-04-17.png" alt></p>
<p>第二个问题，也就是步长的问题，这个和初始点的位置一样，我们可以手动去设置它的值，也就是学习速率。如下图所示，学习速率太小可能导致计算次数变多，时间变得很长。而学习速率过大，则很可能导致一直在极值点附近跳跃，到达不了理想的位置。所以，合理的学习速率非常重要。</p>
<p><img src="/img/2019-01-29-tensorflow-introduction-04-15.png" alt></p>
<p><a href="https://morvanzhou.github.io/tutorials/machine-learning/tensorflow/1-1-C-gradient-descent/" target="_blank" rel="noopener">莫烦 神经网络 梯度下降</a></p>
<h2 id="多元函数的梯度下降及算法"><a href="#多元函数的梯度下降及算法" class="headerlink" title="多元函数的梯度下降及算法"></a>多元函数的梯度下降及算法</h2><p>二元函数的梯度下降也可以直观的描述。看下图就好，这里就不多说了。</p>
<p><img src="/img/2019-01-29-tensorflow-introduction-04-16.png" alt></p>
<p>同理多元函数的梯度下降也是类似的,这里就不赘述了。
　　　　　　　　</p>
<h1 id="参考-References"><a href="#参考-References" class="headerlink" title="参考 References"></a>参考 References</h1><ul>
<li><p><a href="https://github.com/trekhleb/homemade-machine-learning/blob/master/homemade/linear_regression/README.md" target="_blank" rel="noopener">trekhleb/homemade-machine-learning linear_regression/README</a></p>
</li>
<li><p><a href="https://www.zhihu.com/question/26966355/answer/154857139" target="_blank" rel="noopener">什么是全导数？ - 马同学的回答 - 知乎</a></p>
</li>
<li><p><a href="https://www.zhihu.com/question/36301367/answer/156102040" target="_blank" rel="noopener">如何直观形象的理解方向导数与梯度以及它们之间的关系？ - 马同学的回答 - 知乎</a></p>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 机器学习新手入门 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Machine Learning </tag>
            
            <tag> TensorFlow </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[TensorFlow入门3-线性回归(上：实战)]]></title>
      <url>http://wangyeming.github.com/2019/01/28/tensorflow-introduction-03/</url>
      <content type="html"><![CDATA[<p>回归问题，尤其是单变量的线性回归问题，一般是机器学习中入门时最常举的例子。我们也不例外，就从线性回归问题聊起。我们上篇先看一个简单的实现例子，下篇我们再聊涉及理论的方面。</p>
<p><img src="/img/2019-01-28-tensorflow-introduction-03-03.gif" alt></p>
<a id="more"></a>

<h1 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h1><p>为了避免一开始就丟公式和原理，我们先看代码，有个感性上的认识。这里我们以『单变量的线性回归』为例.</p>
<h2 id="库的导入"><a href="#库的导入" class="headerlink" title="库的导入"></a>库的导入</h2><p>首先是导入相关库</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br></pre></td></tr></table></figure>

<h2 id="生成随机数据"><a href="#生成随机数据" class="headerlink" title="生成随机数据"></a>生成随机数据</h2><p>接着是原始数据，这里我们通过numpy的随机函数，创建100个(x, y)的点，满足 y = 0.1x + 0.3</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x_data = np.random.rand(<span class="number">100</span>).astype(np.float32)</span><br><span class="line">y_data = x_data * <span class="number">0.1</span> + <span class="number">0.3</span></span><br></pre></td></tr></table></figure>

<p>这里因为是我们自己生成的数据，我们自然知道可以用线性回归去拟合这些点。<br>同时数据样本的值比较小，数据标准化的步骤我们也省略。下面直接开始搭建深度学习网络。</p>
<h2 id="构建张量"><a href="#构建张量" class="headerlink" title="构建张量"></a>构建张量</h2><p>网络搭建的第一步，我们需要去定义出我们通过深度学习网络，到底要计算出什么样的结果。很显然，假如我只知道我的数据大致符合：</p>
<pre><code>y = w*x+b</code></pre><p>这样的线型方程。那么，我希望深度学习网络能顺利的输出w和b的值，接近我预设的真实值。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">weights = tf.Variable(tf.random_uniform([<span class="number">1</span>], <span class="number">-1.0</span>, <span class="number">1.0</span>))</span><br><span class="line">biases = tf.Variable(tf.zeros([<span class="number">1</span>]))</span><br></pre></td></tr></table></figure>

<p>只要你看了上一章<a href="2019/01/28/tensorflow-introduction-02">TensorFlow入门2-基础概念</a>, 对这里张量的定义肯定不会太陌生。为了更直观的了解到我们这两行到底做了什么，我们可以拆开了这样写：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">weights_initial_value = tf.random_uniform(shape=[<span class="number">1</span>], minval=<span class="number">-1.0</span>, maxval=<span class="number">1.0</span>)</span><br><span class="line">weights = tf.Variable(initial_value=weights_initial_value)</span><br><span class="line">biases_initial_value = tf.zeros(shape=[<span class="number">1</span>])</span><br><span class="line">biases = tf.Variable(initial_value=biases_initial_value)</span><br></pre></td></tr></table></figure>

<ul>
<li>定义张量y，也就是我们的预测值。</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 张量支持四则运算</span></span><br><span class="line">y = weights * x_data + biases</span><br></pre></td></tr></table></figure>

<p>到这一步，我们定义了三个张量，weights和biases分别对应着公式中的w和b，而y是预测值。我们可以打印出这三个张量：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;tf.Variable &apos;Variable:0&apos; shape=(1,) dtype=float32_ref&gt; </span><br><span class="line">&lt;tf.Variable &apos;Variable_1:0&apos; shape=(1,) dtype=float32_ref&gt; </span><br><span class="line">Tensor(&quot;add:0&quot;, shape=(100,), dtype=float32)</span><br></pre></td></tr></table></figure>

<h2 id="定义损失函数和优化器"><a href="#定义损失函数和优化器" class="headerlink" title="定义损失函数和优化器"></a>定义损失函数和优化器</h2><ul>
<li>接下来我们需要定义的是损失函数和优化器。前者是我们评价预测结果好坏的计算方法，后者则是深度学习网络根据预测值进行迭代优化的真正的方法。这里我们选用的是梯度下降法。</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 输入张量是预测值和实际值的平方差，实际损失是通过tf.math.reduce_mean方法定义的求均值的算术操作</span></span><br><span class="line">loss = tf.math.reduce_mean(input_tensor=tf.square(y - y_data))</span><br><span class="line"><span class="comment"># 定义梯度下降作为优化器,学习速率是0.5</span></span><br><span class="line">optimizer = tf.train.GradientDescentOptimizer(<span class="number">0.5</span>)</span><br><span class="line"><span class="comment"># 定义实际操作就是使用梯度下降优化器去最小化损失函数</span></span><br><span class="line">train = optimizer.minimize(loss)</span><br></pre></td></tr></table></figure>

<h2 id="创建会话并运行"><a href="#创建会话并运行" class="headerlink" title="创建会话并运行"></a>创建会话并运行</h2><p>到了真正开始执行运算的一步了。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 记得初始化变量</span></span><br><span class="line">init = tf.global_variables_initializer()</span><br><span class="line">sess = tf.Session()</span><br><span class="line">sess.run(init)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> step <span class="keyword">in</span> range(<span class="number">201</span>):</span><br><span class="line">    sess.run(train)</span><br><span class="line">    <span class="keyword">if</span> step % <span class="number">20</span> == <span class="number">0</span>:</span><br><span class="line">        print(step, sess.run(weights), sess.run(biases))</span><br></pre></td></tr></table></figure>

<h1 id="输出结果"><a href="#输出结果" class="headerlink" title="输出结果"></a>输出结果</h1><pre><code>[0.4496472] [0.]
0 [0.4820045] [0.12873188]
20 [0.18697067] [0.25420249]
40 [0.12046056] [0.28922576]
60 [0.10481351] [0.2974653]
80 [0.10113242] [0.2994037]
100 [0.1002664] [0.29985973]
120 [0.10006267] [0.29996702]
140 [0.10001475] [0.29999223]
160 [0.10000348] [0.2999982]
180 [0.10000083] [0.29999956]
200 [0.1000002] [0.29999992]</code></pre><p>可以看到，深度学习网络，通过梯度下降方法，经过201次的训练，已经可以很精确的算出w和b的值。</p>
<h1 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># create data</span></span><br><span class="line">x_data = np.random.rand(<span class="number">100</span>).astype(np.float32)</span><br><span class="line">y_data = x_data * <span class="number">0.1</span> + <span class="number">0.3</span></span><br><span class="line"></span><br><span class="line">weights = tf.Variable(tf.random_uniform([<span class="number">1</span>], <span class="number">-1.0</span>, <span class="number">1.0</span>))</span><br><span class="line">biases = tf.Variable(tf.zeros([<span class="number">1</span>]))</span><br><span class="line">y = weights * x_data + biases</span><br><span class="line"></span><br><span class="line">loss = tf.math.reduce_mean(tf.square(y - y_data))</span><br><span class="line">optimizer = tf.train.GradientDescentOptimizer(<span class="number">0.5</span>)</span><br><span class="line">train = optimizer.minimize(loss)</span><br><span class="line"></span><br><span class="line">init = tf.global_variables_initializer()</span><br><span class="line">sess = tf.Session()</span><br><span class="line">sess.run(init)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> step <span class="keyword">in</span> range(<span class="number">201</span>):</span><br><span class="line">    sess.run(train)</span><br><span class="line">    <span class="keyword">if</span> step % <span class="number">20</span> == <span class="number">0</span>:</span><br><span class="line">        print(step, sess.run(weights), sess.run(biases))</span><br></pre></td></tr></table></figure>

<h1 id="可视化"><a href="#可视化" class="headerlink" title="可视化"></a>可视化</h1><h2 id="数据增加噪音"><a href="#数据增加噪音" class="headerlink" title="数据增加噪音"></a>数据增加噪音</h2><p>通常情况下，我们的数据不会像我们之前展示的那样的完美，所以我们有必要给数据增加上噪音偏差，让它不会恰好完美的落在一条直线上。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x_data = np.random.rand(<span class="number">100</span>).astype(np.float32)</span><br><span class="line">noise = np.random.normal(<span class="number">0</span>, <span class="number">0.05</span>, x_data.shape).astype(np.float32)</span><br><span class="line">y_data = x_data * <span class="number">0.5</span> + <span class="number">0.3</span> + noise</span><br></pre></td></tr></table></figure>

<h2 id="可视化原始数据"><a href="#可视化原始数据" class="headerlink" title="可视化原始数据"></a>可视化原始数据</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">plt.scatter(x_data, y_data, s=<span class="number">75</span>, alpha=<span class="number">0.5</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<p><img src="/img/2019-01-28-tensorflow-introduction-03-01.png" alt></p>
<p>让我们给图加一个y=0.5x+0.3的线段</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x = np.linspace(<span class="number">0</span>, <span class="number">1</span>, <span class="number">10</span>)</span><br><span class="line">y = x * <span class="number">0.5</span> + <span class="number">0.3</span></span><br><span class="line">plt.plot(x, y, label=<span class="string">'linear'</span>)</span><br></pre></td></tr></table></figure>

<p><img src="/img/2019-01-28-tensorflow-introduction-03-02.png" alt></p>
<h2 id="可视化结果"><a href="#可视化结果" class="headerlink" title="可视化结果"></a>可视化结果</h2><p>同样的，我们可以动态的展示深度学习网络计算出的结果</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> step <span class="keyword">in</span> range(<span class="number">201</span>):</span><br><span class="line">    sess.run(train)</span><br><span class="line">    <span class="keyword">if</span> step % <span class="number">20</span> == <span class="number">0</span>:</span><br><span class="line">        weights_value = sess.run(weights)</span><br><span class="line">        biases_value = sess.run(biases)</span><br><span class="line">        print(step, weights_value, biases_value)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">'lines'</span> <span class="keyword">in</span> locals().keys():</span><br><span class="line">            <span class="comment"># 移除上一次画的拟合线</span></span><br><span class="line">            ax.lines.remove(lines[<span class="number">0</span>])</span><br><span class="line">        lines = ax.plot(x_data, weights_value * x_data + biases_value)</span><br><span class="line">        plt.pause(<span class="number">1</span>)</span><br></pre></td></tr></table></figure>

<p><img src="/img/2019-01-28-tensorflow-introduction-03-03.gif" alt></p>
<pre><code class="python"></code></pre>
]]></content>
      
        <categories>
            
            <category> 机器学习新手入门 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Machine Learning </tag>
            
            <tag> TensorFlow </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[TensorFlow入门2-基础概念]]></title>
      <url>http://wangyeming.github.com/2019/01/28/tensorflow-introduction-02/</url>
      <content type="html"><![CDATA[<p>接触TensorFlow之前，有必要了解一下TensorFlow当中的基础概念。这里简单梳理下TensorFlow的数据流图, 张量, 会话, 优化器等概念。</p>
<a id="more"></a>

<pre><code>本文内容已于2019年09月10日，Google开发者大会当日更新。</code></pre><h1 id="TensorFlow是什么"><a href="#TensorFlow是什么" class="headerlink" title="TensorFlow是什么"></a>TensorFlow是什么</h1><p>TensorFlow是Google推出的开发和训练机器学习模型的核心开源库。</p>
<p><a href="https://www.tensorflow.org/" target="_blank" rel="noopener">TensorFlow官网</a></p>
<p><a href="https://github.com/tensorflow/tensorflow" target="_blank" rel="noopener">TensorFlow仓库地址</a></p>
<p><a href="https://www.tensorflow.org/api_docs/python/tf?hl=zh-cn" target="_blank" rel="noopener">TensorFlow Python API</a></p>
<p>目前TensorFlow已经发布了<a href="https://www.tensorflow.org/beta/#tensorflow-20" target="_blank" rel="noopener">2.0 RC版</a>，对于目前大面积使用的1.x的接口有了相当程度的改动。本文我们还是以1.x的API为例。</p>
<h2 id="TensorFlow-模块与Api"><a href="#TensorFlow-模块与Api" class="headerlink" title="TensorFlow 模块与Api"></a>TensorFlow 模块与Api</h2><p><img src="/img/2019-01-28-tensorflow-introduction-02-05.png" alt></p>
<p>从这张图中我们看到，TensorFlow设计了高中低不同等级的API，并且多语言的兼容性使得开发者可以尽可能的使用自己熟悉的开发语言。</p>
<h2 id="TensorFlow-架构"><a href="#TensorFlow-架构" class="headerlink" title="TensorFlow 架构"></a>TensorFlow 架构</h2><p><img src="/img/2019-01-28-tensorflow-introduction-02-06.png" alt></p>
<h1 id="数据流图-Dataflow-graph"><a href="#数据流图-Dataflow-graph" class="headerlink" title="数据流图 Dataflow graph"></a>数据流图 Dataflow graph</h1><p><img src="/img/2019-01-28-tensorflow-introduction-02-01.gif" alt></p>
<p>这张官网的动图就很直观的表现了TensorFlow是如何构建算法模型的。这里我们不仔细展开，但是也可以发现，动图中表示的是，数据以流的形式在一张包含特定结构的图中进行流动。具体来说：</p>
<p>TensorFlow用数据流图表示算法模型。</p>
<p><a href="https://www.tensorflow.org/guide/graphs?hl=zh-cn#why_dataflow_graphs" target="_blank" rel="noopener">为什么使用数据流图？</a></p>
<p>TensorFlow数据流图是一种申明式的编程规范。</p>
<p><img src="/img/2019-01-28-tensorflow-introduction-02-02.png" alt></p>
<p>这里不展开说哈，像Lambda表达式其实就是一种申明式，或者说函数式的编程。</p>
<p>具体到数据流图，它是由节点和有向边组成, 下面有一张结构图：</p>
<p><img src="/img/2019-01-28-tensorflow-introduction-02-03.png" alt></p>
<h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><p>数据流图中的每个节点对应一个具体的操作。因此，操作是模型功能的实际载体。<br>也就是说，</p>
<p>节点分为三类：</p>
<p>存储节点(Variable)    有状态的变量参数,通常用来存储模型参数<br>计算节点(Operation)   无状态的计算或控制操作，主要负责算法逻辑表达或流程控制<br>数据节点(PlaceHolder) 数据的占位符操作,用于描述图外输入数据的属性</p>
<p>用比较专业的术语来概括下数据流图：</p>
<pre><code>TensorFlow数据流图描述了算法模型的计算拓扑，其中各个操作(节点)都是抽象的函映射或数学表达式。
换句话说，数据流图本身是一个具有计算拓扑或内部结构的『壳』,在用户向数据流图填充数据前，图中并没有执行任何计算。</code></pre><p>从图论的角度，TensorFlow中的图，是一个有向无环图。</p>
<h1 id="张量-Tensor"><a href="#张量-Tensor" class="headerlink" title="张量 Tensor"></a>张量 Tensor</h1><h2 id="张量-Tensor-和-稀疏张量-Sparse-Tensor"><a href="#张量-Tensor-和-稀疏张量-Sparse-Tensor" class="headerlink" title="张量 Tensor 和 稀疏张量 Sparse Tensor"></a>张量 Tensor 和 稀疏张量 Sparse Tensor</h2><p>官网对<strong>张量</strong>的解释：</p>
<pre><code>正如名称所示，TensorFlow 这一框架定义和运行涉及张量的计算。张量是对矢量和矩阵向潜在的更高维度的泛化。
TensorFlow 在内部将张量表示为基本数据类型的 n 维数组。</code></pre><p>简单来说呢，张量表示某种<strong>相同类型</strong>的多维数组</p>
<p>在TensorFlow中，张量具有有数据类型和形状两个基本属性。</p>
<ul>
<li>数据类型(如浮点型，整型，字符串)</li>
<li>数组形状(各个维度的大小)</li>
</ul>
<p>而相对着稀疏张量 SparseTensor 维度很高，但是数据量稀疏。熟悉线性代数的同学应该知道稀疏矩阵的概念，稀疏张量类似，通过在存储上只存形状和有意义的数值，可以大幅的减少存储空间以及计算量。</p>
<p>所以，总结一下TensorFlow 张量是什么？</p>
<ul>
<li>张量是用来表示多维数组的</li>
<li>张量是执行操作时的输入或输出数据</li>
<li>用户通过执行操作来创建或计算张量</li>
<li>张量的形状不一定在编译时确定，可以在运行时通过形状推断计算得出</li>
</ul>
<h2 id="阶-Rank"><a href="#阶-Rank" class="headerlink" title="阶 Rank"></a>阶 Rank</h2><p>tf.Tensor的阶也就是它的维度数。阶的同义词包括：秩（order）、等级（degree）或 n 维（n-dimension）</p>
<table>
<thead>
<tr>
<th>阶</th>
<th>数学实例</th>
</tr>
</thead>
<tbody><tr>
<td>0</td>
<td>标量（只有大小）</td>
</tr>
<tr>
<td>1</td>
<td>矢量（大小和方向）</td>
</tr>
<tr>
<td>2</td>
<td>矩阵（数据表）</td>
</tr>
<tr>
<td>3</td>
<td>3 阶张量（数据立体）</td>
</tr>
<tr>
<td>4</td>
<td>n 阶张量（自行想象）</td>
</tr>
</tbody></table>
<p>总结起来，张量就是TensorFlow里的数据单元。根据阶数不同，有0阶的就是一个数字。一阶的向量，二阶的矩阵等等。</p>
<p><img src="/img/2019-01-28-tensorflow-introduction-02-04.png" alt></p>
<h2 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h2><p>先介绍几类特殊的张量</p>
<p>tf.constant         //常量<br>tf.placeholder      //占位符<br>tf.Variable         //变量</p>
<p>常量很好理解，就是创建后无法修改值的张量。<br>占位符可以理解为初期不赋值，等到程序实际运行起来，才输入具体值的张量。<br>而通过tf.Variable创建的变量，和普通的张量相比，区别在于</p>
<ul>
<li>张量的生命周期通常随依赖的计算完成而结束,内存也随之释放</li>
<li>变量则常驻内存，在每一步计算时不断更新其值, 以实现模型参数的更新。</li>
</ul>
<p>相对来说，变量可以用于维护特定节点的状态,如深度学习或机器学习的模型参数</p>
<ul>
<li>首先是导入相关库</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br></pre></td></tr></table></figure>

<ul>
<li>tf.constant可以定义常量张量, tf.Variable可以定义变量张量</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义阶为0，数据类型为float, 名称为aaa的常量张量，初始值为1</span></span><br><span class="line">variable1 = tf.constant(value=<span class="number">1</span>, dtype=float, shape=[], name=<span class="string">'aaa'</span>)</span><br><span class="line"><span class="comment"># Tensor("aaa:0", shape=(), dtype=float32)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义阶为0，数据类型为float, 名称为bbb的变量张量，初始值为1</span></span><br><span class="line">variable2 = tf.Variable(initial_value=<span class="number">1</span>, dtype=float, name=<span class="string">'bbb'</span>)</span><br><span class="line"><span class="comment"># &lt;tf.Variable 'bbb:0' shape=() dtype=float32_ref&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义阶为1(形状为(1, ))，数据类型为float, 名称为ccc的变量张量，初始值为[1,1]</span></span><br><span class="line">variable3 = tf.Variable(initial_value=[<span class="number">1</span>, <span class="number">1</span>], dtype=float, name=<span class="string">'ccc'</span>)</span><br><span class="line"><span class="comment"># &lt;tf.Variable 'ccc:0' shape=(2,) dtype=float32_ref&gt;</span></span><br></pre></td></tr></table></figure>

<p>另外还有一些常用的定义张量的方法，如tf.placeholder定义占位符张量(初始不赋值，运行时才赋值),tf.random_uniform生成随机值张量，tf.zeros定义全零张量等等。</p>
<p>细心的朋友可能会发现，这里输出的张量信息当中并没有初始化的值信息。那么如何才能打印出张量的值呢？</p>
<h1 id="会话-Session"><a href="#会话-Session" class="headerlink" title="会话 Session"></a>会话 Session</h1><pre><code>绘画提供了估算张量和执行操作的运行环境,它是发放计算任务的客户端,所有计算任务都由他连接的执行引擎完成。

会话允许你执行图或者图的一部分。它为图分配资源(一台或多台机器)，并且保存中间结果和变量的实际值。</code></pre><p>说了一堆概念，下面我们来看看如何创建会话，并在会话中执行一些简单操作：</p>
<p>创建会话有两种方式</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 创建会话</span></span><br><span class="line"><span class="comment"># target 会话连接的执行引擎, graph 会话加载的数据流图, config 会话启动的配置项</span></span><br><span class="line">sess = tf.Session(target=...,graph=...,config=...)</span><br><span class="line"><span class="comment"># 2. 估算张量或执行操作</span></span><br><span class="line">sess.run(...)</span><br><span class="line"><span class="comment"># 3. 关闭会话</span></span><br><span class="line">sess.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">  sess.run(...)</span><br></pre></td></tr></table></figure>

<p>例如我想打印前面的几个张量的值，那么我可以这样写：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">    print(sess.run(variable1))  <span class="comment">#1.0</span></span><br><span class="line">    <span class="comment"># 下面两行报错 tensorflow.python.framework.errors_impl.FailedPreconditionError: Attempting to use uninitialized value bbb</span></span><br><span class="line">    <span class="comment">#print(sess.run(variable2))  </span></span><br><span class="line">    <span class="comment">#print(sess.run(variable3))</span></span><br></pre></td></tr></table></figure>

<p>这里我们需要注意，在图中使用变量张量的时候，需要调用初始化方法：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">init = tf.global_variables_initializer()</span><br><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">    sess.run(init)</span><br><span class="line">    print(sess.run(variable1))  <span class="comment">#1.0</span></span><br><span class="line">    print(sess.run(variable2))  <span class="comment">#1.0</span></span><br><span class="line">    print(sess.run(variable3))  <span class="comment">#[1. 1.]</span></span><br></pre></td></tr></table></figure>

<p>获取张量值的另外两种方法：估算张量(Tensor.val)和执行操作(Operation.run)，这两个方法最终也在内部调用了session.run()方法</p>
<h1 id="优化器-Optimizer"><a href="#优化器-Optimizer" class="headerlink" title="优化器 Optimizer"></a>优化器 Optimizer</h1><p>在了解优化器之前，需要了解关于<strong>损失函数</strong>和<strong>优化算法</strong>的知识。</p>
<h2 id="损失函数"><a href="#损失函数" class="headerlink" title="损失函数"></a>损失函数</h2><p>损失函数是用来评估特定的模型参数和特定输入时,表达模型输出的推理值和真实值的不一致程度的函数。损失函数L的形式化定义是：</p>
<p><img src="/img/2019-01-28-tensorflow-introduction-02-07.png" alt></p>
<p>我们知道，训练模型的最终目的是能够合理的降低损失函数的值，这里可能会存在过拟合的问题，就不展开细说了。</p>
<h2 id="优化算法"><a href="#优化算法" class="headerlink" title="优化算法"></a>优化算法</h2><p>典型的机器学习和深度学习问题通常都需要转换为最优化问题进行求解。而求解最优化问题的算法成为优化算法。他们通常采用迭代方式进行。首先设定一个初始的可行解，然后基于特定的函数反复重新计算可行解,直到找到一个最优解或者达到预设的收敛条件。不同优化算法采用的迭代策略不同：</p>
<ul>
<li>有的使用目标函数的一阶导数，如梯度下降法</li>
<li>有的使用目标函数的二阶导数，如牛顿法</li>
<li>有的使用前几轮的迭代信息，如Adam</li>
</ul>
<p>简单来说,典型的机器学习和深度学习问题,包含模型定义，损失函数定义，优化算法定义三个部分</p>
<h2 id="优化器"><a href="#优化器" class="headerlink" title="优化器"></a>优化器</h2><p>优化器是优化算法的载体,一次典型的迭代优化应该分为以下三步：</p>
<ol>
<li>计算梯度,调用compute_gradients()方法</li>
<li>处理梯度 用户按照自己需求，处理梯度值,如梯度裁剪和梯度加权</li>
<li>应用梯度: 调用apply_gradients方法,将处理后的梯度值应用到模型参数。</li>
</ol>
]]></content>
      
        <categories>
            
            <category> 机器学习新手入门 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Machine Learning </tag>
            
            <tag> TensorFlow </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[TensorFlow入门1-基础知识]]></title>
      <url>http://wangyeming.github.com/2018/12/04/tensorflow-introduction-01/</url>
      <content type="html"><![CDATA[<p>TensorFlow是Google开发的一款神经网络的Python外部的结构包, 也是一个采用数据流图来进行数值计算的开源软件库.本篇我们介绍一下深度学习领域的基础知识。</p>
<a id="more"></a>

<h1 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h1><p>我们最常听到的三个名词，<strong>人工智能（Artificial Intelligence）</strong>、<strong>机器学习（Machine Learning）</strong>、<strong>深度学习（Deep Learning）</strong></p>
<p><strong>人工智能（Artificial Intelligence）</strong> 1956年，几个计算机科学家相聚在达特茅斯会议，提出了“人工智能”的概念，梦想着用当时刚刚出现的计算机来构造复杂的、拥有与人类智慧同样本质特性的机器。人工智能涉及到的研究领域非常之广。包括专家系统、机器学习、进化计算、模糊逻辑、计算机视觉、自然语言处理、推荐系统等。</p>
<p>而其中<strong>机器学习（Machine Learning）</strong>是一种实现人工智能的方法，而<strong>深度学习（Deep Learning）</strong>则是一种实现机器学习的技术。</p>
<p><img src="/img/2018-12-04-tensorflow-introduction-01-01.jpg" alt></p>
<p>具体就不展开说了，可以参考这篇文章：</p>
<p>[人工智能、机器学习和深度学习的区别? - 育心的回答 - 知乎]<br>(<a href="https://www.zhihu.com/question/57770020/answer/249708509" target="_blank" rel="noopener">https://www.zhihu.com/question/57770020/answer/249708509</a>)</p>
<p>[机器学习、优化理论、统计分析、数据挖掘、神经网络、人工智能、模式识别之间的关系是什么？]<br>(<a href="https://www.zhihu.com/question/20747381" target="_blank" rel="noopener">https://www.zhihu.com/question/20747381</a>)</p>
<h1 id="TensorFlow是什么"><a href="#TensorFlow是什么" class="headerlink" title="TensorFlow是什么"></a>TensorFlow是什么</h1><p>引用自<a href="https://morvanzhou.github.io/tutorials/machine-learning/tensorflow/1-1-why/" target="_blank" rel="noopener">莫凡大大的教程</a></p>
<pre><code>TensorFlow是Google开发的一款神经网络的Python外部的结构包, 也是一个采用数据流图来进行数值计算的开源软件库.
TensorFlow 让我们可以先绘制计算结构图, 也可以称是一系列可人机交互的计算操作, 
然后把编辑好的Python文件 转换成 更高效的C++, 并在后端进行计算.</code></pre><p><a href="https://www.tensorflow.org/" target="_blank" rel="noopener">TensorFlow官网</a></p>
<p><a href="https://github.com/tensorflow/tensorflow" target="_blank" rel="noopener">TensorFlow仓库地址</a></p>
<p>简单来说，TensorFlow作为开源的机器学习框架,它擅长的任务就是训练深度神经网络。它的底层是C++实现的，保障了运算性能。而为了方便开发，TensorFlow同时提供了多种客户端语言，支持使用包括<strong>Python</strong>，<strong>Java</strong>，<strong>Javascript</strong>等语言进行开发。其中<strong>Python</strong>是支持力度最大，最完善的客户端语言。搭配python自带的<strong>numpy</strong>，<strong>pandas</strong>，<strong>matplot</strong>等计算和画图的库，我们可以很方便的利用<strong>python</strong>运行TensorFlow程序，搭建深度神经网络，进行机器学习。</p>
<p>如果你对<strong>python</strong>，或者<strong>numpy</strong>，<strong>pandas</strong>，<strong>matplot</strong>不太熟悉，可以参考前面的博客：</p>
<p><a href="/2018/09/04/machine-learning-base-python/">机器学习基础1–python</a><br><a href="/2018/09/04/machine-learning-base-numpy/">机器学习基础2–python科学计算之numpy</a><br><a href="/2018/09/04/marchine-learning-base-pandas-01/">机器学习基础3–python科学计算pandas(上)</a><br><a href="/2018/09/05/marchine-learning-base-pandas-02/">机器学习基础4–python科学计算pandas(下)</a><br><a href="/2018/09/05/marchine-learning-base-matplotlib-01/">机器学习基础5–python画图库matplotlib(上）</a><br><a href="/2018/11/06/marchine-learning-base-matplotlib-02/">机器学习基础6–python画图库matplotlib(中）</a><br><a href="/2018/11/28/marchine-learning-base-matplotlib-03/">机器学习基础7–python画图库matplotlib(下）</a></p>
<h1 id="TensorFlow的安装"><a href="#TensorFlow的安装" class="headerlink" title="TensorFlow的安装"></a>TensorFlow的安装</h1><p>最详细的安装方法还是官网</p>
<p><a href="https://www.tensorflow.org/install/" target="_blank" rel="noopener">Install TensorFlow</a></p>
<p>建议安装 <a href="https://www.jetbrains.com/pycharm/download/" target="_blank" rel="noopener">Pycharm</a></p>
<p>然后在Preferences里面，找到Project Interpreter,然后点击+号，搜索tensorflow，点击安装之后，点击Apply。这样比较简单方便。</p>
<p><img src="/img/2018-12-04-tensorflow-introduction-01-02.png" alt></p>
<p>试一试，在Pycharm中新建一个工程，创建一个python文件，然后导入一下</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br></pre></td></tr></table></figure>

<p>如果没报错，那么说明安装成功！</p>
<p>下一篇我们梳理一下TensorFlow中的基础概念，并实现一个简单的线性回归。</p>
<p>Thx~</p>
]]></content>
      
        <categories>
            
            <category> 机器学习新手入门 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Machine Learning </tag>
            
            <tag> TensorFlow </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[机器学习基础7--python画图库matplotlib(下）]]></title>
      <url>http://wangyeming.github.com/2018/11/28/marchine-learning-base-matplotlib-03/</url>
      <content type="html"><![CDATA[<p>第一篇我们讲了matplot画图的基本要素，第二篇讲matplot若干个常见的基础图的画图操作。最后一篇我们讲一下matplot画图中可能会用到的几个高级用法。</p>
<p><img src="/img/2018-11-28-marchine-learning-base-matplotlib-03-09.gif" alt></p>
<a id="more"></a>

<h1 id="Subplot-多图合一"><a href="#Subplot-多图合一" class="headerlink" title="Subplot 多图合一"></a>Subplot 多图合一</h1><p>matplotlib 是可以组合许多的小图, 放在一张大图里面显示的. 使用到的方法叫作 subplot.</p>
<h2 id="均匀分布"><a href="#均匀分布" class="headerlink" title="均匀分布"></a>均匀分布</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">plt.figure()</span><br><span class="line">plt.subplot(<span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>)  <span class="comment"># 创建小图，将整个图像窗口分为2行2列,当前位置为1</span></span><br><span class="line">plt.plot([<span class="number">0</span>, <span class="number">1</span>], [<span class="number">0</span>, <span class="number">1</span>])    <span class="comment"># 经过(0,1) (1, 1)画一条直线</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<p><img src="/img/2018-11-28-marchine-learning-base-matplotlib-03-01.png" alt></p>
<p>将这四个区域都填满：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">plt.figure()</span><br><span class="line">plt.subplot(<span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>)  <span class="comment"># 创建小图，将整个图像窗口分为2行2列,当前位置为1</span></span><br><span class="line">plt.plot([<span class="number">0</span>, <span class="number">1</span>], [<span class="number">0</span>, <span class="number">1</span>])</span><br><span class="line">plt.subplot(<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>)  <span class="comment"># 当前位置为2</span></span><br><span class="line">plt.plot([<span class="number">0</span>, <span class="number">1</span>], [<span class="number">0</span>, <span class="number">2</span>])</span><br><span class="line">plt.subplot(<span class="number">223</span>)  <span class="comment"># 简写</span></span><br><span class="line">plt.plot([<span class="number">0</span>, <span class="number">1</span>], [<span class="number">0</span>, <span class="number">3</span>])</span><br><span class="line">plt.subplot(<span class="number">224</span>)</span><br><span class="line">plt.plot([<span class="number">0</span>, <span class="number">1</span>], [<span class="number">0</span>, <span class="number">4</span>])</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<p><img src="/img/2018-11-28-marchine-learning-base-matplotlib-03-02.png" alt></p>
<h2 id="非均匀分布"><a href="#非均匀分布" class="headerlink" title="非均匀分布"></a>非均匀分布</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">plt.subplot(<span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>)  <span class="comment"># 两行一列</span></span><br><span class="line">plt.plot([<span class="number">0</span>, <span class="number">1</span>], [<span class="number">0</span>, <span class="number">1</span>])</span><br><span class="line">plt.subplot(<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)  <span class="comment"># 两行三列,当前位置是4(因为该命令执行后，第一行重新变成三列，所以当前位置3+1=4)</span></span><br><span class="line">plt.plot([<span class="number">0</span>, <span class="number">1</span>], [<span class="number">0</span>, <span class="number">2</span>])</span><br><span class="line">plt.subplot(<span class="number">235</span>)</span><br><span class="line">plt.plot([<span class="number">0</span>, <span class="number">1</span>], [<span class="number">0</span>, <span class="number">3</span>])</span><br><span class="line">plt.subplot(<span class="number">236</span>)</span><br><span class="line">plt.plot([<span class="number">0</span>, <span class="number">1</span>], [<span class="number">0</span>, <span class="number">4</span>])</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<p><img src="/img/2018-11-28-marchine-learning-base-matplotlib-03-03.png" alt></p>
<h2 id="分格"><a href="#分格" class="headerlink" title="分格"></a>分格</h2><h3 id="subplot2grid-方法"><a href="#subplot2grid-方法" class="headerlink" title="subplot2grid()方法"></a>subplot2grid()方法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">plt.figure()  <span class="comment"># 创建图像</span></span><br><span class="line">ax1 = plt.subplot2grid((<span class="number">3</span>, <span class="number">3</span>),  <span class="comment"># 三行三列</span></span><br><span class="line">                       (<span class="number">0</span>, <span class="number">0</span>),  <span class="comment"># 从第0行第0列开始作图</span></span><br><span class="line">                       colspan=<span class="number">3</span>  <span class="comment"># 跨度为3，一整行</span></span><br><span class="line">                       )</span><br><span class="line">ax1.plot([<span class="number">1</span>, <span class="number">2</span>], [<span class="number">1</span>, <span class="number">2</span>])  <span class="comment"># 画小图</span></span><br><span class="line">ax1.set_title(<span class="string">'ax1_title'</span>)  <span class="comment"># 设置小图的标题</span></span><br><span class="line">ax2 = plt.subplot2grid((<span class="number">3</span>, <span class="number">3</span>), (<span class="number">1</span>, <span class="number">0</span>), colspan=<span class="number">2</span>)</span><br><span class="line">ax3 = plt.subplot2grid((<span class="number">3</span>, <span class="number">3</span>), (<span class="number">1</span>, <span class="number">2</span>), rowspan=<span class="number">2</span>)</span><br><span class="line">ax4 = plt.subplot2grid((<span class="number">3</span>, <span class="number">3</span>), (<span class="number">2</span>, <span class="number">0</span>))</span><br><span class="line"></span><br><span class="line">ax4.scatter([<span class="number">1</span>, <span class="number">2</span>], [<span class="number">2</span>, <span class="number">2</span>])</span><br><span class="line">ax4.set_xlabel(<span class="string">'ax4_x'</span>)</span><br><span class="line">ax4.set_ylabel(<span class="string">'ax4_y'</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<p><img src="/img/2018-11-28-marchine-learning-base-matplotlib-03-04.png" alt></p>
<h3 id="gridspec"><a href="#gridspec" class="headerlink" title="gridspec"></a>gridspec</h3><p>导入matplotlib.gridspec模块</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> matplotlib.gridspec <span class="keyword">as</span> gridspec</span><br><span class="line"></span><br><span class="line"><span class="comment"># 画布分为3x3</span></span><br><span class="line">gs = gridspec.GridSpec(<span class="number">3</span>, <span class="number">3</span>)</span><br><span class="line"><span class="comment"># 第0行，跨整行</span></span><br><span class="line">ax6 = plt.subplot(gs[<span class="number">0</span>, :])</span><br><span class="line">ax7 = plt.subplot(gs[<span class="number">1</span>, :<span class="number">2</span>])</span><br><span class="line">ax8 = plt.subplot(gs[<span class="number">1</span>:, <span class="number">2</span>])</span><br><span class="line"><span class="comment"># -1表示倒数第一行</span></span><br><span class="line">ax9 = plt.subplot(gs[<span class="number">-1</span>, <span class="number">0</span>])</span><br><span class="line">ax10 = plt.subplot(gs[<span class="number">-1</span>, <span class="number">-2</span>])</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<p><img src="/img/2018-11-28-marchine-learning-base-matplotlib-03-05.png" alt></p>
<h3 id="subplots"><a href="#subplots" class="headerlink" title="subplots()"></a>subplots()</h3><p>借助subplots()方法，我们也可以分格显示图像</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">f, ((ax11, ax12), (ax13, ax14)) = plt.subplots(<span class="number">2</span>, <span class="number">2</span>, sharex=<span class="keyword">True</span>, sharey=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line">ax11.scatter([<span class="number">1</span>, <span class="number">2</span>], [<span class="number">1</span>, <span class="number">2</span>])</span><br><span class="line">plt.tight_layout()  <span class="comment"># 紧凑显示图像</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<p><img src="/img/2018-11-28-marchine-learning-base-matplotlib-03-06.png" alt></p>
<h1 id="plot-in-plot-图中图"><a href="#plot-in-plot-图中图" class="headerlink" title="plot in plot 图中图"></a>plot in plot 图中图</h1><p>matplot支持我们在同一个figure里面，画多个图。也就是图中图。</p>
<p>先画一个大图</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 图中图</span></span><br><span class="line"><span class="comment"># 初始化figure</span></span><br><span class="line">fig = plt.figure()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建数据</span></span><br><span class="line">x = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>]</span><br><span class="line">y = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">6</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 画大图</span></span><br><span class="line"><span class="comment"># 确定大图左下角的位置以及宽高</span></span><br><span class="line">left, bottom, width, height = <span class="number">0.1</span>, <span class="number">0.1</span>, <span class="number">0.8</span>, <span class="number">0.8</span></span><br><span class="line"><span class="comment"># 通过add_axes()方法，向figure里面添加第一个图</span></span><br><span class="line">ax1 = fig.add_axes([left, bottom, width, height])</span><br><span class="line">ax1.plot(x, y, <span class="string">'r'</span>)</span><br><span class="line">ax1.set_xlabel(<span class="string">'x'</span>)</span><br><span class="line">ax1.set_ylabel(<span class="string">'y'</span>)</span><br><span class="line">ax1.set_title(<span class="string">'title'</span>)</span><br></pre></td></tr></table></figure>

<p>接着我们画左上角的小图</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">left, bottom, width, height = <span class="number">0.2</span>, <span class="number">0.6</span>, <span class="number">0.25</span>, <span class="number">0.25</span></span><br><span class="line">ax2 = fig.add_axes([left, bottom, width, height])</span><br><span class="line">ax2.plot(y, x, <span class="string">'b'</span>)</span><br><span class="line">ax2.set_xlabel(<span class="string">'x'</span>)</span><br><span class="line">ax2.set_ylabel(<span class="string">'y'</span>)</span><br><span class="line">ax2.set_title(<span class="string">'title inside 1'</span>)</span><br></pre></td></tr></table></figure>

<p>然后是右下角的小图</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">plt.axes([<span class="number">0.6</span>, <span class="number">0.2</span>, <span class="number">0.25</span>, <span class="number">0.25</span>])</span><br><span class="line">plt.plot(y[::<span class="number">-1</span>], x, <span class="string">'g'</span>)  <span class="comment"># 注意对y进行了逆序处理</span></span><br><span class="line">plt.xlabel(<span class="string">'x'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'y'</span>)</span><br><span class="line">plt.title(<span class="string">'title inside 2'</span>)</span><br><span class="line"><span class="comment"># 展示</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<p><img src="/img/2018-11-28-marchine-learning-base-matplotlib-03-07.png" alt></p>
<h1 id="Animation-动画"><a href="#Animation-动画" class="headerlink" title="Animation 动画"></a>Animation 动画</h1><p>matplot支持我们展示动画,首先我们需要导入animation模块</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> animation</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br></pre></td></tr></table></figure>

<p>接下来我们定义一个0~2π内的正弦曲线</p>
<p><img src="/img/2018-11-28-marchine-learning-base-matplotlib-03-08.png" alt></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fig, ax = plt.subplots()</span><br><span class="line"><span class="comment"># 0~2π内的正弦曲线</span></span><br><span class="line">x = np.arange(<span class="number">0</span>, <span class="number">2</span> * np.pi, <span class="number">0.01</span>)</span><br><span class="line">line, = ax.plot(x, np.sin(x))</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义动画</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">animate</span><span class="params">(i)</span>:</span></span><br><span class="line">    line.set_ydata(np.sin(x + i / <span class="number">10.0</span>))</span><br><span class="line">    <span class="keyword">return</span> line,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 帧函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">init</span><span class="params">()</span>:</span></span><br><span class="line">    line.set_ydata(np.sin(x))</span><br><span class="line">    <span class="keyword">return</span> line,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ani = animation.FuncAnimation(fig=fig,  <span class="comment"># 进行动画绘制的figure</span></span><br><span class="line">                              func=animate,  <span class="comment"># 自定义动画函数</span></span><br><span class="line">                              frames=<span class="number">100</span>,  <span class="comment"># 动画长度，一次循环包含的帧数</span></span><br><span class="line">                              init_func=init,  <span class="comment"># 自定义开始帧</span></span><br><span class="line">                              interval=<span class="number">20</span>,  <span class="comment"># 更新频率，以ms计</span></span><br><span class="line">                              blit=<span class="keyword">False</span>  <span class="comment"># 选择更新所有点，还是仅更新产生变化的点。应选择True，但mac用户请选择False，否则无法显示动画</span></span><br><span class="line">                              )</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<p><img src="/img/2018-11-28-marchine-learning-base-matplotlib-03-09.gif" alt></p>
<h2 id="保存为视频"><a href="#保存为视频" class="headerlink" title="保存为视频"></a>保存为视频</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ani.save(<span class="string">'basic_animation.mp4'</span>, fps=<span class="number">30</span>, extra_args=[<span class="string">'-vcodec'</span>, <span class="string">'libx264'</span>])</span><br></pre></td></tr></table></figure>

<p>当然，如果报错的话，记得安装一下ffmpeg或者mencoder,例如mac下：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install ffmpeg</span><br></pre></td></tr></table></figure>

<h2 id="保存为gif图"><a href="#保存为gif图" class="headerlink" title="保存为gif图"></a>保存为gif图</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ani.save(<span class="string">'basic_animation.gif'</span>, writer=<span class="string">'imagemagick'</span>, fps=<span class="number">60</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 机器学习新手入门 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Machine Learning </tag>
            
            <tag> python </tag>
            
            <tag> matplotlib </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[理解numpy中的meshgrid()方法]]></title>
      <url>http://wangyeming.github.com/2018/11/12/numpy-meshgrid/</url>
      <content type="html"><![CDATA[<p>python的meshgrid()方法在很多地方都有应用，例如生成等高线图的数据集。那meshgrid()方法的目的是什么呢？</p>
<p><img src="/img/2018-11-12-numpy-meshgrid-01.png" alt></p>
<a id="more"></a>


<p>借用一张图，</p>
<p><img src="/img/2018-11-12-numpy-meshgrid-01.png" alt></p>
<p>可以看到，meshgrid()方法接受两个一维向量，生成一个坐标矩阵。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">xvalues = np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</span><br><span class="line">yvalues = np.array([<span class="number">7</span>, <span class="number">6</span>, <span class="number">5</span>])</span><br><span class="line"></span><br><span class="line">xx, yy = np.meshgrid(xvalues, yvalues)</span><br><span class="line"></span><br><span class="line">print(<span class="string">'xx='</span>, xx)</span><br><span class="line">print(<span class="string">'yy='</span>, yy)</span><br></pre></td></tr></table></figure>

<p>输出</p>
<pre><code>xx= [[1 2 3 4]
     [1 2 3 4]
     [1 2 3 4]]
yy= [[7 7 7 7]
     [6 6 6 6]
     [5 5 5 5]]</code></pre><p>将生成的两个坐标矩阵通过matplot库的plot()方法画出来：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">plt.plot(xx, yy, marker=<span class="string">'.'</span>, color=<span class="string">'k'</span>, linestyle=<span class="string">'none'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<p><img src="/img/2018-11-12-numpy-meshgrid-02.png" alt></p>
<p>可以看到，通过meshgrid()方法，可以很简单的生成坐标矩阵。而坐标矩阵在图像绘制中有很多应用，例如我们画网格图：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sinus2d</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> np.sin(x) + np.sin(y)</span><br><span class="line"></span><br><span class="line">xx, yy = np.meshgrid(np.linspace(<span class="number">0</span>, <span class="number">2</span> * np.pi, <span class="number">10</span>), np.linspace(<span class="number">0</span>, <span class="number">2</span> * np.pi, <span class="number">10</span>))</span><br><span class="line">z = sinus2d(xx, yy)  <span class="comment"># Create the image on this grid</span></span><br><span class="line"></span><br><span class="line">plt.imshow(z, origin=<span class="string">'lower'</span>, interpolation=<span class="string">'none'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<p><img src="/img/2018-11-12-numpy-meshgrid-03.png" alt></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 增加坐标矩阵的密集程度</span></span><br><span class="line">xx, yy = np.meshgrid(np.linspace(<span class="number">0</span>, <span class="number">2</span> * np.pi, <span class="number">100</span>), np.linspace(<span class="number">0</span>, <span class="number">2</span> * np.pi, <span class="number">100</span>))</span><br></pre></td></tr></table></figure>

<p><img src="/img/2018-11-12-numpy-meshgrid-04.png" alt></p>
]]></content>
      
        
        <tags>
            
            <tag> numpy </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[画图离不开色彩--说说matplot的cmap]]></title>
      <url>http://wangyeming.github.com/2018/11/07/matplot-cmap/</url>
      <content type="html"><![CDATA[<p>一张好看的图，离不开各种各样的颜色。在matplot中，有一个cmap的概念，通过cmap，我们可以很方便的给多组数据自动分配色彩，画出很好看的图。这篇文章就简单介绍下cmap的概念和用法。</p>
<p><img src="/img/2018-11-07-matplot-cmap-02.webp" alt></p>
<a id="more"></a>

<h2 id="cmap是什么"><a href="#cmap是什么" class="headerlink" title="cmap是什么"></a>cmap是什么</h2><p>cmap也就是colormap，可以理解为接受一个数值，输出一个指定的颜色的字典。下面这张图就展示了常见的一些cmap。</p>
<p><img src="/img/2018-11-07-matplot-cmap-01.webp" alt></p>
<p>可以点击<a href="https://matplotlib.org/examples/color/colormaps_reference.html" target="_blank" rel="noopener">matplot cmap</a>这里，里面有一个demo示例，会画一个包含matplot中所有cmap的图。</p>
<p>这里常见的cmap有：</p>
<p>纯色渐变系列：</p>
<p><img src="/img/2018-11-07-matplot-cmap-02.webp" alt></p>
<p>比如说画灰度图的话，可以选择Greys这个cmap。</p>
<h2 id="如何在画图中使用cmap"><a href="#如何在画图中使用cmap" class="headerlink" title="如何在画图中使用cmap"></a>如何在画图中使用cmap</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">n = <span class="number">1024</span>  <span class="comment"># data size</span></span><br><span class="line">X = np.random.normal(<span class="number">0</span>, <span class="number">1</span>, n)  <span class="comment"># 每一个点的X值,平均数是0，方差是1</span></span><br><span class="line">Y = np.random.normal(<span class="number">0</span>, <span class="number">1</span>, n)  <span class="comment"># 每一个点的Y值</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 这里我们每个点的颜色和该点的X值+Y值的和相关</span></span><br><span class="line">color = X + Y</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用我们上面说的灰度图</span></span><br><span class="line">cmap = plt.get_cmap(<span class="string">'Greys'</span>)</span><br><span class="line"><span class="comment"># cmap = plt.cm.Greys #也可以这么写</span></span><br><span class="line"><span class="comment"># 利用normlize来标准化颜色的值</span></span><br><span class="line">norm = plt.Normalize(vmin=<span class="number">-3</span>, vmax=<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 散点图</span></span><br><span class="line">plt.scatter(X, Y, s=<span class="number">75</span>, alpha=<span class="number">0.5</span>, c=color, cmap=cmap, norm=norm)</span><br><span class="line"></span><br><span class="line">plt.xlim(<span class="number">-1.5</span>, <span class="number">1.5</span>)</span><br><span class="line">plt.xticks(())  <span class="comment"># ignore xticks</span></span><br><span class="line">plt.ylim(<span class="number">-1.5</span>, <span class="number">1.5</span>)</span><br><span class="line">plt.yticks(())  <span class="comment"># ignore yticks</span></span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<p><img src="/img/2018-11-07-matplot-cmap-03.png" alt></p>
<p>其中，我们用到了matplotlib.colors.Normalize类，比如说我们的颜色对应的值取值范围在[-10, 10]之间和[-1,1]之间肯定是不能套用同一个转换标准的，通过Normalize标准化，我们可以很方便的将我们的实际值合适的分布到color map上。</p>
<p>我们讲colormap换成</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cmap = plt.get_cmap(<span class="string">'Spectral'</span>)</span><br></pre></td></tr></table></figure>

<p>画出来的图的颜色就是下面这样的：</p>
<p><img src="/img/2018-11-07-matplot-cmap-04.png" alt></p>
]]></content>
      
        <categories>
            
            <category> Matplot画图 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> matplotlib </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[机器学习基础6--python画图库matplotlib(中）]]></title>
      <url>http://wangyeming.github.com/2018/11/06/marchine-learning-base-matplotlib-02/</url>
      <content type="html"><![CDATA[<p>上一篇讲了matplot画图的基本要素，这篇讲matplot几个基础图的画图操作。</p>
<p><img src="/img/2018-11-06-marchine-learning-base-matplotlib-02-19.png" alt></p>
<a id="more"></a>

<h1 id="折线图Polyline"><a href="#折线图Polyline" class="headerlink" title="折线图Polyline"></a>折线图Polyline</h1><p>画折线图的方法是pyplot.plot(),返回 matplotlib.lines.Line2D 对象</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">x= np.linspace(<span class="number">0</span>, <span class="number">2</span>, <span class="number">100</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># label的值可以作为图例默认的值展示</span></span><br><span class="line"></span><br><span class="line">plt.plot(x, x, label=<span class="string">'linear'</span>)</span><br><span class="line">plt.plot(x, x**<span class="number">2</span>, label=<span class="string">'quadratic'</span>)</span><br><span class="line">plt.plot(x, x**<span class="number">3</span>, label=<span class="string">'cubic'</span>)</span><br><span class="line"></span><br><span class="line">plt.xlabel(<span class="string">'x label'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'y label'</span>)</span><br><span class="line"></span><br><span class="line">plt.title(<span class="string">"Simple Plot"</span>)</span><br><span class="line">plt.legend()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<p><img src="/img/2018-11-06-marchine-learning-base-matplotlib-02-13.png" alt></p>
<p>进一步的，我们可以在一张图上绘制多个子图(即一张Figure上绘制多个Axes),此时我们借助的是pyplot.subplot()方法<br>这里我们画一个余弦函数，一个自定义函数，然后上下分布。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(t)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> np.exp(-t) * np.cos(<span class="number">2</span> * np.pi * t)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">t1 = np.arange(<span class="number">0.0</span>, <span class="number">5.0</span>, <span class="number">0.1</span>)</span><br><span class="line">t2 = np.arange(<span class="number">0.0</span>, <span class="number">5.0</span>, <span class="number">0.02</span>)</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">211</span>)  <span class="comment"># the same as plt.subplot(2, 1, 1)</span></span><br><span class="line">plt.plot(t1, f(t1), <span class="string">'bo'</span>, t2, f(t2), <span class="string">'k'</span>)</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">212</span>)</span><br><span class="line">plt.plot(t2, np.cos(<span class="number">2</span> * np.pi * t2), <span class="string">'r--'</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<p><img src="/img/2018-11-06-marchine-learning-base-matplotlib-02-14.png" alt></p>
<h1 id="散点图Scatter"><a href="#散点图Scatter" class="headerlink" title="散点图Scatter"></a>散点图Scatter</h1><p>画散点图的方法是pyplot.scatter(),返回 matplotlib.collections.PathCollection 对象,</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">n = <span class="number">1024</span>  <span class="comment"># data size</span></span><br><span class="line">X = np.random.normal(<span class="number">0</span>, <span class="number">1</span>, n)  <span class="comment"># 每一个点的X值,平均数是0，方差是1</span></span><br><span class="line">Y = np.random.normal(<span class="number">0</span>, <span class="number">1</span>, n)  <span class="comment"># 每一个点的Y值</span></span><br><span class="line">T = np.arctan2(Y, X)  <span class="comment"># for color value</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 散点图</span></span><br><span class="line"><span class="comment"># s size，数字越大，点的面积就越大</span></span><br><span class="line"><span class="comment"># c color 颜色，有多种表达方式。</span></span><br><span class="line"><span class="comment"># aplha 透明度 0(完全透明)到1之间</span></span><br><span class="line">plt.scatter(X, Y, s=<span class="number">75</span>, c=T, alpha=<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line">plt.xlim(<span class="number">-1.5</span>, <span class="number">1.5</span>)</span><br><span class="line">plt.xticks(())  <span class="comment"># ignore xticks</span></span><br><span class="line">plt.ylim(<span class="number">-1.5</span>, <span class="number">1.5</span>)</span><br><span class="line">plt.yticks(())  <span class="comment"># ignore yticks</span></span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<p><img src="/img/2018-11-06-marchine-learning-base-matplotlib-02-01.png" alt></p>
<p>其中关于颜色的设置这部分，我们先看下官方注释里面的表达方式：<br>    #           - A single color format string.<br>    #           - A sequence of color specifications of length n.<br>    #           - A sequence of n numbers to be mapped to colors using <em>cmap</em> and<br>    #             <em>norm</em>.<br>    #           - A 2-D array in which the rows are RGB or RGBA. </p>
<h2 id="颜色的表达方式"><a href="#颜色的表达方式" class="headerlink" title="颜色的表达方式"></a>颜色的表达方式</h2><h3 id="字符串表示法"><a href="#字符串表示法" class="headerlink" title="字符串表示法"></a>字符串表示法</h3><p>A single color format string.<br>字符串表示的颜色,比如说红色可以用’red’或者’r’表示</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plt.scatter(X, Y, s=<span class="number">75</span>, c=<span class="string">'r'</span>, alpha=<span class="number">0.5</span>)</span><br></pre></td></tr></table></figure>

<h3 id="字符串序列表示法"><a href="#字符串序列表示法" class="headerlink" title="字符串序列表示法"></a>字符串序列表示法</h3><p>A sequence of color specifications of length n.<br>用一个长度为n的颜色序列</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">T = [<span class="string">'red'</span>] * <span class="number">512</span> + [<span class="string">'blue'</span>] * <span class="number">512</span></span><br><span class="line">plt.scatter(X, Y, s=<span class="number">75</span>, c=T, alpha=<span class="number">0.5</span>)</span><br></pre></td></tr></table></figure>

<h3 id="cmap表示法"><a href="#cmap表示法" class="headerlink" title="cmap表示法"></a>cmap表示法</h3><p>具体可以参考这篇文章 <a href="/2018/11/07/matplot-cmap/#more">画图离不开色彩–说说matplot的cmap</a></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">n = <span class="number">1024</span>  <span class="comment"># data size</span></span><br><span class="line">X = np.random.normal(<span class="number">0</span>, <span class="number">1</span>, n)  <span class="comment"># 每一个点的X值,平均数是0，方差是1</span></span><br><span class="line">Y = np.random.normal(<span class="number">0</span>, <span class="number">1</span>, n)  <span class="comment"># 每一个点的Y值</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 这里我们每个点的颜色和该点的X值+Y值的和相关</span></span><br><span class="line">color = X + Y</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用名为Spectral的cmap</span></span><br><span class="line">cmap = plt.get_cmap(<span class="string">'Spectral'</span>)</span><br><span class="line"><span class="comment"># cmap = plt.cm.Spectral #也可以这么写</span></span><br><span class="line"><span class="comment"># 利用normlize来标准化颜色的值</span></span><br><span class="line">norm = plt.Normalize(vmin=<span class="number">-3</span>, vmax=<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 散点图</span></span><br><span class="line">plt.scatter(X, Y, s=<span class="number">75</span>, alpha=<span class="number">0.5</span>, c=color, cmap=cmap, norm=norm)</span><br><span class="line"></span><br><span class="line">plt.xlim(<span class="number">-1.5</span>, <span class="number">1.5</span>)</span><br><span class="line">plt.xticks(())  <span class="comment"># ignore xticks</span></span><br><span class="line">plt.ylim(<span class="number">-1.5</span>, <span class="number">1.5</span>)</span><br><span class="line">plt.yticks(())  <span class="comment"># ignore yticks</span></span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<h3 id="RGB-RGBA二维数组表示法"><a href="#RGB-RGBA二维数组表示法" class="headerlink" title="RGB,RGBA二维数组表示法"></a>RGB,RGBA二维数组表示法</h3><p>很简单，和字符串表达方式类似，RGB或RGBA的表达方式可以表示的颜色更多。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">T = [<span class="string">'#42A5F5'</span>] * <span class="number">512</span> + [<span class="string">'#FF5252'</span>] * <span class="number">512</span></span><br><span class="line">plt.scatter(X, Y, s=<span class="number">75</span>, c=T)</span><br></pre></td></tr></table></figure>

<p><img src="/img/2018-11-06-marchine-learning-base-matplotlib-02-02.png" alt></p>
<p>特别的，如果所有点都是同一个颜色：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">T = [<span class="string">'#42A5F5'</span>]</span><br><span class="line">plt.scatter(X, Y, s=<span class="number">75</span>, c=T)</span><br></pre></td></tr></table></figure>

<p><img src="/img/2018-11-06-marchine-learning-base-matplotlib-02-03.png" alt></p>
<h1 id="柱状图Bar"><a href="#柱状图Bar" class="headerlink" title="柱状图Bar"></a>柱状图Bar</h1><p>画柱状图的方法是 pyplot.bar(),返回 matplot.container.BarContainer 对象</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">n = <span class="number">12</span></span><br><span class="line">X = np.arange(n)</span><br><span class="line">Y1 = (<span class="number">1</span> - X / float(n)) * np.random.uniform(<span class="number">0.5</span>, <span class="number">1.0</span>, n)</span><br><span class="line"><span class="comment"># facecolor柱子的填充色,edgecolor柱子的边缘色</span></span><br><span class="line">plt.bar(X, +Y1, facecolor=<span class="string">'#9999ff'</span>, edgecolor=<span class="string">'red'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<p><img src="/img/2018-11-06-marchine-learning-base-matplotlib-02-04.png" alt></p>
<p>更进一步，我们将两个柱状图上下叠放在一起，并标注上具体的数值。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">n = <span class="number">12</span></span><br><span class="line">X = np.arange(n)</span><br><span class="line">Y1 = (<span class="number">1</span> - X / float(n)) * np.random.uniform(<span class="number">0.5</span>, <span class="number">1.0</span>, n)</span><br><span class="line">Y2 = (<span class="number">1</span> - X / float(n)) * np.random.uniform(<span class="number">0.5</span>, <span class="number">1.0</span>, n)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 柱状图</span></span><br><span class="line">plt.bar(X, +Y1, facecolor=<span class="string">'#9999ff'</span>, edgecolor=<span class="string">'white'</span>)</span><br><span class="line">plt.bar(X, -Y2, facecolor=<span class="string">'#ff9999'</span>, edgecolor=<span class="string">'white'</span>)</span><br><span class="line"></span><br><span class="line">plt.xlim(<span class="number">-.5</span>, n)</span><br><span class="line">plt.xticks(())</span><br><span class="line">plt.ylim(<span class="number">-1.25</span>, <span class="number">1.25</span>)</span><br><span class="line">plt.yticks(())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加文字</span></span><br><span class="line"><span class="keyword">for</span> x, y <span class="keyword">in</span> zip(X, Y1):</span><br><span class="line">    <span class="comment"># ha: horizontal alignment</span></span><br><span class="line">    <span class="comment"># va: vertical alignment</span></span><br><span class="line">    plt.text(x, y + <span class="number">0.05</span>, <span class="string">'%.2f'</span> % y, ha=<span class="string">'center'</span>, va=<span class="string">'bottom'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x, y <span class="keyword">in</span> zip(X, Y2):</span><br><span class="line">    <span class="comment"># ha: horizontal alignment</span></span><br><span class="line">    <span class="comment"># va: vertical alignment</span></span><br><span class="line">    plt.text(x, -y - <span class="number">0.05</span>, <span class="string">'%.2f'</span> % y, ha=<span class="string">'center'</span>, va=<span class="string">'top'</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<p><img src="/img/2018-11-06-marchine-learning-base-matplotlib-02-05.png" alt></p>
<h1 id="直方图Histogram"><a href="#直方图Histogram" class="headerlink" title="直方图Histogram"></a>直方图Histogram</h1><p>画柱状图的方法是 pyplot.hist(),返回 matplotlib.patches.Patch 对象</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">np.random.seed(<span class="number">19680801</span>)</span><br><span class="line"></span><br><span class="line">mu1, sigma1 = <span class="number">100</span>, <span class="number">15</span></span><br><span class="line">mu2, sigma2 = <span class="number">80</span>, <span class="number">15</span></span><br><span class="line">x1 = mu1 + sigma1 * np.random.randn(<span class="number">10000</span>)</span><br><span class="line">x2 = mu2 + sigma2 * np.random.randn(<span class="number">10000</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># the histogram of the data</span></span><br><span class="line"><span class="comment"># 50：将数据分成50组</span></span><br><span class="line"><span class="comment"># facecolor：颜色；alpha：透明度</span></span><br><span class="line"><span class="comment"># density：是密度而不是具体数值</span></span><br><span class="line">n1, bins1, patches1 = plt.hist(x1, <span class="number">50</span>, density=<span class="keyword">True</span>, facecolor=<span class="string">'g'</span>, alpha=<span class="number">1</span>)</span><br><span class="line">n2, bins2, patches2 = plt.hist(x2, <span class="number">50</span>, density=<span class="keyword">True</span>, facecolor=<span class="string">'r'</span>, alpha=<span class="number">0.2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># n：概率值；bins：具体数值；patches：直方图对象。</span></span><br><span class="line"></span><br><span class="line">plt.xlabel(<span class="string">'Smarts'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'Probability'</span>)</span><br><span class="line">plt.title(<span class="string">'Histogram of IQ'</span>)</span><br><span class="line"></span><br><span class="line">plt.text(<span class="number">110</span>, <span class="number">.025</span>, <span class="string">r'$\mu=100,\ \sigma=15$'</span>)</span><br><span class="line">plt.text(<span class="number">50</span>, <span class="number">.025</span>, <span class="string">r'$\mu=80,\ \sigma=15$'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置x，y轴的具体范围</span></span><br><span class="line">plt.axis([<span class="number">40</span>, <span class="number">160</span>, <span class="number">0</span>, <span class="number">0.03</span>])</span><br><span class="line">plt.grid(<span class="keyword">True</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<p><img src="/img/2018-11-06-marchine-learning-base-matplotlib-02-15.png" alt></p>
<h1 id="饼状图Pie"><a href="#饼状图Pie" class="headerlink" title="饼状图Pie"></a>饼状图Pie</h1><p>画饼状图的方法是 pyplot.pie(),返回 matplotlib.patches.Wedge 对象</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">plt.figure(figsize=(<span class="number">6</span>, <span class="number">9</span>))</span><br><span class="line">labels = [<span class="string">u'TypeA'</span>, <span class="string">u'TypeB'</span>, <span class="string">u'TypeC'</span>, <span class="string">u'TypeD'</span>]  <span class="comment"># 定义标签</span></span><br><span class="line">values = [<span class="number">46</span>, <span class="number">253</span>, <span class="number">321</span>, <span class="number">66</span>]  <span class="comment"># 每块值</span></span><br><span class="line">colors = [<span class="string">'red'</span>, <span class="string">'yellowgreen'</span>, <span class="string">'lightskyblue'</span>, <span class="string">'yellow'</span>]  <span class="comment"># 每块颜色定义</span></span><br><span class="line">explode = (<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)  <span class="comment"># 将某一块分割出来，值越大分割出的间隙越大</span></span><br><span class="line">patches, text1, text2 = plt.pie(values,</span><br><span class="line">                                explode=explode,</span><br><span class="line">                                labels=labels,</span><br><span class="line">                                colors=colors,</span><br><span class="line">                                autopct=<span class="string">'%.2f%%'</span>,  <span class="comment"># 数值保留固定小数位</span></span><br><span class="line">                                shadow=<span class="keyword">False</span>,  <span class="comment"># 无阴影设置</span></span><br><span class="line">                                startangle=<span class="number">90</span>,  <span class="comment"># 逆时针起始角度设置</span></span><br><span class="line">                                pctdistance=<span class="number">0.6</span>)  <span class="comment"># 数值距圆心半径倍数距离</span></span><br><span class="line"><span class="comment"># patches饼图的返回值，texts1饼图外label的文本，texts2饼图内部的文本</span></span><br><span class="line"><span class="comment"># x，y轴刻度设置一致，保证饼图为圆形</span></span><br><span class="line">plt.axis(<span class="string">'equal'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<h2 id="调整饼的偏离值"><a href="#调整饼的偏离值" class="headerlink" title="调整饼的偏离值"></a>调整饼的偏离值</h2><p><img src="/img/2018-11-06-marchine-learning-base-matplotlib-02-09.png" alt></p>
<p>首先我们看explode参数，explode接受一个长度=值数量的数组，数组中的值的含义：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 正值表示向外偏离</span></span><br><span class="line">explode = (<span class="number">0.3</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br></pre></td></tr></table></figure>

<p><img src="/img/2018-11-06-marchine-learning-base-matplotlib-02-10.png" alt></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 副值表示向外偏离</span></span><br><span class="line">explode = (<span class="number">-0.3</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br></pre></td></tr></table></figure>

<p><img src="/img/2018-11-06-marchine-learning-base-matplotlib-02-11.png" alt></p>
<h2 id="标注字符串的格式化"><a href="#标注字符串的格式化" class="headerlink" title="标注字符串的格式化"></a>标注字符串的格式化</h2><p>autopct参数可以接受None(默认)，字符串或者函数。如果是一个字符串，则按照<code>fmt%pct</code>的方式格式化。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 表示%分数表示，并保留两位小数</span></span><br><span class="line">autopct=<span class="string">'%.2f%%'</span></span><br></pre></td></tr></table></figure>

<p>如果是函数的话，可以这样写：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 返回值是一个函数，该函数接受一个值，返回一个字符串</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_autopct</span><span class="params">(values)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">my_autopct</span><span class="params">(pct)</span>:</span></span><br><span class="line">        total = sum(values)</span><br><span class="line">        val = int(round(pct * total / <span class="number">100.0</span>))</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'&#123;p:.2f&#125;% \n (&#123;v:d&#125;)'</span>.format(p=pct, v=val)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> my_autopct</span><br><span class="line"></span><br><span class="line"><span class="comment"># 用的时候这样</span></span><br><span class="line">autopct=make_autopct(values)</span><br></pre></td></tr></table></figure>

<p><img src="/img/2018-11-06-marchine-learning-base-matplotlib-02-12.png" alt></p>
<h1 id="等高线图Contours"><a href="#等高线图Contours" class="headerlink" title="等高线图Contours"></a>等高线图Contours</h1><p>画等高线用的是plt.contour(),返回 matplot.contour.QuadContourSet 对象</p>
<p>首先我们需要了解，等高线图的数据和前面散点图和柱状图的二维数据结构不一样，多了一个维度：高度。也就是说，等高线图的数据集是由(x,y,h)这个三维点构成。</p>
<p>生成数据集：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据x,y生成高度值</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    <span class="comment"># the height function</span></span><br><span class="line">    <span class="keyword">return</span> (<span class="number">1</span> - x / <span class="number">2</span> + x ** <span class="number">5</span> + y ** <span class="number">3</span>) * np.exp(-x ** <span class="number">2</span> - y ** <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">n = <span class="number">256</span></span><br><span class="line">x = np.linspace(<span class="number">-3</span>, <span class="number">3</span>, n)</span><br><span class="line">y = np.linspace(<span class="number">-3</span>, <span class="number">3</span>, n)</span><br><span class="line"><span class="comment"># 通过meshgrid()方法得到坐标矩阵</span></span><br><span class="line">X, Y = np.meshgrid(x, y)</span><br></pre></td></tr></table></figure>

<h2 id="等高线间区域填充"><a href="#等高线间区域填充" class="headerlink" title="等高线间区域填充"></a>等高线间区域填充</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># plt.contourf()函数进行颜色填充, </span></span><br><span class="line">plt.contourf(X, Y, f(X, Y), <span class="number">8</span>, alpha=<span class="number">.75</span>, cmap=plt.cm.hot)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<p><img src="/img/2018-11-06-marchine-learning-base-matplotlib-02-06.png" alt></p>
<h2 id="画等高线"><a href="#画等高线" class="headerlink" title="画等高线"></a>画等高线</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 绘制等高线</span></span><br><span class="line">C = plt.contour(X, Y, f(X, Y), <span class="number">8</span>, colors=<span class="string">'black'</span>, linewidth=<span class="number">.5</span>)</span><br></pre></td></tr></table></figure>

<p><img src="/img/2018-11-06-marchine-learning-base-matplotlib-02-07.png" alt></p>
<h2 id="等高线的标注"><a href="#等高线的标注" class="headerlink" title="等高线的标注"></a>等高线的标注</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#inline表示Label画在线内</span></span><br><span class="line">plt.clabel(C, inline=<span class="keyword">True</span>, fontsize=<span class="number">10</span>)</span><br></pre></td></tr></table></figure>

<p><img src="/img/2018-11-06-marchine-learning-base-matplotlib-02-08.png" alt></p>
<h1 id="三维图"><a href="#三维图" class="headerlink" title="三维图"></a>三维图</h1><h2 id="绘制三维坐标轴空间"><a href="#绘制三维坐标轴空间" class="headerlink" title="绘制三维坐标轴空间"></a>绘制三维坐标轴空间</h2><p>首先需要导入mpl_toolkits.mplot3d包中的Axes3D</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> mpl_toolkits.mplot3d <span class="keyword">import</span> Axes3D</span><br></pre></td></tr></table></figure>

<p>创建Figure对象，并用Axes3D画三维坐标轴</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fig = plt.figure()</span><br><span class="line">ax = Axes3D(fig)</span><br></pre></td></tr></table></figure>

<p><img src="/img/2018-11-06-marchine-learning-base-matplotlib-02-16.png" alt></p>
<h2 id="3D散点图"><a href="#3D散点图" class="headerlink" title="3D散点图"></a>3D散点图</h2><p>同样的，我们可以在三维坐标系中画散点图，区别只是数据有三个维度</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">data = np.random.randint(<span class="number">0</span>, <span class="number">255</span>, size=[<span class="number">40</span>, <span class="number">40</span>, <span class="number">40</span>])</span><br><span class="line">x, y, z = data[<span class="number">0</span>], data[<span class="number">1</span>], data[<span class="number">2</span>]</span><br><span class="line">ax.scatter(x[:<span class="number">10</span>], y[:<span class="number">10</span>], z[:<span class="number">10</span>], c=<span class="string">'r'</span>)</span><br></pre></td></tr></table></figure>

<p><img src="/img/2018-11-06-marchine-learning-base-matplotlib-02-17.png" alt></p>
<h2 id="3D平面图"><a href="#3D平面图" class="headerlink" title="3D平面图"></a>3D平面图</h2><p>画三维平面图用到的是Axes3D.plot_surface()方法，该方法创建 mpl_toolkits_mlplot3d_art3d.Poly3DCollection 对象</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">X = np.arange(<span class="number">-4</span>, <span class="number">4</span>, <span class="number">0.25</span>)</span><br><span class="line">Y = np.arange(<span class="number">-4</span>, <span class="number">4</span>, <span class="number">0.25</span>)</span><br><span class="line">X, Y = np.meshgrid(X, Y)  <span class="comment"># x-y 平面的网格</span></span><br><span class="line">R = np.sqrt(X ** <span class="number">2</span> + Y ** <span class="number">2</span>)</span><br><span class="line"><span class="comment"># height value</span></span><br><span class="line">Z = np.sin(R)</span><br><span class="line"><span class="comment"># # rstride代表行的跨度，cstride代表列的跨度</span></span><br><span class="line">ax.plot_surface(X, Y, Z, rstride=<span class="number">5</span>, cstride=<span class="number">5</span>, cmap=plt.get_cmap(<span class="string">'rainbow'</span>))</span><br></pre></td></tr></table></figure>

<p><img src="/img/2018-11-06-marchine-learning-base-matplotlib-02-18.png" alt></p>
<p>将跨度改成1，再看效果</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ax.plot_surface(X, Y, Z, rstride=<span class="number">1</span>, cstride=<span class="number">1</span>, cmap=plt.get_cmap(<span class="string">'rainbow'</span>))</span><br></pre></td></tr></table></figure>

<p><img src="/img/2018-11-06-marchine-learning-base-matplotlib-02-19.png" alt></p>
<p>zdir可选择的值有x,y,z,选择z相当于投影到XY平面，同样的，选择x相当于投影到YZ平面，选择y相当于投影到XZ平面。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ax.contourf(X, Y, Z, zdir=<span class="string">'z'</span>, offset=<span class="number">-2</span>, cmap=plt.get_cmap(<span class="string">'rainbow'</span>))</span><br></pre></td></tr></table></figure>

<p><img src="/img/2018-11-06-marchine-learning-base-matplotlib-02-20.png" alt></p>
]]></content>
      
        <categories>
            
            <category> 机器学习新手入门 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Machine Learning </tag>
            
            <tag> python </tag>
            
            <tag> matplotlib </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[机器学习基础5--python画图库matplotlib(上）]]></title>
      <url>http://wangyeming.github.com/2018/09/05/marchine-learning-base-matplotlib-01/</url>
      <content type="html"><![CDATA[<p>图像是我们最直观的数据表达方式，python的matplotlib库可以用来画图。下面来简单总结下matplotlib的使用方法。</p>
<p><img src="/img/2018-09-05-marchine-learning-base-matplotlib-01-05.png" alt></p>
<a id="more"></a>

<p>上篇讲matplot画图中用到的基础对象，包括<strong>图像Figure</strong>，<strong>平面曲线Line2D</strong>，<strong>坐标轴Axes</strong>，<strong>图例Legend</strong>, <strong>注解Annotation</strong>, <strong>注释Text</strong></p>
<p>理解这些对象，有利于我们更好的用matplot画图。</p>
<h1 id="matplotlib-导入"><a href="#matplotlib-导入" class="headerlink" title="matplotlib 导入"></a>matplotlib 导入</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br></pre></td></tr></table></figure>

<h1 id="简单demo"><a href="#简单demo" class="headerlink" title="简单demo"></a>简单demo</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">x = np.linspace(<span class="number">-1</span>, <span class="number">1</span>, <span class="number">50</span>)</span><br><span class="line">y = <span class="number">2</span> * x + <span class="number">1</span></span><br><span class="line"><span class="comment"># 创建图像</span></span><br><span class="line">plt.figure()</span><br><span class="line"><span class="comment"># plot(x,y)画(x,y)曲线</span></span><br><span class="line">plt.plot(x, y)</span><br><span class="line"><span class="comment"># 显示图像</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<p><img src="/img/2018-09-05-marchine-learning-base-matplotlib-01-01.png" alt></p>
<h1 id="基础属性"><a href="#基础属性" class="headerlink" title="基础属性"></a>基础属性</h1><h2 id="图像Figure"><a href="#图像Figure" class="headerlink" title="图像Figure"></a>图像Figure</h2><p>matplot中，图像对应的定义类是matplotlib.figure.Figure</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># num 标识编号，figsize 8英寸*5英寸，dpi图像的dp密度,facecolor背景色白色，edgecolor背景色白色</span></span><br><span class="line">plt.figure(num=<span class="number">1</span>, figsize=(<span class="number">8</span>,<span class="number">5</span>), dpi=<span class="number">100</span>, facecolor=<span class="string">'w'</span>, edgecolor=<span class="string">'w'</span>)</span><br></pre></td></tr></table></figure>

<p>plt.figure()创建了图像,并返回matplotlib.figure.Figure对象，这里我们选择隐式处理返回的对象。</p>
<h2 id="平面曲线Line2D"><a href="#平面曲线Line2D" class="headerlink" title="平面曲线Line2D"></a>平面曲线Line2D</h2><p>通过plot()方法创建matplotlib.line.Line2D对象</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 指定曲线的颜色，线的宽度，线的样式。</span></span><br><span class="line">plt.plot(x, y1, color=<span class="string">'red'</span>, linewidth=<span class="number">1.0</span>, linestyle=<span class="string">'--'</span>)</span><br><span class="line"><span class="comment"># 添加多条曲线</span></span><br><span class="line">plt.plot(x, y2)</span><br></pre></td></tr></table></figure>

<p>具体的参数可以在matplotlib.pyplot.Line2D的初始化函数里找到：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, xdata, ydata,</span></span></span><br><span class="line"><span class="function"><span class="params">             linewidth=None,  # all Nones default to rc</span></span></span><br><span class="line"><span class="function"><span class="params">             linestyle=None,</span></span></span><br><span class="line"><span class="function"><span class="params">             color=None,</span></span></span><br><span class="line"><span class="function"><span class="params">             marker=None,</span></span></span><br><span class="line"><span class="function"><span class="params">             markersize=None,</span></span></span><br><span class="line"><span class="function"><span class="params">             markeredgewidth=None,</span></span></span><br><span class="line"><span class="function"><span class="params">             markeredgecolor=None,</span></span></span><br><span class="line"><span class="function"><span class="params">             markerfacecolor=None,</span></span></span><br><span class="line"><span class="function"><span class="params">             markerfacecoloralt=<span class="string">'none'</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">             fillstyle=None,</span></span></span><br><span class="line"><span class="function"><span class="params">             antialiased=None,</span></span></span><br><span class="line"><span class="function"><span class="params">             dash_capstyle=None,</span></span></span><br><span class="line"><span class="function"><span class="params">             solid_capstyle=None,</span></span></span><br><span class="line"><span class="function"><span class="params">             dash_joinstyle=None,</span></span></span><br><span class="line"><span class="function"><span class="params">             solid_joinstyle=None,</span></span></span><br><span class="line"><span class="function"><span class="params">             pickradius=<span class="number">5</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">             drawstyle=None,</span></span></span><br><span class="line"><span class="function"><span class="params">             markevery=None,</span></span></span><br><span class="line"><span class="function"><span class="params">             **kwargs</span></span></span><br><span class="line"><span class="function"><span class="params">             )</span>:</span></span><br></pre></td></tr></table></figure>

<h2 id="坐标轴Axes"><a href="#坐标轴Axes" class="headerlink" title="坐标轴Axes"></a>坐标轴Axes</h2><p>坐标轴的定义类是matplotlib.Axes</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># xlim()和ylim()设置坐标轴范围</span></span><br><span class="line">plt.xlim((<span class="number">-1</span>, <span class="number">2</span>))</span><br><span class="line">plt.ylim((<span class="number">-2</span>, <span class="number">3</span>))</span><br><span class="line"><span class="comment"># xlabel()和ylabel()设置坐标轴名称</span></span><br><span class="line">plt.xlabel(<span class="string">'X'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'Y'</span>)</span><br><span class="line"><span class="comment"># 借助numpy的linspace()方法，设置更复杂的坐标，-1到2，总共5个坐标点</span></span><br><span class="line">new_ticks = np.linspace(<span class="number">-1</span>, <span class="number">2</span>, <span class="number">5</span>)</span><br><span class="line">plt.xticks(new_ticks)</span><br><span class="line"><span class="comment"># 也可以指定具体的点和标签值</span></span><br><span class="line">plt.yticks(ticket=[<span class="number">-2</span>, <span class="number">-1.8</span>, <span class="number">-1</span>, <span class="number">1.22</span>, <span class="number">3</span>],labels=[<span class="string">r'$really\ bad$'</span>, <span class="string">r'$bad$'</span>, <span class="string">r'$normal$'</span>, <span class="string">r'$good$'</span>, <span class="string">r'$really\ good$'</span>])</span><br></pre></td></tr></table></figure>

<p><img src="/img/2018-09-05-marchine-learning-base-matplotlib-01-02.png" alt></p>
<p>我们可以看到，这里二维图像默认的坐标轴有四条(上下左右)</p>
<p>更复杂的坐标轴设置：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取坐标轴实例</span></span><br><span class="line">ax = plt.gca()</span><br><span class="line"><span class="comment"># 隐藏右边和上面的坐标轴</span></span><br><span class="line">ax.spines[<span class="string">'right'</span>].set_color(<span class="string">'none'</span>)</span><br><span class="line">ax.spines[<span class="string">'top'</span>].set_color(<span class="string">'none'</span>)</span><br></pre></td></tr></table></figure>

<p><img src="/img/2018-09-05-marchine-learning-base-matplotlib-01-03.png" alt></p>
<p>调整坐标轴上刻度的位置</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 值可以选择top，bottom，both，default，none</span></span><br><span class="line">ax.xaxis.set_ticks_position(<span class="string">'bottom'</span>)</span><br></pre></td></tr></table></figure>

<p>默认的坐标轴之间的连接处类似于矩形，我们可以调整坐标轴之间连接处具体的位置</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># spines指定修改的是哪一条坐标轴,set_position()有好几个重载方法，这里用到的是set_position(self, position),，其中position参数是一个二维tuple。</span></span><br><span class="line"><span class="comment"># 第一个值是type,可选的type有"outward","axes","data".</span></span><br><span class="line">ax.spines[<span class="string">'bottom'</span>].set_position((<span class="string">'outward'</span>, <span class="number">10</span>))</span><br></pre></td></tr></table></figure>

<p>『outward』数组的第二个值是个数值，0的话，x轴与y轴的焦点正好在y轴最底部，如果n&gt;0，相当于向y轴负方向移动距离n。<br>『axes』  数组的第二个值取值范围0.0-1.0,表示将端点放在坐标轴的指定比例的位置<br>『data』  数组的第二个值就是坐标轴上具体的位置</p>
<h2 id="图例Legend"><a href="#图例Legend" class="headerlink" title="图例Legend"></a>图例Legend</h2><p>图例对应着的是 matplot.legend类</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 图例的话，需要先通过plot()方法创建Line2D对象</span></span><br><span class="line">l1, = plt.plot(x, y1, label=<span class="string">'linear line'</span>)</span><br><span class="line">l2, = plt.plot(x, y2, color=<span class="string">'red'</span>, linewidth=<span class="number">1.0</span>, linestyle=<span class="string">'--'</span>, label=<span class="string">'square line'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># loc指定位置，如图例放在右上角就是loc='upper right', 'best'表示自动分配最佳位置，label表示图例的名称</span></span><br><span class="line">plt.legend(handles=[l1, l2], labels=[<span class="string">'up'</span>, <span class="string">'down'</span>], loc=<span class="string">'best'</span>)</span><br></pre></td></tr></table></figure>

<p><img src="/img/2018-09-05-marchine-learning-base-matplotlib-01-04.png" alt></p>
<h2 id="注解Annotation"><a href="#注解Annotation" class="headerlink" title="注解Annotation"></a>注解Annotation</h2><p>注解对应着的是 matplot.text.Annotation</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">plt.annotate(<span class="string">r'$2x+1=%s$'</span> % y0,</span><br><span class="line">             xy=(x0, y0),               <span class="comment"># 对(1,3)这个点的描述</span></span><br><span class="line">             xycoords=<span class="string">'data'</span>,           <span class="comment"># 基于数据的值来选位置</span></span><br><span class="line">             xytext=(+<span class="number">30</span>, <span class="number">-30</span>),         <span class="comment"># xytext=(+30, -30)表示xy偏差值,</span></span><br><span class="line">             textcoords=<span class="string">'offset points'</span>,<span class="comment"># 对标注位置的描述</span></span><br><span class="line">             fontsize=<span class="number">16</span>,</span><br><span class="line">             arrowprops=dict(           <span class="comment"># 对箭头类型的设置</span></span><br><span class="line">                 arrowstyle=<span class="string">'-&gt;'</span>,</span><br><span class="line">                 connectionstyle=<span class="string">"arc3,rad=.2"</span>)</span><br></pre></td></tr></table></figure>

<h2 id="注释Text"><a href="#注释Text" class="headerlink" title="注释Text"></a>注释Text</h2><p>注释对应的定义类是 matplot.text.Text</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">plt.text(x=<span class="number">-3.7</span>,</span><br><span class="line">        y=<span class="number">3</span>, </span><br><span class="line">        s=<span class="string">r'$This\ is\ the\ some\ text. \mu\ \sigma_i\ \alpha_t$'</span>,</span><br><span class="line">        fontdict=&#123;</span><br><span class="line">            <span class="string">'size'</span>: <span class="number">16</span>, </span><br><span class="line">            <span class="string">'color'</span>: <span class="string">'r'</span></span><br><span class="line">            &#125;</span><br><span class="line">        )</span><br></pre></td></tr></table></figure>

<p>通过上面的注释和注解，我们再补充一条线段，一个点</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 画虚线</span></span><br><span class="line">plt.plot([x0, x0, ], [<span class="number">0</span>, y0, ], <span class="string">'k--'</span>, linewidth=<span class="number">2.5</span>)</span><br><span class="line"><span class="comment"># 画点</span></span><br><span class="line">plt.scatter([x0, ], [y0, ], s=<span class="number">50</span>, color=<span class="string">'b'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<p><img src="/img/2018-09-05-marchine-learning-base-matplotlib-01-05.png" alt></p>
]]></content>
      
        <categories>
            
            <category> 机器学习新手入门 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Machine Learning </tag>
            
            <tag> python </tag>
            
            <tag> matplotlib </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[机器学习基础4--python科学计算pandas(下)]]></title>
      <url>http://wangyeming.github.com/2018/09/05/marchine-learning-base-pandas-02/</url>
      <content type="html"><![CDATA[<p>利用python进行科学计算，numpy和pandas这两个库是必不可少的。</p>
<p>上一篇介绍了pandas库的Series和DataFrame，以及DataFrame的基本方法，这篇的数据导入导出，数据合并等，</p>
<a id="more"></a>

<h1 id="读写文件"><a href="#读写文件" class="headerlink" title="读写文件"></a>读写文件</h1><p>pandas可以读取与存取的资料格式有很多种，像csv、excel、json、html与pickle等</p>
<p>这里是官方文档：<a href="http://pandas.pydata.org/pandas-docs/stable/io.html" target="_blank" rel="noopener">pandas IO Tools</a></p>
<p><img src="/img/2018-09-05-marchine-learning-base-pandas-02-01.png" alt></p>
<h1 id="合并concat"><a href="#合并concat" class="headerlink" title="合并concat"></a>合并concat</h1><p>使用pandas的DataFrame时，常常需要进行合并操作。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">df1 = pd.DataFrame(np.ones((<span class="number">3</span>,<span class="number">4</span>))*<span class="number">0</span>, columns=[<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>])</span><br><span class="line">df2 = pd.DataFrame(np.ones((<span class="number">3</span>,<span class="number">4</span>))*<span class="number">1</span>, columns=[<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>])</span><br><span class="line">df3 = pd.DataFrame(np.ones((<span class="number">3</span>,<span class="number">4</span>))*<span class="number">2</span>, columns=[<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>])</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># axis=0进行横向合并，axis=1进行纵向合并</span></span><br><span class="line">res = pd.concat([df1, df2, df3], axis=<span class="number">0</span>)</span><br><span class="line"><span class="comment">#     a    b    c    d</span></span><br><span class="line"><span class="comment"># 0  0.0  0.0  0.0  0.0</span></span><br><span class="line"><span class="comment"># 1  0.0  0.0  0.0  0.0</span></span><br><span class="line"><span class="comment"># 2  0.0  0.0  0.0  0.0</span></span><br><span class="line"><span class="comment"># 0  1.0  1.0  1.0  1.0</span></span><br><span class="line"><span class="comment"># 1  1.0  1.0  1.0  1.0</span></span><br><span class="line"><span class="comment"># 2  1.0  1.0  1.0  1.0</span></span><br><span class="line"><span class="comment"># 0  2.0  2.0  2.0  2.0</span></span><br><span class="line"><span class="comment"># 1  2.0  2.0  2.0  2.0</span></span><br><span class="line"><span class="comment"># 2  2.0  2.0  2.0  2.0</span></span><br></pre></td></tr></table></figure>

<p>可以发现，index此时还是按照每个df之前的值，如果想重置index，设置ignore_index=True即可</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># axis=0进行横向合并，axis=1进行纵向合并</span></span><br><span class="line">res = pd.concat([df1, df2, df3], axis=<span class="number">0</span>, ignore_index=<span class="keyword">True</span>)</span><br><span class="line"><span class="comment">#     a    b    c    d</span></span><br><span class="line"><span class="comment"># 0  0.0  0.0  0.0  0.0</span></span><br><span class="line"><span class="comment"># 1  0.0  0.0  0.0  0.0</span></span><br><span class="line"><span class="comment"># 2  0.0  0.0  0.0  0.0</span></span><br><span class="line"><span class="comment"># 3  1.0  1.0  1.0  1.0</span></span><br><span class="line"><span class="comment"># 4  1.0  1.0  1.0  1.0</span></span><br><span class="line"><span class="comment"># 5  1.0  1.0  1.0  1.0</span></span><br><span class="line"><span class="comment"># 6  2.0  2.0  2.0  2.0</span></span><br><span class="line"><span class="comment"># 7  2.0  2.0  2.0  2.0</span></span><br><span class="line"><span class="comment"># 8  2.0  2.0  2.0  2.0</span></span><br></pre></td></tr></table></figure>

<p>index恢复正常。</p>
<p>前面我们合并的数据集的列名完全相同，所以合并后的列数不变。如果合并的数据集的列并不完全相同呢？</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#定义资料集</span></span><br><span class="line">df1 = pd.DataFrame(np.ones((<span class="number">3</span>,<span class="number">4</span>))*<span class="number">0</span>, columns=[<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>], index=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line">df2 = pd.DataFrame(np.ones((<span class="number">3</span>,<span class="number">4</span>))*<span class="number">1</span>, columns=[<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>,<span class="string">'e'</span>], index=[<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">#纵向"外"合并df1与df2,join的默认参数就是outer,outer的规则是</span></span><br><span class="line"><span class="comment">#依照column来做纵向合并，有相同的column上下合并在一起，其他独自的column个自成列，原本没有值的位置皆以NaN填充。</span></span><br><span class="line">res = pd.concat([df1, df2], axis=<span class="number">0</span>, join=<span class="string">'outer'</span>)</span><br><span class="line"></span><br><span class="line">print(res)</span><br><span class="line"><span class="comment">#     a    b    c    d    e</span></span><br><span class="line"><span class="comment"># 1  0.0  0.0  0.0  0.0  NaN</span></span><br><span class="line"><span class="comment"># 2  0.0  0.0  0.0  0.0  NaN</span></span><br><span class="line"><span class="comment"># 3  0.0  0.0  0.0  0.0  NaN</span></span><br><span class="line"><span class="comment"># 2  NaN  1.0  1.0  1.0  1.0</span></span><br><span class="line"><span class="comment"># 3  NaN  1.0  1.0  1.0  1.0</span></span><br><span class="line"><span class="comment"># 4  NaN  1.0  1.0  1.0  1.0</span></span><br></pre></td></tr></table></figure>

<p>如果join的值设置为inner，那么只有相同的column合并在一起，其他的会被抛弃。</p>
<h1 id="append添加数据"><a href="#append添加数据" class="headerlink" title="append添加数据"></a>append添加数据</h1><p>append方法可以将一个数据集添加到另一个数据集的下方，也就是纵向合并</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df1.append(df2, ignore_index=<span class="keyword">True</span>)</span><br></pre></td></tr></table></figure>

<h1 id="多key合并merge"><a href="#多key合并merge" class="headerlink" title="多key合并merge"></a>多key合并merge</h1><p>merge方法与concat方法类似，但merge可以用于有两列作为key的数据。先看只有一组key列的情况</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#定义资料集并打印出</span></span><br><span class="line">left = pd.DataFrame(&#123;<span class="string">'key'</span>: [<span class="string">'K0'</span>, <span class="string">'K1'</span>, <span class="string">'K2'</span>, <span class="string">'K3'</span>],</span><br><span class="line">                             <span class="string">'A'</span>: [<span class="string">'A0'</span>, <span class="string">'A1'</span>, <span class="string">'A2'</span>, <span class="string">'A3'</span>],</span><br><span class="line">                             <span class="string">'B'</span>: [<span class="string">'B0'</span>, <span class="string">'B1'</span>, <span class="string">'B2'</span>, <span class="string">'B3'</span>]&#125;)</span><br><span class="line">right = pd.DataFrame(&#123;<span class="string">'key'</span>: [<span class="string">'K0'</span>, <span class="string">'K1'</span>, <span class="string">'K2'</span>, <span class="string">'K3'</span>],</span><br><span class="line">                              <span class="string">'C'</span>: [<span class="string">'C0'</span>, <span class="string">'C1'</span>, <span class="string">'C2'</span>, <span class="string">'C3'</span>],</span><br><span class="line">                              <span class="string">'D'</span>: [<span class="string">'D0'</span>, <span class="string">'D1'</span>, <span class="string">'D2'</span>, <span class="string">'D3'</span>]&#125;)</span><br><span class="line"></span><br><span class="line">print(left)</span><br><span class="line"><span class="comment">#    A   B key</span></span><br><span class="line"><span class="comment"># 0  A0  B0  K0</span></span><br><span class="line"><span class="comment"># 1  A1  B1  K1</span></span><br><span class="line"><span class="comment"># 2  A2  B2  K2</span></span><br><span class="line"><span class="comment"># 3  A3  B3  K3</span></span><br><span class="line"></span><br><span class="line">print(right)</span><br><span class="line"><span class="comment">#    C   D key</span></span><br><span class="line"><span class="comment"># 0  C0  D0  K0</span></span><br><span class="line"><span class="comment"># 1  C1  D1  K1</span></span><br><span class="line"><span class="comment"># 2  C2  D2  K2</span></span><br><span class="line"><span class="comment"># 3  C3  D3  K3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#依据key column合并，并打印出</span></span><br><span class="line">res = pd.merge(left, right, on=<span class="string">'key'</span>)</span><br><span class="line"></span><br><span class="line">print(res)</span><br><span class="line">     A   B key   C   D</span><br><span class="line"><span class="comment"># 0  A0  B0  K0  C0  D0</span></span><br><span class="line"><span class="comment"># 1  A1  B1  K1  C1  D1</span></span><br><span class="line"><span class="comment"># 2  A2  B2  K2  C2  D2</span></span><br><span class="line"><span class="comment"># 3  A3  B3  K3  C3  D3</span></span><br></pre></td></tr></table></figure>

<p>接下来我们定义有两列作为key的合并</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#定义资料集并打印出</span></span><br><span class="line">left = pd.DataFrame(&#123;<span class="string">'key1'</span>: [<span class="string">'K0'</span>, <span class="string">'K0'</span>, <span class="string">'K1'</span>, <span class="string">'K2'</span>],</span><br><span class="line">                      <span class="string">'key2'</span>: [<span class="string">'K0'</span>, <span class="string">'K1'</span>, <span class="string">'K0'</span>, <span class="string">'K1'</span>],</span><br><span class="line">                      <span class="string">'A'</span>: [<span class="string">'A0'</span>, <span class="string">'A1'</span>, <span class="string">'A2'</span>, <span class="string">'A3'</span>],</span><br><span class="line">                      <span class="string">'B'</span>: [<span class="string">'B0'</span>, <span class="string">'B1'</span>, <span class="string">'B2'</span>, <span class="string">'B3'</span>]&#125;)</span><br><span class="line">right = pd.DataFrame(&#123;<span class="string">'key1'</span>: [<span class="string">'K0'</span>, <span class="string">'K1'</span>, <span class="string">'K1'</span>, <span class="string">'K2'</span>],</span><br><span class="line">                       <span class="string">'key2'</span>: [<span class="string">'K0'</span>, <span class="string">'K0'</span>, <span class="string">'K0'</span>, <span class="string">'K0'</span>],</span><br><span class="line">                       <span class="string">'C'</span>: [<span class="string">'C0'</span>, <span class="string">'C1'</span>, <span class="string">'C2'</span>, <span class="string">'C3'</span>],</span><br><span class="line">                       <span class="string">'D'</span>: [<span class="string">'D0'</span>, <span class="string">'D1'</span>, <span class="string">'D2'</span>, <span class="string">'D3'</span>]&#125;)</span><br><span class="line"></span><br><span class="line">print(left)</span><br><span class="line"><span class="comment">#    A   B key1 key2</span></span><br><span class="line"><span class="comment"># 0  A0  B0   K0   K0</span></span><br><span class="line"><span class="comment"># 1  A1  B1   K0   K1</span></span><br><span class="line"><span class="comment"># 2  A2  B2   K1   K0</span></span><br><span class="line"><span class="comment"># 3  A3  B3   K2   K1</span></span><br><span class="line"></span><br><span class="line">print(right)</span><br><span class="line"><span class="comment">#    C   D key1 key2</span></span><br><span class="line"><span class="comment"># 0  C0  D0   K0   K0</span></span><br><span class="line"><span class="comment"># 1  C1  D1   K1   K0</span></span><br><span class="line"><span class="comment"># 2  C2  D2   K1   K0</span></span><br><span class="line"><span class="comment"># 3  C3  D3   K2   K0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#依据key1与key2 columns进行合并，并打印出四种结果['left', 'right', 'outer', 'inner']</span></span><br><span class="line">res = pd.merge(left, right, on=[<span class="string">'key1'</span>, <span class="string">'key2'</span>], how=<span class="string">'inner'</span>)</span><br><span class="line">print(res)</span><br><span class="line"><span class="comment">#    A   B key1 key2   C   D</span></span><br><span class="line"><span class="comment"># 0  A0  B0   K0   K0  C0  D0</span></span><br><span class="line"><span class="comment"># 1  A2  B2   K1   K0  C1  D1</span></span><br><span class="line"><span class="comment"># 2  A2  B2   K1   K0  C2  D2</span></span><br><span class="line"></span><br><span class="line">res = pd.merge(left, right, on=[<span class="string">'key1'</span>, <span class="string">'key2'</span>], how=<span class="string">'outer'</span>)</span><br><span class="line">print(res)</span><br><span class="line"><span class="comment">#     A    B key1 key2    C    D</span></span><br><span class="line"><span class="comment"># 0   A0   B0   K0   K0   C0   D0</span></span><br><span class="line"><span class="comment"># 1   A1   B1   K0   K1  NaN  NaN</span></span><br><span class="line"><span class="comment"># 2   A2   B2   K1   K0   C1   D1</span></span><br><span class="line"><span class="comment"># 3   A2   B2   K1   K0   C2   D2</span></span><br><span class="line"><span class="comment"># 4   A3   B3   K2   K1  NaN  NaN</span></span><br><span class="line"><span class="comment"># 5  NaN  NaN   K2   K0   C3   D3</span></span><br><span class="line"></span><br><span class="line">res = pd.merge(left, right, on=[<span class="string">'key1'</span>, <span class="string">'key2'</span>], how=<span class="string">'left'</span>)</span><br><span class="line">print(res)</span><br><span class="line"><span class="comment">#    A   B key1 key2    C    D</span></span><br><span class="line"><span class="comment"># 0  A0  B0   K0   K0   C0   D0</span></span><br><span class="line"><span class="comment"># 1  A1  B1   K0   K1  NaN  NaN</span></span><br><span class="line"><span class="comment"># 2  A2  B2   K1   K0   C1   D1</span></span><br><span class="line"><span class="comment"># 3  A2  B2   K1   K0   C2   D2</span></span><br><span class="line"><span class="comment"># 4  A3  B3   K2   K1  NaN  NaN</span></span><br><span class="line"></span><br><span class="line">res = pd.merge(left, right, on=[<span class="string">'key1'</span>, <span class="string">'key2'</span>], how=<span class="string">'right'</span>)</span><br><span class="line">print(res)</span><br><span class="line"><span class="comment">#     A    B key1 key2   C   D</span></span><br><span class="line"><span class="comment"># 0   A0   B0   K0   K0  C0  D0</span></span><br><span class="line"><span class="comment"># 1   A2   B2   K1   K0  C1  D1</span></span><br><span class="line"><span class="comment"># 2   A2   B2   K1   K0  C2  D2</span></span><br><span class="line"><span class="comment"># 3  NaN  NaN   K2   K0  C3  D3</span></span><br></pre></td></tr></table></figure>

<p>indicator=True会将合并的记录放在新的一列</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#定义资料集并打印出</span></span><br><span class="line">df1 = pd.DataFrame(&#123;<span class="string">'col1'</span>:[<span class="number">0</span>,<span class="number">1</span>], <span class="string">'col_left'</span>:[<span class="string">'a'</span>,<span class="string">'b'</span>]&#125;)</span><br><span class="line">df2 = pd.DataFrame(&#123;<span class="string">'col1'</span>:[<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>],<span class="string">'col_right'</span>:[<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>]&#125;)</span><br><span class="line"></span><br><span class="line">print(df1)</span><br><span class="line"><span class="comment">#   col1 col_left</span></span><br><span class="line"><span class="comment"># 0     0        a</span></span><br><span class="line"><span class="comment"># 1     1        b</span></span><br><span class="line"></span><br><span class="line">print(df2)</span><br><span class="line"><span class="comment">#   col1  col_right</span></span><br><span class="line"><span class="comment"># 0     1          2</span></span><br><span class="line"><span class="comment"># 1     2          2</span></span><br><span class="line"><span class="comment"># 2     2          2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 依据col1进行合并，并启用indicator=True，最后打印出</span></span><br><span class="line">res = pd.merge(df1, df2, on=<span class="string">'col1'</span>, how=<span class="string">'outer'</span>, indicator=<span class="keyword">True</span>)</span><br><span class="line">print(res)</span><br><span class="line"><span class="comment">#   col1 col_left  col_right      _merge</span></span><br><span class="line"><span class="comment"># 0   0.0        a        NaN   left_only</span></span><br><span class="line"><span class="comment"># 1   1.0        b        2.0        both</span></span><br><span class="line"><span class="comment"># 2   2.0      NaN        2.0  right_only</span></span><br><span class="line"><span class="comment"># 3   2.0      NaN        2.0  right_only</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 自定indicator column的名称，并打印出</span></span><br><span class="line">res = pd.merge(df1, df2, on=<span class="string">'col1'</span>, how=<span class="string">'outer'</span>, indicator=<span class="string">'indicator_column'</span>)</span><br><span class="line">print(res)</span><br><span class="line"><span class="comment">#   col1 col_left  col_right indicator_column</span></span><br><span class="line"><span class="comment"># 0   0.0        a        NaN        left_only</span></span><br><span class="line"><span class="comment"># 1   1.0        b        2.0             both</span></span><br><span class="line"><span class="comment"># 2   2.0      NaN        2.0       right_only</span></span><br><span class="line"><span class="comment"># 3   2.0      NaN        2.0       right_only</span></span><br></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 机器学习新手入门 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Machine Learning </tag>
            
            <tag> python </tag>
            
            <tag> pandas </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[机器学习基础3--python科学计算pandas(上)]]></title>
      <url>http://wangyeming.github.com/2018/09/04/marchine-learning-base-pandas-01/</url>
      <content type="html"><![CDATA[<p>利用python进行科学计算，numpy和pandas这两个库是必不可少的。</p>
<p>上一篇介绍了numpy，本篇介绍pandas</p>
<a id="more"></a>

<p>如果用 python 的列表和字典来作比较, 那么可以说 Numpy 是列表形式的，没有数值标签，而 Pandas 就是字典形式。Pandas是基于Numpy构建的，让Numpy为中心的应用变得更加简单。</p>
<p>要使用pandas，首先需要了解他主要两个数据结构：Series和DataFrame。</p>
<h1 id="pandas-导入"><a href="#pandas-导入" class="headerlink" title="pandas 导入"></a>pandas 导入</h1><p>省略下载和安装，代码中导入pandas</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> nupandaspy <span class="keyword">as</span> pd</span><br></pre></td></tr></table></figure>

<h1 id="Series"><a href="#Series" class="headerlink" title="Series"></a>Series</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">s = pd.Series([<span class="number">1</span>,<span class="number">3</span>,<span class="number">6</span>,np.nan,<span class="number">44</span>,<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">print(s)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">0     1.0</span></span><br><span class="line"><span class="string">1     3.0</span></span><br><span class="line"><span class="string">2     6.0</span></span><br><span class="line"><span class="string">3     NaN</span></span><br><span class="line"><span class="string">4    44.0</span></span><br><span class="line"><span class="string">5     1.0</span></span><br><span class="line"><span class="string">dtype: float64</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>

<p>打印的内容，左边是索引，右边的值。由于我们没有为数据指定索引。于是会自动创建一个0到N-1（N为长度）的整数型索引.</p>
<h1 id="DataFrame"><a href="#DataFrame" class="headerlink" title="DataFrame"></a>DataFrame</h1><p>DataFrame是一个表格型的数据结构.它包含有一组有序的列，每列可以是不同的值类型（数值，字符串，布尔值等）。DataFrame既有行索引也有列索引， 它可以被看做由Series组成的大字典。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这里我们用map字典结构去初始化一个DataFrame</span></span><br><span class="line">df2 = pd.DataFrame(&#123;<span class="string">'A'</span>: <span class="number">1.</span>,</span><br><span class="line">                    <span class="string">'B'</span>: pd.Timestamp(<span class="string">'20130102'</span>),</span><br><span class="line">                    <span class="string">'C'</span>: pd.Series(<span class="number">1</span>, index=list(range(<span class="number">4</span>)), dtype=<span class="string">'float32'</span>),</span><br><span class="line">                    <span class="string">'D'</span>: np.array([<span class="number">3</span>] * <span class="number">4</span>, dtype=<span class="string">'int32'</span>),</span><br><span class="line">                    <span class="string">'E'</span>: pd.Categorical([<span class="string">"test"</span>, <span class="string">"train"</span>, <span class="string">"test"</span>, <span class="string">"train"</span>]),</span><br><span class="line">                    <span class="string">'F'</span>: <span class="string">'foo'</span>&#125;)</span><br></pre></td></tr></table></figure>

<p>让我们分别看一下输出</p>
<h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><h3 id="打印DataFrame"><a href="#打印DataFrame" class="headerlink" title="打印DataFrame"></a>打印DataFrame</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(df2)</span><br></pre></td></tr></table></figure>

<pre><code>     A          B    C  D      E    F
0  1.0 2013-01-02  1.0  3   test  foo
1  1.0 2013-01-02  1.0  3  train  foo
2  1.0 2013-01-02  1.0  3   test  foo
3  1.0 2013-01-02  1.0  3  train  foo</code></pre><h3 id="查询每一列的type"><a href="#查询每一列的type" class="headerlink" title="查询每一列的type"></a>查询每一列的type</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(df2.dtypes)</span><br></pre></td></tr></table></figure>

<pre><code>A           float64
B    datetime64[ns]
C           float32
D             int32
E          category
F            object
dtype: object</code></pre><h3 id="查看行号"><a href="#查看行号" class="headerlink" title="查看行号"></a>查看行号</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(df2.index)</span><br></pre></td></tr></table></figure>

<pre><code>Int64Index([0, 1, 2, 3], dtype=&apos;int64&apos;)</code></pre><h3 id="查看列的名称"><a href="#查看列的名称" class="headerlink" title="查看列的名称"></a>查看列的名称</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(df2.index)</span><br></pre></td></tr></table></figure>

<pre><code>Index([&apos;A&apos;, &apos;B&apos;, &apos;C&apos;, &apos;D&apos;, &apos;E&apos;, &apos;F&apos;], dtype=&apos;object&apos;)</code></pre><h3 id="只查看值"><a href="#只查看值" class="headerlink" title="只查看值"></a>只查看值</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(df2.values)</span><br></pre></td></tr></table></figure>

<pre><code>[[1.0 Timestamp(&apos;2013-01-02 00:00:00&apos;) 1.0 3 &apos;test&apos; &apos;foo&apos;]
[1.0 Timestamp(&apos;2013-01-02 00:00:00&apos;) 1.0 3 &apos;train&apos; &apos;foo&apos;]
[1.0 Timestamp(&apos;2013-01-02 00:00:00&apos;) 1.0 3 &apos;test&apos; &apos;foo&apos;]
[1.0 Timestamp(&apos;2013-01-02 00:00:00&apos;) 1.0 3 &apos;train&apos; &apos;foo&apos;]]</code></pre><h3 id="查看描述"><a href="#查看描述" class="headerlink" title="查看描述"></a>查看描述</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(df2.describe())</span><br></pre></td></tr></table></figure>

<pre><code>         A    C    D
count  4.0  4.0  4.0
mean   1.0  1.0  3.0
std    0.0  0.0  0.0
min    1.0  1.0  3.0
25%    1.0  1.0  3.0
50%    1.0  1.0  3.0
75%    1.0  1.0  3.0
max    1.0  1.0  3.0</code></pre><h3 id="转置"><a href="#转置" class="headerlink" title="转置"></a>转置</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(df2.T)</span><br></pre></td></tr></table></figure>

<p>这里输出就省略了</p>
<h3 id="索引排序"><a href="#索引排序" class="headerlink" title="索引排序"></a>索引排序</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#axis=0按照列名排序，axis=1按照行名排序 按照降序排序</span></span><br><span class="line">print(df2.sort_index(axis=<span class="number">1</span>, ascending=<span class="keyword">False</span>))</span><br></pre></td></tr></table></figure>

<pre><code>     F      E  D    C          B    A
0  foo   test  3  1.0 2013-01-02  1.0
1  foo  train  3  1.0 2013-01-02  1.0
2  foo   test  3  1.0 2013-01-02  1.0
3  foo  train  3  1.0 2013-01-02  1.0</code></pre><h3 id="值排序"><a href="#值排序" class="headerlink" title="值排序"></a>值排序</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 指定按照某个列名排序</span></span><br><span class="line">print(df2.sort_values(by=<span class="string">'B'</span>))</span><br></pre></td></tr></table></figure>

<h2 id="筛选"><a href="#筛选" class="headerlink" title="筛选"></a>筛选</h2><p>首先我们新建一个DataFrame数据</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dates = pd.date_range(<span class="string">'20130101'</span>, periods=<span class="number">6</span>)</span><br><span class="line">df = pd.DataFrame(np.arange(<span class="number">24</span>).reshape((<span class="number">6</span>,<span class="number">4</span>)),index=dates, columns=[<span class="string">'A'</span>,<span class="string">'B'</span>,<span class="string">'C'</span>,<span class="string">'D'</span>])</span><br></pre></td></tr></table></figure>

<p>“””<br>             A   B   C   D<br>2013-01-01   0   1   2   3<br>2013-01-02   4   5   6   7<br>2013-01-03   8   9  10  11<br>2013-01-04  12  13  14  15<br>2013-01-05  16  17  18  19<br>2013-01-06  20  21  22  23<br>“””</p>
<h3 id="指定筛选具体的列名"><a href="#指定筛选具体的列名" class="headerlink" title="指定筛选具体的列名"></a>指定筛选具体的列名</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">print(df[<span class="string">'A'</span>])  <span class="comment"># 类似map中通过key取值</span></span><br><span class="line">print(df.A)     <span class="comment"># 类似A是df的一个属性</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#输出都是一样的，会输出行名为『A』的列及行名</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">2013-01-01     0</span></span><br><span class="line"><span class="string">2013-01-02     4</span></span><br><span class="line"><span class="string">2013-01-03     8</span></span><br><span class="line"><span class="string">2013-01-04    12</span></span><br><span class="line"><span class="string">2013-01-05    16</span></span><br><span class="line"><span class="string">2013-01-06    20</span></span><br><span class="line"><span class="string">Freq: D, Name: A, dtype: int64</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>

<h3 id="筛选多行or多列"><a href="#筛选多行or多列" class="headerlink" title="筛选多行or多列"></a>筛选多行or多列</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">print(df[<span class="number">0</span>:<span class="number">3</span>])</span><br><span class="line"><span class="comment">#输出0，1，2三行，这里的[0:3]不包括第3行,例如df[1:1]返回的就是一个空对象</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">            A  B   C   D</span></span><br><span class="line"><span class="string">2013-01-01  0  1   2   3</span></span><br><span class="line"><span class="string">2013-01-02  4  5   6   7</span></span><br><span class="line"><span class="string">2013-01-03  8  9  10  11</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这样写相当于一个闭区间</span></span><br><span class="line">print(df[<span class="string">'20130102'</span>:<span class="string">'20130104'</span>])</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">             A   B   C   D</span></span><br><span class="line"><span class="string">2013-01-02   4   5   6   7</span></span><br><span class="line"><span class="string">2013-01-03   8   9  10  11</span></span><br><span class="line"><span class="string">2013-01-04  12  13  14  15</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>

<h3 id="通过判断"><a href="#通过判断" class="headerlink" title="通过判断"></a>通过判断</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">print(df[df.A&gt;<span class="number">8</span>])</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">             A   B   C   D</span></span><br><span class="line"><span class="string">2013-01-04  12  13  14  15</span></span><br><span class="line"><span class="string">2013-01-05  16  17  18  19</span></span><br><span class="line"><span class="string">2013-01-06  20  21  22  23</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>

<h3 id="根据标签-loc"><a href="#根据标签-loc" class="headerlink" title="根据标签 loc"></a>根据标签 loc</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 根据行标签（loc第一个参数，只能用于行标签）</span></span><br><span class="line">print(df.loc[<span class="string">'20130102'</span>])</span><br><span class="line"><span class="comment"># print(df['20130102'])  这样是不可以的，会报错</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">A    4</span></span><br><span class="line"><span class="string">B    5</span></span><br><span class="line"><span class="string">C    6</span></span><br><span class="line"><span class="string">D    7</span></span><br><span class="line"><span class="string">Name: 2013-01-02 00:00:00, dtype: int64</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="comment">#第二个参数筛选列名称</span></span><br><span class="line">print(df.loc[:,[<span class="string">'A'</span>,<span class="string">'B'</span>]]) </span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">             A   B</span></span><br><span class="line"><span class="string">2013-01-01   0   1</span></span><br><span class="line"><span class="string">2013-01-02   4   5</span></span><br><span class="line"><span class="string">2013-01-03   8   9</span></span><br><span class="line"><span class="string">2013-01-04  12  13</span></span><br><span class="line"><span class="string">2013-01-05  16  17</span></span><br><span class="line"><span class="string">2013-01-06  20  21</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>

<h3 id="根据序列-iloc"><a href="#根据序列-iloc" class="headerlink" title="根据序列 iloc"></a>根据序列 iloc</h3><p>iloc第一个参数过滤行，第二个参数过滤列</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">print(df.iloc[[<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>],<span class="number">1</span>:<span class="number">3</span>])</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">             B   C</span></span><br><span class="line"><span class="string">2013-01-02   5   6</span></span><br><span class="line"><span class="string">2013-01-04  13  14</span></span><br><span class="line"><span class="string">2013-01-06  21  22</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>

<h3 id="根据混合的这两种-ix"><a href="#根据混合的这两种-ix" class="headerlink" title="根据混合的这两种 ix"></a>根据混合的这两种 ix</h3><p>前面我们知道，loc可以根据名称过滤，iloc可以根据index位置过滤，那结合这两种过滤方式可以用ix</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">print(df.ix[:<span class="number">3</span>,[<span class="string">'A'</span>,<span class="string">'C'</span>]])</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">            A   C</span></span><br><span class="line"><span class="string">2013-01-01  0   2</span></span><br><span class="line"><span class="string">2013-01-02  4   6</span></span><br><span class="line"><span class="string">2013-01-03  8  10</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>

<h2 id="设置值"><a href="#设置值" class="headerlink" title="设置值"></a>设置值</h2><p>设置值比较简单</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">df.iloc[<span class="number">2</span>,<span class="number">2</span>] = <span class="number">1111</span></span><br><span class="line">df.loc[<span class="string">'20130101'</span>,<span class="string">'B'</span>] = <span class="number">2222</span></span><br><span class="line">df.B[df.A&gt;<span class="number">4</span>] = <span class="number">0</span></span><br><span class="line">df[<span class="string">'F'</span>] = np.nan</span><br><span class="line"><span class="comment"># 插入一行</span></span><br><span class="line">df[<span class="string">'E'</span>] = pd.Series([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>], index=pd.date_range(<span class="string">'20130101'</span>,periods=<span class="number">6</span>))</span><br></pre></td></tr></table></figure>

<h2 id="处理丢失数据"><a href="#处理丢失数据" class="headerlink" title="处理丢失数据"></a>处理丢失数据</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">df.dropna(</span><br><span class="line">    axis=<span class="number">0</span>,     <span class="comment"># 0: 对行进行操作; 1: 对列进行操作</span></span><br><span class="line">    how=<span class="string">'any'</span>   <span class="comment"># 'any': 只要存在 NaN 就 drop 掉; 'all': 必须全部是 NaN 才 drop </span></span><br><span class="line">    )</span><br></pre></td></tr></table></figure>

<p>fillna是将 NaN 的值用其他值代替, 比如代替成 0:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.fillna(value=<span class="number">0</span>)</span><br></pre></td></tr></table></figure>

<p>可以通过pd.isnull()判断是否有缺失数据 NaN, 为 True 表示缺失数据</p>
<p>下篇将总结下pandas的数据导入导出，数据合并等。</p>
]]></content>
      
        <categories>
            
            <category> 机器学习新手入门 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Machine Learning </tag>
            
            <tag> python </tag>
            
            <tag> pandas </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[机器学习基础2--python科学计算之numpy]]></title>
      <url>http://wangyeming.github.com/2018/09/04/machine-learning-base-numpy/</url>
      <content type="html"><![CDATA[<p>利用python进行科学计算，numpy和pandas这两个库是必不可少的。</p>
<ul>
<li>运算速度快：numpy 和 pandas 都是采用 C 语言编写, pandas 又是基于 numpy, 是 numpy 的升级版本。</li>
<li>消耗资源少：采用的是矩阵运算，会比 python 自带的字典或者列表快好多</li>
</ul>
<p>先简单总结下numpy。</p>
<a id="more"></a>

<h2 id="numpy-导入"><a href="#numpy-导入" class="headerlink" title="numpy 导入"></a>numpy 导入</h2><p>省略下载和安装，代码中导入numpy</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br></pre></td></tr></table></figure>

<h2 id="numpy-array-创建"><a href="#numpy-array-创建" class="headerlink" title="numpy array 创建"></a>numpy array 创建</h2><p>numpy最常见的数据结构式array，创建一个numpy array也很简单</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">array = np.array([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]])  <span class="comment"># python matrix</span></span><br><span class="line">a = np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], dtype=np.int)</span><br><span class="line">a = np.zeros((<span class="number">3</span>, <span class="number">4</span>))  <span class="comment"># 数据全为0，3行4列</span></span><br><span class="line">a = np.ones((<span class="number">3</span>, <span class="number">4</span>), dtype=np.int)  <span class="comment"># 数据为1，3行4列</span></span><br><span class="line">a = np.empty((<span class="number">3</span>, <span class="number">4</span>))  <span class="comment"># 数创建全空数组, 其实每个值都是接近于零的数</span></span><br><span class="line">a = np.arange(<span class="number">10</span>, <span class="number">20</span>, <span class="number">2</span>)  <span class="comment"># 10-19 的数据，2步长</span></span><br><span class="line">a = np.arange(<span class="number">12</span>).reshape((<span class="number">3</span>,<span class="number">4</span>))    <span class="comment"># 3行4列，0到11</span></span><br><span class="line">a = np.linspace(<span class="number">1</span>,<span class="number">10</span>,<span class="number">20</span>)    <span class="comment"># 开始端1，结束端10，且分割成20个数据，生成线段</span></span><br></pre></td></tr></table></figure>

<h2 id="numpy-array的基本操作"><a href="#numpy-array的基本操作" class="headerlink" title="numpy array的基本操作"></a>numpy array的基本操作</h2><p>numpy的array有很多灵活的运算方法，包括单个array的四则运算，条件运算，变形, 转置, 对array任意一行一列进行求和,求最大最小值，求各类统计值等等操作。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">a = np.array([<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>])  <span class="comment"># array([10, 20, 30, 40])</span></span><br><span class="line">b = np.arange(<span class="number">4</span>)  <span class="comment"># array([0, 1, 2, 3])</span></span><br><span class="line">print(b ** <span class="number">2</span>)   <span class="comment"># 单个array每个元素乘方</span></span><br><span class="line">print(<span class="number">10</span> * np.sin(a))</span><br><span class="line">print(b &lt; <span class="number">3</span>)    <span class="comment"># 条件运算 [ True  True  True False]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 矩阵变形</span></span><br><span class="line">a = a.reshape(<span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line">b = b.reshape(<span class="number">2</span>, <span class="number">2</span>, )</span><br><span class="line"></span><br><span class="line">a = np.random.random((<span class="number">2</span>, <span class="number">4</span>, <span class="number">2</span>)) <span class="comment">#生成随机矩阵</span></span><br><span class="line"></span><br><span class="line">print(np.sum(a))</span><br><span class="line">print(np.min(a))</span><br><span class="line">print(np.max(a))</span><br><span class="line">print(np.sort(a))</span><br><span class="line"></span><br><span class="line">print(np.transpose(a))</span><br><span class="line">print(a.T)      <span class="comment"># 矩阵转置</span></span><br><span class="line"></span><br><span class="line">a = np.array([[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>]])  <span class="comment"># array([10, 20, 30, 40])</span></span><br><span class="line">print(<span class="string">"sum ="</span>, np.sum(a, axis=<span class="number">0</span>))  <span class="comment"># 以列为单位,求和</span></span><br><span class="line">print(<span class="string">"sum ="</span>, np.sum(a, axis=<span class="number">1</span>))  <span class="comment"># 以行为单位，求和</span></span><br></pre></td></tr></table></figure>

<h3 id="两个array的加减乘"><a href="#两个array的加减乘" class="headerlink" title="两个array的加减乘"></a>两个array的加减乘</h3><p>当然也支持两个array相加，相减，相乘</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a = np.array([<span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>])</span><br><span class="line">b = np.array([<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>])</span><br><span class="line">print(a + b)            <span class="comment"># [5 4 3 2]</span></span><br><span class="line">print(a - b)            <span class="comment"># [[3 2 1 0]        </span></span><br><span class="line">print(a * b)            <span class="comment"># 矩阵相乘[4 3 2 1]</span></span><br><span class="line">print(np.dot(a, b))     <span class="comment"># 矩阵相乘求和 10</span></span><br><span class="line">print(np.multiply(a, b))<span class="comment"># 矩阵相乘 [16 12  8  4]</span></span><br></pre></td></tr></table></figure>

<p>也可以支持两个或者多个矩阵的合并和分割操作：</p>
<h3 id="array的合并"><a href="#array的合并" class="headerlink" title="array的合并"></a>array的合并</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">a = np.array([<span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>])</span><br><span class="line">b = np.array([<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>])</span><br><span class="line"><span class="comment"># [[4 3 2 1]</span></span><br><span class="line"><span class="comment">#  [1 1 1 1]]</span></span><br><span class="line">print(np.vstack((A,B))) <span class="comment"># 垂直合并</span></span><br><span class="line"><span class="comment"># [4 3 2 1 1 1 1 1]</span></span><br><span class="line">print(np.hstack((a, b))) <span class="comment"># 水平合并</span></span><br><span class="line"><span class="comment"># [4 3 2 1 1 1 1 1 4 3 2 1]</span></span><br><span class="line">print(np.concatenate((a, b, a, axis=<span class="number">0</span>)) <span class="comment"># 多矩阵垂直合并</span></span><br><span class="line"></span><br><span class="line">a = np.array([<span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>])[:, np.newaxis]</span><br><span class="line"><span class="comment">#[[4]</span></span><br><span class="line"><span class="comment"># [3]</span></span><br><span class="line"><span class="comment"># [2]</span></span><br><span class="line"><span class="comment"># [1]]</span></span><br><span class="line">b = np.array([<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>])[:, np.newaxis]</span><br><span class="line"><span class="comment">#[[1]</span></span><br><span class="line"><span class="comment"># [1]</span></span><br><span class="line"><span class="comment"># [1]</span></span><br><span class="line"><span class="comment"># [1]]</span></span><br><span class="line">print(np.concatenate((a, b, b), axis=<span class="number">1</span>)) <span class="comment"># 多矩阵水平合并</span></span><br><span class="line"><span class="comment">#[[4 1 1]</span></span><br><span class="line"><span class="comment"># [3 1 1]</span></span><br><span class="line"><span class="comment"># [2 1 1]</span></span><br><span class="line"><span class="comment"># [1 1 1]]</span></span><br></pre></td></tr></table></figure>

<h3 id="array的分割"><a href="#array的分割" class="headerlink" title="array的分割"></a>array的分割</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建数据</span></span><br><span class="line">A = np.arange(<span class="number">12</span>).reshape((<span class="number">3</span>, <span class="number">4</span>))</span><br><span class="line">print(A)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">array([[ 0,  1,  2,  3],</span></span><br><span class="line"><span class="string">    [ 4,  5,  6,  7],</span></span><br><span class="line"><span class="string">    [ 8,  9, 10, 11]])</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 纵向分割</span></span><br><span class="line">print(np.split(A, <span class="number">2</span>, axis=<span class="number">1</span>))</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">[array([[0, 1],</span></span><br><span class="line"><span class="string">        [4, 5],</span></span><br><span class="line"><span class="string">        [8, 9]]), array([[ 2,  3],</span></span><br><span class="line"><span class="string">        [ 6,  7],</span></span><br><span class="line"><span class="string">        [10, 11]])]</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 横向分割 </span></span><br><span class="line">print(np.split(A, <span class="number">3</span>, axis=<span class="number">0</span>))</span><br><span class="line"><span class="comment"># [array([[0, 1, 2, 3]]), array([[4, 5, 6, 7]]), array([[ 8,  9, 10, 11]])]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 不等量的分割</span></span><br><span class="line">print(np.array_split(A, <span class="number">3</span>, axis=<span class="number">1</span>))</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">[array([[0, 1],</span></span><br><span class="line"><span class="string">        [4, 5],</span></span><br><span class="line"><span class="string">        [8, 9]]), array([[ 2],</span></span><br><span class="line"><span class="string">        [ 6],</span></span><br><span class="line"><span class="string">        [10]]), array([[ 3],</span></span><br><span class="line"><span class="string">        [ 7],</span></span><br><span class="line"><span class="string">        [11]])]</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>

<h3 id="np-newaxis"><a href="#np-newaxis" class="headerlink" title="np.newaxis"></a>np.newaxis</h3><p>这里，我们使用了np.newaxis，newaxis的功能是插入新维度，结合例子我们看一下用法：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">a = np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</span><br><span class="line">print(a)            <span class="comment"># [1 2 3 4]</span></span><br><span class="line">print(a.shape)      <span class="comment"># (4,)</span></span><br><span class="line"></span><br><span class="line">b = a[:, np.newaxis]</span><br><span class="line">print(b)            </span><br><span class="line"><span class="comment"># [[1]</span></span><br><span class="line"><span class="comment"># [2]</span></span><br><span class="line"><span class="comment"># [3]</span></span><br><span class="line"><span class="comment"># [4]] </span></span><br><span class="line">print(b.shape)      <span class="comment"># (4, 1)</span></span><br><span class="line"></span><br><span class="line">c = a[np.newaxis, :]</span><br><span class="line">print(c)            <span class="comment"># [[1 2 3 4]]</span></span><br><span class="line">print(c.shape)      <span class="comment"># (1, 4)</span></span><br></pre></td></tr></table></figure>

<p>总之numpy的array的操作方法很多，是我们科学计算的得力工具。</p>
<h2 id="numpy-copy-amp-deep-copy"><a href="#numpy-copy-amp-deep-copy" class="headerlink" title="numpy copy &amp; deep copy"></a>numpy copy &amp; deep copy</h2><p>numpy有两种方式拷贝值，一种是=号，一种是copy()方法，前者可以理解为引用，后者可以理解为简单的复制值。几行代码就明白了</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">a = np.arange(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">b = a</span><br><span class="line">c = a.copy()</span><br><span class="line"></span><br><span class="line">a[<span class="number">0</span>] = <span class="number">5</span></span><br><span class="line">print(b)    <span class="comment"># [5 1 2 3]</span></span><br><span class="line">print(c)    <span class="comment"># [0 1 2 3]</span></span><br></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 机器学习新手入门 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Machine Learning </tag>
            
            <tag> python </tag>
            
            <tag> numpy </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[机器学习基础1--python]]></title>
      <url>http://wangyeming.github.com/2018/09/04/machine-learning-base-python/</url>
      <content type="html"><![CDATA[<p>不知不觉，跟着莫凡大大的机器学习教程学习了一段时间。作为初学者，是时候总结一下目前学习到的知识。第一篇就从python和python中必需的数据处理库，图像库开始吧。</p>
<a id="more"></a>

<h2 id="why-python"><a href="#why-python" class="headerlink" title="why python"></a>why python</h2><p>机器学习当下最火的莫过于深度学习和神经网络，深度学习当中最流行的tensorflow支持最好的开发语言就是python。当然python凭借其简单灵活的语法和庞大的第三方库，在程序员和非程序员当中都有很大的影响力。</p>
<h2 id="python2和python3"><a href="#python2和python3" class="headerlink" title="python2和python3"></a>python2和python3</h2><p>python2和python3是指python的两个大版本，需要注意的是python3并不向下兼容python2的语法，例如</p>
<p>在python2中，我们这样去打印信息：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">print</span> <span class="string">'Hello World'</span></span><br></pre></td></tr></table></figure>

<p>而python3中，你必须加上括号：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">'Hello World'</span>)</span><br></pre></td></tr></table></figure>

<p>个人建议，直接学习python3即可，除了历史代码，很多第三方库和框架，包括tensorflow，scrapy都很好的支持了python3，用新不用旧。</p>
<h2 id="pythonic"><a href="#pythonic" class="headerlink" title="pythonic"></a>pythonic</h2><p>对于老码农而言，尤其是已经掌握了一门动态语言，学习Python并不是什么难事。Python语言有自己鲜明的风格，语句不用分号结尾，不用花括号，依赖缩进判定语句的层次。作为一门动态强类型语言，python兼具语法灵活性和类型安全。很Python的Python代码会被称为『pythonic』。</p>
<p>例如：在Java中，我们交换两个数字，通过这样写：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> temp = a;</span><br><span class="line">a = b;</span><br><span class="line">b = temp;</span><br></pre></td></tr></table></figure>

<p>而pythonic的做法是：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a, b = b, a</span><br></pre></td></tr></table></figure>

<h2 id="code-style"><a href="#code-style" class="headerlink" title="code style"></a>code style</h2><p>我坚持认为每一门语言的code style是非常重要的，而python里最流行的code style也就是<a href="https://www.python.org/dev/peps/pep-0008/" target="_blank" rel="noopener">PEP 8 – Style Guide for Python Code</a>.</p>
<p>为什么需要坚持code style？每一门语言有自己的设计思路和最佳应用场景，也就是为了解决某类问题。而学习新语言，即是为了解决新问题，也是为了拓宽自己的眼界。没必要固守别的语言的一套规范。</p>
<p>如果是用IDE开发的话，基本上都内置了PEP 8规范，所以不用太关心。</p>
<h2 id="IDE"><a href="#IDE" class="headerlink" title="IDE"></a>IDE</h2><p>早先我也认为Vim才是学习语言最好的平台，甚至一度为了解决『python语法检查的vim插件在电脑上不生效的问题』绞尽脑汁。其实不需要太抗拒IDE，IDE无非为我们提供了目录树，语法检查，自动排班，一键运行，debug断点等功能而已。先重点着眼于语法本身，而不是各种奇淫技巧。这里推荐：</p>
<p><a href="https://www.jetbrains.com/pycharm/" target="_blank" rel="noopener">PyCharm: Python IDE for Professional Developers by JetBrains</a></p>
<p>此外。推荐有一定程序基础的人可以去LeetCode上选择用python刷题，真正的白版写python，多写几题python的常用基础语法就熟悉了。也解决了学语言没有应用场景的尴尬。</p>
<p><a href="https://leetcode-cn.com/" target="_blank" rel="noopener">领扣(LeetCode) - 极客挚爱的在线技术平台</a></p>
<h2 id="初期学习进度关键点"><a href="#初期学习进度关键点" class="headerlink" title="初期学习进度关键点"></a>初期学习进度关键点</h2><ul>
<li><p>搭好环境+Hello World</p>
<p>  俗话说，工欲善其事，必先利其器。好多人卡在学习的第一步，其实查找资料，探索方法也是写代码的乐趣之一阿。</p>
</li>
<li><p>读一个文本文件，原样写入到一个新文件中。</p>
</li>
<li><p>(进阶1) 读一个m行n列的文本文件，按照指定要求输出到新文件，要求例如：第一列需要输入文件的某几列值求和。第二列需要输入文件的某一列进行正则匹配来获取关键字。第一列是1-7的数字，请转化为Monday-Sunday的字符串</p>
</li>
<li><p>(进阶2) 将其中某些数据处理方法，封装成函数。</p>
</li>
<li><p>(进阶3) 输出原文件某一列的和和方差。如果该文件非常的大，比如说4GB，不能一次加载到内存，如何处理？</p>
<p>  掌握要点包括 基本的IO操作，条件语句，循环语句，字符串常见处理函数, 类型转换, 正则表达式，集合，map，函数等。基本上到这一步，把python作为普通的文本处理工具已经不再话下了。正则表达式可能是一个难点，程序语言的初学者可能会常常会一口气将数据全部读入到内存中，多犯几次错误其实就慢慢学会了。</p>
</li>
<li><p>导入第三方库，利用库里的方法帮助处理数据。如利用numpy，计算均值，方差，标准差，中位数等。</p>
<p>  python以工具库多闻名。这一步将学会如何下载，导入第三方库，并使用库中的方法进行操作。</p>
</li>
<li><p>定义一个python类，类包括类方法，静态方法，类成员变量。</p>
</li>
<li><p>python多线程，比如说由100个文件，每个文件处理时间需要1min，如何利用多线程去加快计算。</p>
</li>
</ul>
<h2 id="python入门书籍和教程推荐"><a href="#python入门书籍和教程推荐" class="headerlink" title="python入门书籍和教程推荐"></a>python入门书籍和教程推荐</h2><p><a href="https://morvanzhou.github.io/tutorials/python-basic/basic/" target="_blank" rel="noopener">莫凡 Python3基础教程</a><br><a href="https://legacy.gitbook.com/book/lenkimo/byte-of-python-chinese-edition/details" target="_blank" rel="noopener">简明 Python 教程</a><br><a href="http://www.kuqin.com/docs/diveintopythonzh-cn-5.4b/html/toc/" target="_blank" rel="noopener">Dive Into Python 中文版</a></p>
]]></content>
      
        <categories>
            
            <category> 机器学习新手入门 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Machine Learning </tag>
            
            <tag> python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android Target SDK升级一路趟坑记]]></title>
      <url>http://wangyeming.github.com/2018/08/31/android-target-SDK/</url>
      <content type="html"><![CDATA[<p>target SDK升级是一个老生常谈的问题，由于总所周知的原因，很多国内APP的Target SDK版本号还停留在23以前，甚至是19。本文结合项目中实际遇到的问题，简单的梳理一下升级Target SDK遇到的问题。</p>
<a id="more"></a>

<p>来自Google Play官方的要求:</p>
<p><a href="https://android-developers.googleblog.com/2017/12/improving-app-security-and-performance.html" target="_blank" rel="noopener">Improving app security and performance on Google Play for years to come</a></p>
<p>同时，国内也终于迎来​工信部的要求，手机<strong>出厂预置</strong>的所有应用android:targetSdkVersion&gt;=26。</p>
<p>这里简单梳理一下从API21-&gt;API28的升级工作吧。</p>
<h1 id="Android-5-0-amp-5-1"><a href="#Android-5-0-amp-5-1" class="headerlink" title="Android 5.0 &amp; 5.1"></a>Android 5.0 &amp; 5.1</h1><p><a href="https://developer.android.com/about/versions/android-5.0-changes" target="_blank" rel="noopener">Android 5.0 行为变更</a></p>
<p>关于Android 5.0和5.1(API 21和API 22),最深的影响就是ART取代Dalvik，成为平台默认设置.</p>
<h2 id="不再支持隐式intent去bindService"><a href="#不再支持隐式intent去bindService" class="headerlink" title="不再支持隐式intent去bindService()"></a>不再支持隐式intent去bindService()</h2><p>Target SDK部分的变更不多，影响最大的变更可能是<a href="https://developer.android.com/about/versions/android-5.0-changes#BindService" target="_blank" rel="noopener">不再支持隐式intent去bindService()的方式</a>,简单说就是bindService的intent，不光需要指定Action，还需要指定Service的PackageName，不然系统会报错。</p>
<p>其他的没什么多说的，遇到问题可以自行查看官方文档。</p>
<hr>
<h1 id="Android-6-0"><a href="#Android-6-0" class="headerlink" title="Android 6.0"></a>Android 6.0</h1><p><a href="https://developer.android.com/about/versions/marshmallow/android-6.0-changes" target="_blank" rel="noopener">Android 6.0 行为变更</a></p>
<h2 id="权限申请"><a href="#权限申请" class="headerlink" title="权限申请"></a>权限申请</h2><p>关于Android 6.0(API 23),最值得一提的也就是运行时权限了。这也是很多国内APP迟迟不愿意升级Target SDK的最主要原因，也是我们升级过程中最需要处理的问题。首先明确一点，仅被Android认定为『危险权限』，才需要使用前申请。然后，危险权限根据系统认定，具有以下四种不同的状态：</p>
<ol>
<li>有权限</li>
<li>需要询问</li>
<li>仅拒绝</li>
<li>拒绝+不再提醒</li>
</ol>
<p>如果权限被拒绝过，下次申请时建议弹窗说明理由。如果用户设置不再提醒，又确实需要，可以引导用户去设置里手动开启。其他的就不多说了，这里给两个比较好的权限库。</p>
<p>一个是google的开源库方案，<a href="https://github.com/googlesamples/easypermissions" target="_blank" rel="noopener">googlesamples/easypermissions</a>,优点是google出品，代码风格和质量都有保证。不过缺点也很明显，调用方式依赖Activity和Fragment，而项目中很多代码不可能从头改造。</p>
<p>另一个是我强烈推荐的国内的一个开源库方案，<a href="https://github.com/yanzhenjie/AndPermission" target="_blank" rel="noopener">yanzhenjie/AndPermission</a>,star数4000+，依赖context+流式调用，同时兼容国内的各类机型，非常好用。</p>
<hr>
<h1 id="Android-7-0-amp-7-1-1"><a href="#Android-7-0-amp-7-1-1" class="headerlink" title="Android 7.0 &amp; 7.1.1"></a>Android 7.0 &amp; 7.1.1</h1><p><a href="https://developer.android.com/about/versions/nougat/android-7.0-changes" target="_blank" rel="noopener">Android 7.0 行为变更</a></p>
<p>关于Android 7.0和7.1.1(API 24和API 25),也有很多需要开发者注意的地方。</p>
<h2 id="User-added-CAs-not-trusted-by-default-for-secure-connections"><a href="#User-added-CAs-not-trusted-by-default-for-secure-connections" class="headerlink" title="User-added CAs not trusted by default for secure connections"></a>User-added CAs not trusted by default for secure connections</h2><p>首先是 <a href="https://developer.android.google.cn/training/articles/security-config#manifest" target="_blank" rel="noopener">User-added CAs not trusted by default for secure connections</a>, 也就是说，如果开发者没有配置的话，通过charles等抓包软件，在仅导入用户证书的情况下，是没有办法抓https请求的包的。(如果有https系统的证书，还是可以抓包的)。</p>
<p>具体可以参考 <a href="https://blog.csdn.net/xiexiangyu92/article/details/78458676" target="_blank" rel="noopener">Android 7.1 以上机型Charles抓包解决办法</a></p>
<p>处理方式其实也很简单，假如期待的是Dev渠道的APK安装包可以信任用户证书，实现抓包，则新建一个xml文件：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">network-security-config</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">base-config</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">trust-anchors</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">certificates</span> <span class="attr">src</span>=<span class="string">"user"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">certificates</span> <span class="attr">src</span>=<span class="string">"system"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">trust-anchors</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">base-config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">network-security-config</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>然后放在Applicaiton所在模块下的src/Dev/res/xml目录下</p>
<p><img src="/img/2018-08-31-android-target-SDK-01.png" alt></p>
<h2 id="应用私有目录被限制访问"><a href="#应用私有目录被限制访问" class="headerlink" title="应用私有目录被限制访问"></a>应用私有目录被限制访问</h2><p>(系统权限更改-应用私有目录被限制访问)[<a href="https://developer.android.com/about/versions/nougat/android-7.0-changes#permfilesys]" target="_blank" rel="noopener">https://developer.android.com/about/versions/nougat/android-7.0-changes#permfilesys]</a></p>
<p>简单来说，影响有以下几点：</p>
<ul>
<li>外部App被限制访问App的私有目录。尝试的话将触发SecurityException</li>
<li>传递 file:// URI 会触发 FileUriExposedException。分享私有文件内容的推荐方法是使用 FileProvider</li>
</ul>
<p>具体内容可以参考这篇博文：<br><a href="http://yifeng.studio/2017/05/03/android-7-0-compat-fileprovider/" target="_blank" rel="noopener">关于 Android 7.0 适配中 FileProvider 部分的总结</a></p>
<p>举两个具体受影响的业务场景：</p>
<h3 id="调起系统相机拍照"><a href="#调起系统相机拍照" class="headerlink" title="调起系统相机拍照"></a>调起系统相机拍照</h3><p>之前调起系统拍照的代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">takePhoto</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Intent intent = <span class="keyword">new</span> Intent(MediaStore.ACTION_IMAGE_CAPTURE);</span><br><span class="line">    <span class="comment">//省略检测相机，权限申请...</span></span><br><span class="line">    File file = <span class="keyword">new</span> File(imagePath);</span><br><span class="line">    Uri uri = Uri.fromFile(file);</span><br><span class="line">    intent.putExtra(MediaStore.EXTRA_OUTPUT, uri);</span><br><span class="line">    startActivityForResult(intent, REQUEST_CODE_CAPTURE);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onActivityResult</span><span class="params">(<span class="keyword">int</span> requestCode, <span class="keyword">int</span> resultCode,Intent data)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(requestCode == REQUEST_CODE_CAPTURE) &#123;</span><br><span class="line">        <span class="comment">//判断是否成功</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果在android 7.0以上的机型，则会发现resultCode返回Activity.RESULT_CANCELED,也就是0。处理起来也很简单，Android Support库为我们提供了工具方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">takePhoto</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Intent intent = <span class="keyword">new</span> Intent(MediaStore.ACTION_IMAGE_CAPTURE);</span><br><span class="line">    <span class="comment">//省略检测相机，权限申请...</span></span><br><span class="line">    File file = <span class="keyword">new</span> File(imagePath);</span><br><span class="line">    <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.N)&#123;</span><br><span class="line">        tempImageUri = FileProvider.getUriForFile(<span class="keyword">this</span>, <span class="string">"fileprovider的包名"</span>, file);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        Uri uri = Uri.fromFile(file);</span><br><span class="line">    &#125;</span><br><span class="line">    intent.putExtra(MediaStore.EXTRA_OUTPUT, uri);</span><br><span class="line">    startActivityForResult(intent, REQUEST_CODE_CAPTURE);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样即可正常拍照了。</p>
<h3 id="安装apk"><a href="#安装apk" class="headerlink" title="安装apk"></a>安装apk</h3><p><a href="https://juejin.im/post/5ad4499a6fb9a028b617fc1c" target="_blank" rel="noopener">Android 6.0 7.0 8.0三个版本Install Apk 采坑记录</a></p>
<p>这篇博文说的很清楚，这里就不多说了。</p>
<hr>
<h1 id="Android-8-0"><a href="#Android-8-0" class="headerlink" title="Android 8.0"></a>Android 8.0</h1><p><a href="https://developer.android.com/about/versions/oreo/android-8.0-changes" target="_blank" rel="noopener">Android 8.0 行为变更</a></p>
<h2 id="访问用户账户需要授权"><a href="#访问用户账户需要授权" class="headerlink" title="访问用户账户需要授权"></a>访问用户账户需要授权</h2><p>首当其冲的是如果没有用户的许可，App无法直接访问Android的系统用具账户。什么意思？在Android系统中，App可以通过AccountManager类，创建和访问用户账户.如Android系统的Google账户，小米手机里面的小米账户等等。此前App仅需有如下权限：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.GET_ACCOUNTS"</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p>但Target 26的App，非系统签名的应用则无法获取到系统帐号.原生的系统AccountManager机制提供了两种方式使这些app来获取:</p>
<ul>
<li>由authenticator app或是跟authenticator app相同签名的其他app调用setAccountVisibility(Account account, String packageName, int visibility)来将指定的app设置为帐号可见</li>
<li>没有权限的app自己调用newChooseAccountIntent方法来由用户来选择是否允许该app访问对应帐号</li>
</ul>
<p>方案一般来说用户体验更加好，方案二的原生页面会让用户很难费解.这里就不做具体展开了。</p>
<h2 id="提醒窗口"><a href="#提醒窗口" class="headerlink" title="提醒窗口"></a>提醒窗口</h2><p>一些App需要在其他应用和系统窗口上方显示提醒窗口,Target 26的App，使用 SYSTEM_ALERT_WINDOW 权限的应用无法再使用以下窗口类型来显示提醒窗口了：</p>
<p>TYPE_PHONE<br>TYPE_PRIORITY_PHONE<br>TYPE_SYSTEM_ALERT<br>TYPE_SYSTEM_OVERLAY<br>TYPE_SYSTEM_ERROR</p>
<p>替换方案是使用名为 TYPE_APPLICATION_OVERLAY 的新窗口类型.新窗口有一些特性，更多的可以在这里进行了解 <a href="https://developer.android.com/about/versions/oreo/android-8.0-changes#cwt" target="_blank" rel="noopener">提醒窗口</a></p>
<hr>
<h1 id="Android-9-0"><a href="#Android-9-0" class="headerlink" title="Android 9.0"></a>Android 9.0</h1><p><a href="https://developer.android.com/about/versions/pie/android-9.0-changes-28" target="_blank" rel="noopener">以 API 级别 28+ 为目标的应用</a></p>
<h2 id="前台服务"><a href="#前台服务" class="headerlink" title="前台服务"></a>前台服务</h2><p>引用官方文档：</p>
<pre><code>针对 Android 9 或更高版本并使用前台服务的应用必须请求 FOREGROUND_SERVICE 权限。 这是普通权限，因此，系统会自动为请求权限的应用授予此权限。
如果针对 Android 9 或更高版本的应用尝试创建一个前台服务且未请求 FOREGROUND_SERVICE，则系统会引发 SecurityException。</code></pre><hr>
<p>(更多内容，待续)</p>
]]></content>
      
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android开发中陌生的老相识(1)--Android Support Library]]></title>
      <url>http://wangyeming.github.com/2018/08/30/android-support-library/</url>
      <content type="html"><![CDATA[<p>好久没有写技术博客了，随着工作中业务的成长的同时，也愈发感受到基础的重要性。有很多我们平时Android开发经常会接触到的事物，由于太过于常见，或者各种开发工具封装的太过完善，导致我们实际上对他们并没有我们想象中的那么熟悉(也就是我说的『陌生的老相识』)。 温故知新，也借此机会刨根问底，打算写一个系列，好好的介绍下这些『老相识』。每篇篇幅不长。第一篇选中的是<strong>Android Support库</strong>。</p>
<a id="more"></a>

<h1 id="提一些问题"><a href="#提一些问题" class="headerlink" title="提一些问题"></a>提一些问题</h1><p>先提几个问题，看看大家能不能回答上来:</p>
<ol>
<li>在已知项目的compileSdkVersion的情况下，Support库的版本号应该设置为多少？大版本号必须相等吗？可以低于或者高于compileSdkVersion吗？</li>
<li>除了Fragment，ViewPager这些向下兼容的类，你还知道哪些Support库为开发提供了哪些其它功能</li>
<li>什么时候应该去更新Support库的版本？Support库的接口总是兼容低版本的吗？升级有没有坑？</li>
<li>support库的v4,v7,v8，v13都是什么意思？这些support库都是干什么的？</li>
<li>如果项目依赖的库自身依赖了support库和app本身依赖的support库版本号不一致，会有冲突吗？如果想排除第三方库本身依赖的support库，该如何做？</li>
</ol>
<p>嘿嘿，如果对这些问题又有疑惑的话，不妨看看本文。</p>
<hr>
<h1 id="Support库的用途"><a href="#Support库的用途" class="headerlink" title="Support库的用途"></a>Support库的用途</h1><p>按照官方的解释，Support库主要有以下三个用途：</p>
<h2 id="Backward-Compatibility-for-newer-APIs-为新API提供向后兼容性"><a href="#Backward-Compatibility-for-newer-APIs-为新API提供向后兼容性" class="headerlink" title="Backward Compatibility for newer APIs (为新API提供向后兼容性)"></a>Backward Compatibility for newer APIs (为新API提供向后兼容性)</h2><p>这个是support最广为认知的用途。support库本身提供了大量的类和方法，为新的SDK新增的功能做支持。类的话如Fragmemt，ViewPager等。方法的话,例如getColor()方法，如果不借助support库的话，需要这么写：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= <span class="number">23</span>) &#123;</span><br><span class="line">     context.getColor(id);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">     context.getResources().getColor(id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>而借助support库，我们一行搞定，不用再代码里强行嵌入恶心的API判断：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ContextCompat.getColor(context, R.color.red);</span><br></pre></td></tr></table></figure>

<h2 id="Convenience-and-Helper-Classes-便利和帮助类"><a href="#Convenience-and-Helper-Classes-便利和帮助类" class="headerlink" title="Convenience and Helper Classes (便利和帮助类)"></a>Convenience and Helper Classes (便利和帮助类)</h2><p>例如RecyclerView，就是support库为Android开发者提供的列表展示ui组件。</p>
<h2 id="Debugging-and-Utilities-调试和实用工具"><a href="#Debugging-and-Utilities-调试和实用工具" class="headerlink" title="Debugging and Utilities (调试和实用工具)"></a>Debugging and Utilities (调试和实用工具)</h2><p>比如说，MultiDex可以帮助我们应对65536问题。<br>再例如借助Annotations Support Library，我们可以在代码中注解帮助静态代码分析。举个例子:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getValue</span><span class="params">(Person person)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//may preduce npe</span></span><br><span class="line">    <span class="keyword">return</span> person.age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getValue</span><span class="params">(@Nullable Person person)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(person == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//如果没上面的判空，编译器会提醒你这里可能会存在空指针</span></span><br><span class="line">    <span class="keyword">return</span> person.age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getValue</span><span class="params">(@NonNull Person person)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 无需判空，调用的地方，编译器会提示。</span></span><br><span class="line">    <span class="keyword">return</span> person.age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>总而言之，针对使用support库和框架API，官方总结了以下三点差异：</p>
<ul>
<li>Compatibility for a Specific Feature</li>
<li>Compatibility for Related Library Features</li>
<li>General Device Compatibility</li>
</ul>
<h1 id="Version-Support-and-Package-Names-支持的版本和包名"><a href="#Version-Support-and-Package-Names-支持的版本和包名" class="headerlink" title="Version Support and Package Names (支持的版本和包名)"></a>Version Support and Package Names (支持的版本和包名)</h1><p>展开AndroidStudio的External Libraries，我们可以看到项目中依赖的support库</p>
<p><img src="/img/2018-08-30-android-support-library-01.png" alt></p>
<p>首先我们知道，support包的包名总是以 『com.android.support』开头，中间是具体的名称，如：support-v4,support-fragment, recyclerview-v7, support-compat等最后跟上版本号</p>
<p>一些包是以#+最低支持的API版本号命名的，如我们熟悉的support-v4包。<br>从2017年7月开始的26.0.0的Support库，最低支持的版本号是Android 4.0(API 14).所以像<br>support-v7包和support-v4包。最低支持API都是14.</p>
<p>同时，support包我们知道版本号是a.b.c的格式，例如26.0.2,25.0.1等。其中大版本号也就是与构建库是最新的SDK版本号是一致的。也就是说，26.0。0的support提供了对26及以前版本API的支持(就别希望会提供对27及以后API的支持)</p>
<p>这句话的意思也就是说，假如我们的compileSdkVersion是26，那最好support的library是<strong>大于等于26</strong>的，26以下的support库没办法保证对26的兼容性。也肯定不会提供27之后才有的新特性。</p>
<p>那我们去哪里找Support库的版本发布历史呢？</p>
<p><a href="https://developer.android.com/topic/libraries/support-library/revisions" target="_blank" rel="noopener">Android Support Library Revisions</a> </p>
<h1 id="Support-Library-Packages-都有哪些Support库"><a href="#Support-Library-Packages-都有哪些Support库" class="headerlink" title="Support Library Packages (都有哪些Support库)"></a>Support Library Packages (都有哪些Support库)</h1><p>大的分类来说，目前就有以下这些,种类很多，我们就挑几个最常见的做下介绍:</p>
<ul>
<li>v4 Support Libraries</li>
<li>Multidex Support Library</li>
<li>v7 Support Libraries</li>
<li>v8 Support Library</li>
<li>v13 Support Library</li>
<li>v14 Preference Support Library</li>
<li>v17 Preference Support Library for TV</li>
<li>v17 Leanback Library</li>
<li>Vector Drawable Library</li>
<li>Animated Vector Drawable Library</li>
<li>Annotations Support Library</li>
<li>Design Support Library</li>
<li>Custom Tabs Support Library</li>
<li>Percent Support Library</li>
<li>ExifInterface Support Library</li>
<li>App Recommendation Support Library for TV</li>
<li>Wear UI Library</li>
</ul>
<h2 id="v4-Support-Libraries"><a href="#v4-Support-Libraries" class="headerlink" title="v4 Support Libraries"></a>v4 Support Libraries</h2><p>这个v4大类下的support库平时开发用的非常多，像support-core-utils,support-core-ui,support-fragment等都是最常用的。</p>
<h2 id="Multidex-Support-Library"><a href="#Multidex-Support-Library" class="headerlink" title="Multidex Support Library"></a>Multidex Support Library</h2><p>支持多dex，不用多解释</p>
<h2 id="v7-Support-Libraries"><a href="#v7-Support-Libraries" class="headerlink" title="v7 Support Libraries"></a>v7 Support Libraries</h2><p>v7包提供了很多对Material Design UI组件的支持，例如Action Bar,cardview,gridlayout，recyclerview等等。</p>
<h2 id="Annotations-Support-Library"><a href="#Annotations-Support-Library" class="headerlink" title="Annotations Support Library"></a>Annotations Support Library</h2><p>这个注解库非常好用，用的好的可以大幅减少各类调用时的空指针，对lint等静态代码分析都很有帮助。常见的如@Nullable,@NonNull,@IntDef,@StringDef 等都是开发的好助手。前面举了@Nullable,@NonNull的例子，这里举个我们开发中最常见的一类问题，常量参数。</p>
<p>有些时候我们定义了一些type，整形或者字符串格式(定义枚举总是麻烦)例如：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义一些int常量</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TYPE1 = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TYPE2 = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TYPE3 = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//这里参数type完全是没有约束的，很可能传不合法的值</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> type)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用方传了个不合法的值，然而这种问题很难被发现</span></span><br><span class="line">func(-<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">借助Annotations Support Library的<span class="meta">@IntDef</span>注解，一切就好多了</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line"><span class="meta">@IntDef</span>(&#123;</span><br><span class="line">    TYPE1, TYPE2, TYPE3</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Type &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这里参数type有了注解，编译器和lint都会告诉我们传的值是否合法，而且对函数的调用方而言也相当于很好的注释</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">func</span><span class="params">(@Type <span class="keyword">int</span> type)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>具体的可以看Android官方文档：</p>
<p><a href="https://developer.android.com/topic/libraries/support-library/packages" target="_blank" rel="noopener">Support Library Packages</a></p>
<h1 id="问题解答"><a href="#问题解答" class="headerlink" title="问题解答"></a>问题解答</h1><ul>
<li>在已知项目的compileSdkVersion的情况下，Support库的版本号应该设置为多少？大版本号必须相等吗？可以低于或者高于compileSdkVersion吗？</li>
</ul>
<p>Support Library Version 最好大于等于 compileSdkVersion</p>
<ul>
<li>除了Fragment，ViewPager这些向下兼容的类，你还知道哪些Support库为开发提供了哪些其它功能</li>
</ul>
<p>这个前面都说过了。</p>
<ul>
<li>什么时候应该去更新Support库的版本？Support库的接口总是兼容低版本的吗？升级有没有坑？</li>
</ul>
<p>一般情况下，Support Library Version和compileSdkVersion大版本保持一致，小版本最新即可。升级compileSdkVersion的时候可以去升级Support Library Version，Support库的接口并不总是兼容低版本的Support库的，而且很多类经常挪动位置，有些类还经常由其它类替换，这个只能升级的时候去摸索了。大部分情况没什么改动。</p>
<ul>
<li>support库的v4,v7,v8，v13都是什么意思？这些support库都是干什么的？</li>
</ul>
<p>数字通常表示支持的最低API版本号，具体干什么的前面也都有介绍了。</p>
<ul>
<li>如果项目依赖的库自身依赖了support库和app本身依赖的support库版本号不一致，会有冲突吗？如果想排除第三方库本身依赖的support库，该如何做？</li>
</ul>
<p>不会有冲突，不同版本号的support库通过可以并存在项目的依赖中，具体可以在Android Studio的External Libraries里面看到，经常会看到好几个版本的support依赖。</p>
<p>如果想排除第三方库本身依赖的support库，gradle依赖可以这么写：</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">api (xxxxxx) &#123;</span><br><span class="line">     exclude <span class="string">group:</span> <span class="string">'com.android.support'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果只想exludesupport某个具体的包，可以这样写：</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">api (xxxxxx) &#123;</span><br><span class="line">    exclude <span class="string">group:</span> <span class="string">'com.android.support'</span> ,<span class="string">module:</span> <span class="string">'support-annotations'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>参考文档：</p>
<p><a href="https://developer.android.com/topic/libraries/support-library/" target="_blank" rel="noopener">Android官方对Support Library的介绍</a></p>
]]></content>
      
        <categories>
            
            <category> Android开发中陌生的老相识 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[In https response header, Does the value of Set-Cookie Domain need a leading dot？]]></title>
      <url>http://wangyeming.github.com/2018/03/19/https-set-cookies/</url>
      <content type="html"><![CDATA[<p>没错，大家也看到了这篇博客的标题是英文，这说明了什么呢？这说明了这是一个悲伤的故事，预示着作者心中的哀伤(苦笑脸)。其实最主要的原因是，用中文描述起来可能有点啰嗦。</p>
<p>『Https请求的response的header中, Set-Cookie里的domain字段的值，是否需要以点.开头呢？』</p>
<p>为什么会有这样的疑问？一切还要从一个月前的那件事说起~</p>
<a id="more"></a>

<hr>
<h2 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h2><p>书归正文。先介绍一下业务背景。这次发生问题的登录业务。和大多数登录业务一样同样是基于Oauth登录，客户端访问授权方拿到授权，然后通过这份授权向认证服务器申请令牌(Token)。拿到Token后，客户端就可以合法的访问具体业务从而请求资源。大致的流程可以通过下图来表示</p>
<p><img src="/img/2018-03-19-https-set-cookies-01.png" alt></p>
<p>这次问题就发生在这个Token身上。客户端因为域名的调整导致拿不到Token了，引发了一系列问题。为了方便大家理解，我先简单的介绍下https关于下发Cookie的背景。</p>
<p>我们知道，https下发Cookie信息, 其中一种方式是通过把Cookie信息存放在Response的Header里面的Set-Cookie中。</p>
<p>假设下发Token的url是：</p>
<p>  login.com</p>
<p>在Response的Header中，以Set-Cookie为Key，存有Token信息，格式为:</p>
<p>  token=xxxxxx;path=/;domain=login.com</p>
<p>下图是我用Charles的抓包看response的header的截图，业务相关的地方打了马赛克，不影响理解。</p>
<p><img src="/img/2018-03-19-https-set-cookies-02.png" alt></p>
<p>而我们客户端要做的，就是从响应中取出这个Token的值，用于访问业务接口。而我们这边项目由于业务的原因，客户端这边从网络请求到拿Token实现方式有两套不同但又类似的代码，最终方式都是从请求的CookieManager中，直接根据key=token，取出对应的value。</p>
<ul>
<li>方式一：基于HttpURLConnection封装的网络请求，收到响应之后，从CookieManager中读取key为『token』的value。</li>
<li>方式二：基于OkHttp封装的网络请求，同样的，收到响应之后，从CookieManager中读取key为『token』的value。</li>
</ul>
<p>可以用这段代码理解：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(Call call, Response response)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    HttpCookie serviceTokenCookie = CookieUtil.getCookie(getCookieManager(), <span class="string">"token"</span>);</span><br><span class="line">    <span class="comment">//token不为空，表示成功拿到Token</span></span><br><span class="line">    String token = serviceTokenCookie.getValue();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="暴露问题"><a href="#暴露问题" class="headerlink" title="暴露问题"></a>暴露问题</h2><p>这次事情的起因是公司的MIUI国际部隐私团队提出要求，海外版内置App需要杜绝直接连国内服务器进行网络请求的情况。而我们登录业务的callback也需要做调整。调整方案是统一替换原有callback的域名。替换为海外服务访问域名。</p>
<p>假设我们针对海外用户(比如说美国用户)的处理方式是提供海外子域名：</p>
<p>  usa.login.com</p>
<p>确定了针对海外用户的域名后。在保证业务逻辑一致的情况下，我们在测试环境下切换了callback的链接 login.com -&gt; usa.login.com。这时Set-Cookie的格式是：</p>
<p>  token=xxxxxx;path=/;domain=login.com</p>
<p>但是我们发现：域名切换后，方法一基于HttpURLConnection封装的网络请求，CookieManager读取不到key为『token』的cookie信息。但是方法二正常。</p>
<p><img src="/img/2018-03-19-https-set-cookies-08.jpg" alt></p>
<p>时间仓促，我们只能紧急查找方案。有同事提出，CookieManager拿不到Token，是不是因为callback的url加了usa.的前缀后，和Set-Cookie的domain无法正常匹配？于是我们抱着试试看的想法，在domain现有的值前面加上一个点.，也就是格式变成：</p>
<p>  token=xxxxxx;path=/;domain=.login.com</p>
<p>修改之后测试，结果又是大跌眼睛，方法一正常了，但是方法二基于OkHttp封装的网络请求，CookieManager读取不到key为『token』的cookie信息。</p>
<p><img src="/img/2018-03-19-https-set-cookies-09.jpeg" alt></p>
<p>时间仓促，我们只好再次尝试，domain改成当前callback url完整域名，这下两种方法都能正常获取到token了。</p>
<p>  token=xxxxxx;path=/;domain=usa.login.com</p>
<h2 id="查找原因"><a href="#查找原因" class="headerlink" title="查找原因"></a>查找原因</h2><p>作为一名程序猿，当然不能满足于只解决问题。我们首先查一下CookieManager的domain到底是怎么定义的？我们无意中在<a href="https://github.com/square/okhttp/pull/2722" target="_blank" rel="noopener">square/okhttp</a>的issues中，发现了这个issue</p>
<p><a href="https://github.com/square/okhttp/pull/2722" target="_blank" rel="noopener">Inject a leading . for better matching under JavaNetCookieJar #2722</a></p>
<p>里面核心的有这么一段话：</p>
<p><img src="/img/2018-03-19-https-set-cookies-03.png" alt></p>
<p>提到了两个关键词，『RFC 6265』和『RFC 2965』，然后又提到了okhttp遵循的是RFC 6265协议，而java.net遵循的是RFC 2965协议。通过这些线索，我们最后找到了原因。</p>
<h2 id="HTTP-State-Management-Mechanism"><a href="#HTTP-State-Management-Mechanism" class="headerlink" title="HTTP State Management Mechanism"></a>HTTP State Management Mechanism</h2><p>HTTP State Management Mechanism(Http状态管理机制)，正是它规定了Set-Cookie中domain的写法。根据时间顺序，2000年10月份的<strong><em>RFC 2965</em></strong>协议在前，2011年4月份的<strong><em>RFC 6265</em></strong>在后。</p>
<p><a href="https://www.ietf.org/rfc/rfc2965.txt" target="_blank" rel="noopener">RFC 2965</a></p>
<p><img src="/img/2018-03-19-https-set-cookies-04.png" alt></p>
<p><a href="https://tools.ietf.org/html/rfc6265" target="_blank" rel="noopener">RFC 6265</a></p>
<p><img src="/img/2018-03-19-https-set-cookies-05.png" alt></p>
<p>可以看到，<strong><em>RFC 6265</em></strong> 同时声明了 <strong><em>RFC 2965</em></strong> 过时。</p>
<p>首先要说明的是，无论是哪份协议，都引入了一个概念，<strong>『domain-match』</strong>。请求头部的Set-Cookie的数据如果想合法的存到CookieManager中，需要保证url <strong>domain-match</strong> domain value string。如果不满足这个条件，CookieManager里也就不会有对应的数据。</p>
<h3 id="RFC-2965"><a href="#RFC-2965" class="headerlink" title="RFC 2965"></a>RFC 2965</h3><p>让我们首先看一下RFC 2965是如何定义<strong>domain-match</strong>的？</p>
<p><img src="/img/2018-03-19-https-set-cookies-06.png" alt></p>
<p>这里主机名可以是IP地址，也可以是主机域名。可以很清楚的看到，假设有A和B两个主机名，如何判定A <strong>domain-match</strong> B呢？满足两个条件之一即可：</p>
<ul>
<li>A和B的主机名字符串相等，或者</li>
<li>A是一个主机域名并且其可以看做NB的组合，N是一个非空的字符串，而B的格式必须是是.B，同时B也是主机域名。（所以说x.y.com <strong>domain-match</strong> .y.com,但是并不 <strong>domain-match</strong> y.com）</li>
</ul>
<p>根据这个定义，我们来复盘一下我们业务中的url和domain在<strong><em>RFC 2965</em></strong>的标准下，<strong>domain-match</strong>的情况分别是怎样？</p>
<hr>
<p><strong>业务调整前：</strong></p>
<p>A(login.com), B(login.com)，满足<strong><em>RFC 2965</em></strong>条件一 A equals B，所以业务调整前的A domain-match B。</p>
<p><strong>业务调整后第一次：</strong></p>
<p>A(usa.login.com), B(login.com)，不满足<strong><em>RFC 2965</em></strong>的两个条件任何一个，所以<strong>A not domain-match B</strong>！！</p>
<p><strong>业务调整后第二次：</strong></p>
<p>A(usa.login.com), B(.login.com)，满足<strong><em>RFC 2965</em></strong>条件二，所以A domain-match B ！！</p>
<p><strong>业务调整后第三次：</strong></p>
<p>A(usa.login.com), B(usa.login.com)，再次又满足<strong><em>RFC 2965</em></strong>条件一 A equals B，所以业务调整前的A <strong>domain-match</strong> B。</p>
<hr>
<p>而基于HttpURLConnection封装的网络请求是源自于java.net，遵循<strong><em>RFC 2965</em></strong>，完全符合此前的现象！！</p>
<h3 id="RFC-6265"><a href="#RFC-6265" class="headerlink" title="RFC 6265"></a>RFC 6265</h3><p>让我们再来看看<strong><em>RFC 6265</em></strong>又是怎么定义 <strong>domain-match</strong> 的呢？指的注意的是，这里不再采用A，B这样的说法，而是相对应的用一个字符串(a string)和域名字符串(the domain string)来表示。</p>
<p><img src="/img/2018-03-19-https-set-cookies-07.png" alt></p>
<p>同样也是两个条件满足一个</p>
<ul>
<li>域名字符串和字符串是相同的。（注意，在这一情况时域字符串和字符串都将被规范化为小写）。</li>
<li>以下所有条件同时成立<ul>
<li>域名字符串是该字符串的后缀</li>
<li>该字符串的最后一个不包含在域名字符串的字符是%x2E（“.”）字符。</li>
<li>该字符串是一个主机名（即不是一个IP地址）</li>
</ul>
</li>
</ul>
<p>第二个条件可能有点难理解。尤其是我们该怎么理解这里的『该字符串的最后一个不包含在域字符串的字符是%x2E（“.”）字符。』这句话呢？</p>
<p>假如域字符串是A.com，字符串是B.A.com,那么最后一个不包含在域字符串的字符就是%x2E（“.”）字符（从后向前算）。<br>如果域字符串是.A.com，字符串是B.A.com,那么最后一个不包含在域字符串的字符就是B字符。</p>
<p>同样的。我们来复盘一下两个domain在新标准<strong><em>RFC 6265</em></strong>下，domain-match的情况分别是怎样？</p>
<hr>
<p><strong>业务调整前：</strong></p>
<p>A(login.com), B(login.com)，满足<strong><em>RFC 6265</em></strong>条件一 A equals B，所以业务调整前的A domain-match B。</p>
<p><strong>业务调整后第一次：</strong></p>
<p>A(usa.login.com), B(login.com)，满足<strong><em>RFC 6265</em></strong>的条件二，同样A domain-match B ！！</p>
<p><strong>业务调整后第二次：</strong></p>
<p>A(usa.login.com), B(.login.com)，<strong><em>RFC 6265</em></strong> 的两个条件都不满足，所以<strong>A not domain-match B</strong> ！！</p>
<p><strong>业务调整后第三次：</strong></p>
<p>A(usa.login.com), B(usa.login.com)，再次又满足<strong><em>RFC 6265</em></strong>条件一 A equals B，所以业务调整前的A domain-match B。</p>
<hr>
<p>可以看到，基于新标准<strong><em>RFC 6265</em></strong>okhttp网络库的情况，与该标准描述的情况也完全符合，</p>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>看到这，我们可以先得到一个结论。本次问题的出现，正是不同的网络请求库应用的HTTP State Management Mechanism标准不一致导致的。那么该如何处理呢？</p>
<p>其实很简单，放弃原先从CookieManager中读取的方式(虽然它省事，也符合标准)，直接<strong>从response的header里手动解析</strong>，这样，无论Cookie遵循的是哪种规范，都不影响我们客户端最终读取数据。</p>
<p>事情到这本应该告一段落了，但不死心的程序猿们，想继续深入一下源码，看看到底是哪里的代码导致的问题呢？结果又有了意外发现。</p>
<h2 id="分析源码"><a href="#分析源码" class="headerlink" title="分析源码"></a>分析源码</h2><p>HttpURLConnection这部分没什么好说的，判断<strong>domain-match</strong>的方法也正如前面所说的，基于的是<strong><em>RFC 2965</em></strong>协议的标准。没有leading dot的话是不会判断为<strong>domain-match</strong>的。让我们好奇的是，okhttp基于的虽然是新的协议，但是为什么没有兼容老版本的协议呢？</p>
<p>我们这里的OkHttpClient是这样构造的：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mOkHttpClient = <span class="keyword">new</span> OkHttpClient.Builder()</span><br><span class="line">        .dispatcher(</span><br><span class="line">                <span class="keyword">new</span> Dispatcher(<span class="keyword">new</span> ThreadPoolExecutor(<span class="number">6</span>, Integer.MAX_VALUE, <span class="number">60</span>,</span><br><span class="line">                        TimeUnit.SECONDS, <span class="keyword">new</span> LinkedBlockingQueue&lt;Runnable&gt;(),</span><br><span class="line">                        Util.threadFactory(<span class="string">"OkHttp Dispatcher"</span>, <span class="keyword">false</span>))))</span><br><span class="line">        .connectTimeout(<span class="number">10</span>, TimeUnit.SECONDS)</span><br><span class="line">        .readTimeout(<span class="number">10</span>, TimeUnit.SECONDS)</span><br><span class="line">        .writeTimeout(<span class="number">10</span>, TimeUnit.SECONDS)</span><br><span class="line">        .cookieJar(<span class="keyword">new</span> JavaNetCookieJar(mCookieManager = <span class="keyword">new</span> CookieManager()))</span><br><span class="line">        .build();</span><br></pre></td></tr></table></figure>

<p>可以看到我这里用的cookieJar是JavaNetCookieJar。而在JavaNetCookieJar用到的Cookie这个类发现了domainMatch(HttpUrl url, String domain)：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">domainMatch</span><span class="params">(HttpUrl url, String domain)</span> </span>&#123;</span><br><span class="line">    String urlHost = url.host();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (urlHost.equals(domain)) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">true</span>; <span class="comment">// As in 'example.com' matching 'example.com'.</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (urlHost.endsWith(domain)</span><br><span class="line">        &amp;&amp; urlHost.charAt(urlHost.length() - domain.length() - <span class="number">1</span>) == <span class="string">'.'</span></span><br><span class="line">        &amp;&amp; !verifyAsIpAddress(urlHost)) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">true</span>; <span class="comment">// As in 'example.com' matching 'www.example.com'.</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>而调domainMatch(HttpUrl url, String domain)之前，domain有经过处理。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns a domain string like &#123;<span class="doctag">@code</span> example.com&#125; for an input domain like &#123;<span class="doctag">@code</span> EXAMPLE.COM&#125;</span></span><br><span class="line"><span class="comment"> * or &#123;<span class="doctag">@code</span> .example.com&#125;.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">parseDomain</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (s.endsWith(<span class="string">"."</span>)) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//注意这里！！</span></span><br><span class="line">  <span class="keyword">if</span> (s.startsWith(<span class="string">"."</span>)) &#123;</span><br><span class="line">    s = s.substring(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  String canonicalDomain = domainToAscii(s);</span><br><span class="line">  <span class="keyword">if</span> (canonicalDomain == <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> canonicalDomain;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们看到这里JavaNetCookieJar主动的去除掉了domain前面的leading dot！！额？看到这就奇怪了，也就是说，其实okhttp是兼容了老版本协议带leading dot的情况。也就是说A(usa.login.com), B(.login.com)这种情况，B(.login.com)移除掉leading dot就变成B(login.com), 应该能A <strong>domain-match</strong> B 啊？</p>
<p>看到这，我不禁怀疑起来，那我们业务之前遇到的cookie取不到对应数据的原因到底是什么呢？这时，我又看到了这个issue：</p>
<p><a href="https://github.com/square/okhttp/issues/2549" target="_blank" rel="noopener">okhttp Cookie strips off leading . from domain #2549</a></p>
<p><img src="/img/2018-03-19-https-set-cookies-10.png" alt></p>
<p>通过这份issue我们可以看到，这是okhttp当初的一个bug，虽然移除掉domain前面的leading dot，但是由于Android本身的CookiePolicy为ACCEPT_ORIGINAL_SERVER, 如果使用时结合JavaNetCookieStore和CookieManger时，这样的cookie数据是会被抛弃的!!CookieManager自然拿不到Token了。</p>
<p>并且这个bug在2016年7月份就commit修复。原来是我们项目中的okhttp版本号太旧了。因为项目中集成ReactNative的关系，目前使用的还是3.4.1的老版本，升级的话需要ReactNative这边各种依赖库同时升级，所以当前项目中的okhttp还是很早前的版本。不过正所谓无巧不成书，正好我们乘着这个机会，来看一下旧版本的okhttp为什么丢掉了这个cookie字段呢？</p>
<p>来看一下 JavaNetCookieJar.class</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveFromResponse</span><span class="params">(HttpUrl url, List&lt;Cookie&gt; cookies)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (cookieHandler != <span class="keyword">null</span>) &#123;</span><br><span class="line">      List&lt;String&gt; cookieStrings = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">      <span class="keyword">for</span> (Cookie cookie : cookies) &#123;</span><br><span class="line">        <span class="comment">//问题出在这个cookie.toString()，在toString()之前，cookie的domain的leading dot就被抛删掉了</span></span><br><span class="line">        cookieStrings.add(cookie.toString());</span><br><span class="line">      &#125;</span><br><span class="line">      Map&lt;String, List&lt;String&gt;&gt; multimap = Collections.singletonMap(<span class="string">"Set-Cookie"</span>, cookieStrings);</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        cookieHandler.put(url.uri(), multimap);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        Platform.get().log(WARN, <span class="string">"Saving cookies failed for "</span> + url.resolve(<span class="string">"/..."</span>), e);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>再来看一下Cookie的toString()方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    StringBuilder result = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">    result.append(name);</span><br><span class="line">    result.append(<span class="string">'='</span>);</span><br><span class="line">    result.append(value);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (persistent) &#123;</span><br><span class="line">      <span class="keyword">if</span> (expiresAt == Long.MIN_VALUE) &#123;</span><br><span class="line">        result.append(<span class="string">"; max-age=0"</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        result.append(<span class="string">"; expires="</span>).append(HttpDate.format(<span class="keyword">new</span> Date(expiresAt)));</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!hostOnly) &#123;</span><br><span class="line">      <span class="comment">//问题在这里，还记得okhttp将domain的leading dot给移除了对嘛？这里原本domain已经不是.login.com,而是login.com</span></span><br><span class="line">      result.append(<span class="string">"; domain="</span>).append(domain);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    result.append(<span class="string">"; path="</span>).append(path);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (secure) &#123;</span><br><span class="line">      result.append(<span class="string">"; secure"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (httpOnly) &#123;</span><br><span class="line">      result.append(<span class="string">"; httponly"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>前面我们提到JavaNetCookieJar配合Android的CookieManager会导致这个bug。果不其然我们看到put(URI uri, Map&lt;String, List<string>&gt; responseHeaders)方法，<br>我们发现，cookieJar存cookie的时候，不是所有的cookie都被存下来了。而是有一步过滤！！也就是这个shouldAcceptInternal()方法,那这到底过滤掉什么cookie呢？</string></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(URI uri, Map&lt;String, List&lt;String&gt;&gt; responseHeaders)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">//...省略若干代码...</span></span><br><span class="line">    <span class="comment">// Domain  Defaults to the effective request-host.  (Note that because</span></span><br><span class="line">    <span class="comment">// there is no dot at the beginning of effective request-host,</span></span><br><span class="line">    <span class="comment">// the default Domain can only domain-match itself.)</span></span><br><span class="line">    <span class="keyword">if</span> (cookie.getDomain() == <span class="keyword">null</span>) &#123;</span><br><span class="line">        cookie.setDomain(uri.getHost());</span><br><span class="line">    &#125;</span><br><span class="line">    String ports = cookie.getPortlist();</span><br><span class="line">    <span class="keyword">if</span> (ports != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> port = uri.getPort();</span><br><span class="line">        <span class="keyword">if</span> (port == -<span class="number">1</span>) &#123;</span><br><span class="line">            port = <span class="string">"https"</span>.equals(uri.getScheme()) ? <span class="number">443</span> : <span class="number">80</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (ports.isEmpty()) &#123;</span><br><span class="line">            <span class="comment">// Empty port list means this should be restricted</span></span><br><span class="line">            <span class="comment">// to the incoming URI port</span></span><br><span class="line">            cookie.setPortlist(<span class="string">""</span> + port );</span><br><span class="line">            <span class="keyword">if</span> (shouldAcceptInternal(uri, cookie)) &#123;</span><br><span class="line">                cookieJar.add(uri, cookie);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// Only store cookies with a port list</span></span><br><span class="line">            <span class="comment">// IF the URI port is in that list, as per</span></span><br><span class="line">            <span class="comment">// RFC 2965 section 3.3.2</span></span><br><span class="line">            <span class="keyword">if</span> (isInPortList(ports, port) &amp;&amp;</span><br><span class="line">                  shouldAcceptInternal(uri, cookie)) &#123;</span><br><span class="line">                <span class="comment">//只有符合条件的cookie，才会被存下来塞到CookieManager中</span></span><br><span class="line">                cookieJar.add(uri, cookie);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (shouldAcceptInternal(uri, cookie)) &#123;</span><br><span class="line">            cookieJar.add(uri, cookie);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>再结合CookiePolicy的代码一看就了然了</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CookiePolicy</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//...省略若干代码...</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * One pre-defined policy which only accepts cookies from original server.</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> CookiePolicy ACCEPT_ORIGINAL_SERVER  = <span class="keyword">new</span> CookiePolicy()&#123;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">shouldAccept</span><span class="params">(URI uri, HttpCookie cookie)</span> </span>&#123;</span><br><span class="line">          <span class="keyword">return</span> HttpCookie.domainMatches(cookie.getDomain(), uri.getHost());</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>没错，如果CookiePolicy是ACCEPT_ORIGINAL_SERVER的话，过滤掉的正是不符合HttpCookie.domainMatches()的cookie。而HttpCookie.domainMatches(),是遵循老版本<strong><em>RFC 2965</em></strong>协议的！！okhttp把domain的leading dot去掉，虽然通过了自己本身的domainMatch()方法，但是没想到，<strong>Android系统又过滤了一道，真是太坑了</strong>！！</p>
<p>那okhttp是如何修复这个bug的呢？大家可以参考okhttp这个commiit</p>
<p><a href="https://github.com/square/okhttp/commit/fd509b937c4a5438fe02ddf06ade5ad56736af5d" target="_blank" rel="noopener">Inject a leading . for better matching under JavaNetCookieJar</a></p>
<p>其实也很简单，就是第一个okhttp的domainMatch()方法判断前，去掉leading dot。然后在第二步Android系统的domainMatch()方法判断前，再把leading dot主动加回来！！</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> forObsoleteRfc2965 true to include a leading &#123;<span class="doctag">@code</span> .&#125; on the domain pattern. This is</span></span><br><span class="line"><span class="comment"> *     necessary for &#123;<span class="doctag">@code</span> example.com&#125; to match &#123;<span class="doctag">@code</span> www.example.com&#125; under RFC 2965. This</span></span><br><span class="line"><span class="comment"> *     extra dot is ignored by more recent specifications.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">String <span class="title">toString</span><span class="params">(<span class="keyword">boolean</span> forObsoleteRfc2965)</span> </span>&#123;</span><br><span class="line">  StringBuilder result = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">  result.append(name);</span><br><span class="line">  result.append(<span class="string">'='</span>);</span><br><span class="line">  result.append(value);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (persistent) &#123;</span><br><span class="line">    <span class="keyword">if</span> (expiresAt == Long.MIN_VALUE) &#123;</span><br><span class="line">      result.append(<span class="string">"; max-age=0"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      result.append(<span class="string">"; expires="</span>).append(HttpDate.format(<span class="keyword">new</span> Date(expiresAt)));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!hostOnly) &#123;</span><br><span class="line">    result.append(<span class="string">"; domain="</span>);</span><br><span class="line">    <span class="keyword">if</span> (forObsoleteRfc2965) &#123;</span><br><span class="line">      <span class="comment">//就是这里，为了兼容RFC 2965协议，主动补充一个leading dot</span></span><br><span class="line">      result.append(<span class="string">"."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    result.append(domain);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  result.append(<span class="string">"; path="</span>).append(path);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (secure) &#123;</span><br><span class="line">    result.append(<span class="string">"; secure"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (httpOnly) &#123;</span><br><span class="line">    result.append(<span class="string">"; httponly"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> result.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>总结一下，啰哩啰嗦说了这么多，其实可以简单总结成以下几点：</p>
<ol>
<li><p>HTTP State Management Mechanism协议针对domain-match的定义，从<strong><em>RFC 2965</em></strong>到<strong><em>RFC 6265</em></strong>有一个条件发生了很大的变化，也就是要不要leading dot的问题。<strong><em>RFC 2965</em></strong> 协议是要求一定要有leading dot的，而<strong><em>RFC 6265</em></strong>协议则明确要求不可以有leading dot。</p>
</li>
<li><p>在Android的网络请求库中，okhttp遵循的是<strong><em>RFC 6265</em></strong>协议，而java.net遵循的是<strong><em>RFC 2965</em></strong>协议。这是一个大坑，也就是意味着，如果我们采用从CookieManager中读取数据的方式的话，都需要注意着ddomain-match定义的兼容性。</p>
</li>
<li><p>okhttp不愧是Android最优秀的网络请求库，最新版本已经修复了leading dot导致的在Android CookieManager中使用JavaNetCookieJar的bug。也就是说，使用okhttp是可以做到两种协议在domain-match定义上的兼容。这对开发者来说是好事情。但是，可能你和我们一样，项目中引入了ReactNative导致很多库的版本不是最新版，还带着老版本的bug。所以，<strong>强烈建议Android开发者手动从Header中解析Set-Cookie，而不是依赖CookieManager</strong>。</p>
</li>
<li><p>问题本身很简单，但是表象可能很复杂。所以，遇到问题我们要尽可能的深入，找到原因。</p>
</li>
</ol>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ol>
<li><a href="https://maimai.cn/article/detail?fid=305722856" target="_blank" rel="noopener">HTTP、Cookie、Session、token</a></li>
<li><a href="https://segmentfault.com/a/1190000004556040" target="_blank" rel="noopener">聊一聊 cookie</a></li>
<li><a href="https://tools.ietf.org/html/rfc6265" target="_blank" rel="noopener">HTTP State Management Mechanism 6265</a></li>
<li><a href="https://www.ietf.org/rfc/rfc2965.txt" target="_blank" rel="noopener">HTTP State Management Mechanism 2965</a></li>
<li><a href="https://github.com/renaesop/blog/issues/4" target="_blank" rel="noopener">cookie规范（RFC 6265）翻译</a></li>
<li><a href="http://blog.csdn.net/xuejunzhao0423/article/details/44407427" target="_blank" rel="noopener">HTTP 状态管理机制——RFC6265翻译文档</a></li>
<li><a href="https://segmentfault.com/a/1190000006793412" target="_blank" rel="noopener">Http 状态管理机制(cookie) (译文)</a></li>
</ol>
]]></content>
      
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> Network </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[记一次APP集成facebook SDK引发的事件及调查]]></title>
      <url>http://wangyeming.github.com/2018/01/04/facebook-sdk-cta/</url>
      <content type="html"><![CDATA[<p>大家知道，工信部要求，所有app首次启动前，必须弹出用户授权页面，只有用户手动授权允许了app使用数据网络，app才能发起网络请求。</p>
<p><img src="/img/2018-01-04-facebook-sdk-cta-01.jpeg" alt="米家app的CTA授权页"></p>
<p>但这次集成了facebook SDK后，我们遇到了一个奇怪的问题，到底是什么问题呢？</p>
<a id="more"></a>

<p>最近，在『米家』app的开发过程中，我们遇到了一个问题, 在app首次启动，用户授权前，我们抓到了一个facebook的网络请求。</p>
<p><img src="/img/2018-01-04-facebook-sdk-cta-02.png" alt></p>
<p>初步判断是集成facebook SDk发出的，于是我们对代码进行了排查，尤其是涉及facebook SDk初始化的地方进行了细致排查。但是意外的发现，在用户手动允许授权以前，app本身没有在任何地方调facebook的代码。也就是说，<br>facebook SDK在app主动调起它之前，主动进行了初始化。我们进入SDK内部，首先找到的是SDK初始化函数：</p>
<pre><code><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * This function initializes the Facebook SDK. This function is called automatically on app</span></span><br><span class="line"><span class="comment"> * start up if the proper entries are listed in the AndroidManifest, such as the facebook</span></span><br><span class="line"><span class="comment"> * app id. This method can bee called manually if needed.</span></span><br><span class="line"><span class="comment"> * The behavior of Facebook SDK functions are undetermined if this function is not called.</span></span><br><span class="line"><span class="comment"> * It should be called as early as possible.</span></span><br><span class="line"><span class="comment"> * As part of SDK initialization basic auto logging of app events will occur, this can be</span></span><br><span class="line"><span class="comment"> * controlled via 'com.facebook.sdk.AutoLogAppEventsEnabled' manifest setting</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> applicationContext The application context</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Deprecated</span> &#123;<span class="doctag">@link</span> #sdkInitialize(Context)&#125; and</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> AppEventsLogger#activateApp(Application)&#125; are called automatically on application</span></span><br><span class="line"><span class="comment"> * start. Automatic event logging from 'activateApp' can be controlled via the</span></span><br><span class="line"><span class="comment"> * 'com.facebook.sdk.AutoLogAppEventsEnabled' manifest setting.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Deprecated</span></span><br><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"deprecation"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">sdkInitialize</span><span class="params">(Context applicationContext)</span> </span>&#123;</span><br><span class="line">    FacebookSdk.sdkInitialize(applicationContext, <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><p>从facebook SDK的<a href="https://developers.facebook.com/docs/android/" target="_blank" rel="noopener">官网文档</a>和代码注释来看，应该是SDK本身在Application启动时自动初始化了代码。虽然很费解是如何做到的，但我们依然把断点设在了该方法处，开始运行debug模式。因为是app启动时的调试，我们选择了完整安装apk进行调试。</p>
<p>果不其然，我们在Applicaiton启动时拦截到sdkInitialize方法被调起，查看方法调用栈，我们找到了线索。</p>
<p><img src="/img/2018-01-04-facebook-sdk-cta-03.png" alt></p>
<p>我们找到了元凶，facebook SDK内部有一个FacebookInitProvider类，继承自ContentProvider，并在onCreate()方法中会去初始化SDK</p>
<pre><code><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">FacebookInitProvider</span> <span class="keyword">extends</span> <span class="title">ContentProvider</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = FacebookInitProvider.class.getSimpleName();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"deprecation"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            FacebookSdk.sdkInitialize(getContext());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">            Log.i(TAG, <span class="string">"Failed to auto initialize the Facebook SDK"</span>, ex);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ...省略代码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><p>而这个FacebookInitProvider,在facebook SDK的manifest文件中，有静态声明：</p>
<p><img src="/img/2018-01-04-facebook-sdk-cta-04.png" alt></p>
<p>而我们知道，Android项目中所有模块和依赖aar包的manifest文件，最终会merge成一个总的manifest文件，所以这份ContentProvider的声明最后也会在我们app里生效。</p>
<p>相信看到这，大家大致了解了本次事件的原因，相信有不少人和我当初一样会有两个疑问</p>
<ol>
<li>第一是为什么，静态声明的ContentProvider会自动在Application启动时(具体点就是Application onCreate())方法执行前，自动执行呢？</li>
<li>其次是如何解决该问题？(毕竟不符合CTA要求的话，app是审核不通过的)</li>
</ol>
<p>第一个问题<a href="https://juejin.im/post/59c24b256fb9a00a496e5ec4" target="_blank" rel="noopener">android分析ContentProvider onCreate()在 Application onCreate()之前执行</a>,文章分析了Android源码，证实了<strong>ContentProvider onCreate()在 Application onCreate()之前执行</strong>这个现象，这里就不多说了。</p>
<p>其次是如何解决这个问题呢？facebook那边看起来是没有提供什么接口可以解决，也不可能这里提供一个思路，我们可以尝试手动在apk打包过程中，把最终生成的总manifest里面的FacebookInitProvider给替换掉。当然，为了保证app能正常工作呢？我们可以自己实现一个『FacebookInitProvider』，其它实现都照搬，只有onCreate()里面初始化的代码给屏蔽掉。可以这么做：</p>
<p>先定义个替换类</p>
<pre><code><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">FacebookInitProviderReplacer</span> <span class="keyword">extends</span> <span class="title">ContentProvider</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"deprecation"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//屏蔽调初始化代码</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ...省略代码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><p>然后在打包过程中，手动替换类名：</p>
<pre><code><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">applicationVariants.all &#123; variant -&gt;</span><br><span class="line">    variant.outputs.each &#123; output -&gt;</span><br><span class="line">        output.processManifest.doLast &#123;</span><br><span class="line">            String manifestPath = <span class="string">"$manifestOutputDirectory/AndroidManifest.xml"</span></span><br><span class="line">            <span class="comment">// Stores the contents of the manifest.</span></span><br><span class="line">            <span class="keyword">def</span> manifestOutFile = file(manifestPath)</span><br><span class="line">            <span class="keyword">if</span>(manifestOutFile.exists()) &#123;</span><br><span class="line">                <span class="comment">//xxx表示具体的包名</span></span><br><span class="line">                <span class="keyword">def</span> newFileContents = manifestOutFile.getText(<span class="string">'UTF-8'</span>).replace(<span class="string">"com.facebook.internal.FacebookInitProvider"</span>, <span class="string">"</span></span><br><span class="line"><span class="string">                    xxx.FacebookInitProviderReplacer"</span>)</span><br><span class="line">                manifestOutFile.write(newFileContents, <span class="string">'UTF-8'</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><p>重新打包，验证，OK~</p>
]]></content>
      
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[聊聊Android的静态代理插件框架原理[04]--Activity静态代理之资源加载(下)]]></title>
      <url>http://wangyeming.github.com/2017/09/11/android-proxy-plugin-frame-04/</url>
      <content type="html"><![CDATA[<p>上一篇我们介绍了Android资源加载以及宿主如何加载插件中的资源的问题。文末我也提出了一个问题，多个插件如果存在包名相同的view的话，如何应对LayoutInflater加载布局会根据view的包名对view进行相应缓存导致的bug呢?</p>
<p><img src="/img/2017-09-11-android-proxy-plugin-frame-04-01.png" alt></p>
<a id="more"></a>

<h1 id="Activity静态代理之资源加载-下"><a href="#Activity静态代理之资源加载-下" class="headerlink" title="Activity静态代理之资源加载(下)"></a>Activity静态代理之资源加载(下)</h1><p>Android开发者对于<a href="https://developer.android.com/reference/android/view/LayoutInflater.html" target="_blank" rel="noopener">LayoutInflate</a>肯定都不陌生，我们通过getLayoutInflater() 或者 getSystemService(Class) 获取到系统提供给我们的实例，去将一个xml文件转换成View对象。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">LayoutInflater layoutInflaterInstance = LayoutInflater.from(context);</span><br><span class="line">layoutInflaterInstance.inflate(<span class="meta">@LayoutRes</span> <span class="keyword">int</span> resource, <span class="meta">@Nullable</span> ViewGroup root, <span class="keyword">boolean</span> attachToRoot);</span><br></pre></td></tr></table></figure>

<p>我们看LayoutInflater.from(context)方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Obtains the LayoutInflater from the given context.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> LayoutInflater <span class="title">from</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">    LayoutInflater LayoutInflater =</span><br><span class="line">            (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);</span><br><span class="line">    <span class="keyword">if</span> (LayoutInflater == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> AssertionError(<span class="string">"LayoutInflater not found."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> LayoutInflater;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>看到这就很清楚了，LayoutInflate实例其实是系统服务提供。开头我们说到LayoutInflate默认会根据包名缓存View，这到底是怎么回事呢？我们从inflate(@LayoutRes int resource, @Nullable ViewGroup root, boolean attachToRoot)这个方法的源码看起：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> View <span class="title">inflate</span><span class="params">(@LayoutRes <span class="keyword">int</span> resource, @Nullable ViewGroup root, <span class="keyword">boolean</span> attachToRoot)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Resources res = getContext().getResources();</span><br><span class="line">    <span class="keyword">if</span> (DEBUG) &#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"INFLATING from resource: \""</span> + res.getResourceName(resource) + <span class="string">"\" ("</span></span><br><span class="line">                + Integer.toHexString(resource) + <span class="string">")"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> XmlResourceParser parser = res.getLayout(resource);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> inflate(parser, root, attachToRoot);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        parser.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中XmlResourceParser是xml解析器，它不是我们今天的重点，我们还是接着看inflate过程：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> View <span class="title">inflate</span><span class="params">(XmlPullParser parser, @Nullable ViewGroup root, <span class="keyword">boolean</span> attachToRoot)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (mConstructorArgs) &#123;</span><br><span class="line">        Trace.traceBegin(Trace.TRACE_TAG_VIEW, <span class="string">"inflate"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> Context inflaterContext = mContext;</span><br><span class="line">        <span class="keyword">final</span> AttributeSet attrs = Xml.asAttributeSet(parser);</span><br><span class="line">        Context lastContext = (Context) mConstructorArgs[<span class="number">0</span>];</span><br><span class="line">        mConstructorArgs[<span class="number">0</span>] = inflaterContext;</span><br><span class="line">        View result = root;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// Look for the root node.</span></span><br><span class="line">            <span class="keyword">int</span> type;</span><br><span class="line">            <span class="keyword">while</span> ((type = parser.next()) != XmlPullParser.START_TAG &amp;&amp;</span><br><span class="line">                    type != XmlPullParser.END_DOCUMENT) &#123;</span><br><span class="line">                <span class="comment">// Empty</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (type != XmlPullParser.START_TAG) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> InflateException(parser.getPositionDescription()</span><br><span class="line">                        + <span class="string">": No start tag found!"</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">final</span> String name = parser.getName();</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (DEBUG) &#123;</span><br><span class="line">                System.out.println(<span class="string">"**************************"</span>);</span><br><span class="line">                System.out.println(<span class="string">"Creating root view: "</span></span><br><span class="line">                        + name);</span><br><span class="line">                System.out.println(<span class="string">"**************************"</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (TAG_MERGE.equals(name)) &#123;</span><br><span class="line">                <span class="keyword">if</span> (root == <span class="keyword">null</span> || !attachToRoot) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> InflateException(<span class="string">"&lt;merge /&gt; can be used only with a valid "</span></span><br><span class="line">                            + <span class="string">"ViewGroup root and attachToRoot=true"</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                rInflate(parser, root, inflaterContext, attrs, <span class="keyword">false</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// Temp is the root view that was found in the xml</span></span><br><span class="line">                <span class="comment">// 通过createViewFromTag()方法，生成View</span></span><br><span class="line">                <span class="keyword">final</span> View temp = createViewFromTag(root, name, inflaterContext, attrs);</span><br><span class="line"></span><br><span class="line">                ViewGroup.LayoutParams params = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (root != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (DEBUG) &#123;</span><br><span class="line">                        System.out.println(<span class="string">"Creating params from root: "</span> +</span><br><span class="line">                                root);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// Create layout params that match root, if supplied</span></span><br><span class="line">                    params = root.generateLayoutParams(attrs);</span><br><span class="line">                    <span class="keyword">if</span> (!attachToRoot) &#123;</span><br><span class="line">                        <span class="comment">// Set the layout params for temp if we are not</span></span><br><span class="line">                        <span class="comment">// attaching. (If we are, we use addView, below)</span></span><br><span class="line">                        temp.setLayoutParams(params);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (DEBUG) &#123;</span><br><span class="line">                    System.out.println(<span class="string">"-----&gt; start inflating children"</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// Inflate all children under temp against its context.</span></span><br><span class="line">                rInflateChildren(parser, temp, attrs, <span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (DEBUG) &#123;</span><br><span class="line">                    System.out.println(<span class="string">"-----&gt; done inflating children"</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// We are supposed to attach all the views we found (int temp)</span></span><br><span class="line">                <span class="comment">// to root. Do that now.</span></span><br><span class="line">                <span class="keyword">if</span> (root != <span class="keyword">null</span> &amp;&amp; attachToRoot) &#123;</span><br><span class="line">                    root.addView(temp, params);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// Decide whether to return the root that was passed in or the</span></span><br><span class="line">                <span class="comment">// top view found in xml.</span></span><br><span class="line">                <span class="keyword">if</span> (root == <span class="keyword">null</span> || !attachToRoot) &#123;</span><br><span class="line">                    result = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (XmlPullParserException e) &#123;</span><br><span class="line">            <span class="keyword">final</span> InflateException ie = <span class="keyword">new</span> InflateException(e.getMessage(), e);</span><br><span class="line">            ie.setStackTrace(EMPTY_STACK_TRACE);</span><br><span class="line">            <span class="keyword">throw</span> ie;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">final</span> InflateException ie = <span class="keyword">new</span> InflateException(parser.getPositionDescription()</span><br><span class="line">                    + <span class="string">": "</span> + e.getMessage(), e);</span><br><span class="line">            ie.setStackTrace(EMPTY_STACK_TRACE);</span><br><span class="line">            <span class="keyword">throw</span> ie;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// Don't retain static reference on context.</span></span><br><span class="line">            mConstructorArgs[<span class="number">0</span>] = lastContext;</span><br><span class="line">            mConstructorArgs[<span class="number">1</span>] = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">            Trace.traceEnd(Trace.TRACE_TAG_VIEW);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们可以看到，其中有一个createViewFromTag(）方法，生成了实际的View对象：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> View <span class="title">createViewFromTag</span><span class="params">(View parent, String name, Context context, AttributeSet attrs)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> createViewFromTag(parent, name, context, attrs, <span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>接着看：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">View <span class="title">createViewFromTag</span><span class="params">(View parent, String name, Context context, AttributeSet attrs,</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">boolean</span> ignoreThemeAttr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (name.equals(<span class="string">"view"</span>)) &#123;</span><br><span class="line">        name = attrs.getAttributeValue(<span class="keyword">null</span>, <span class="string">"class"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Apply a theme wrapper, if allowed and one is specified.</span></span><br><span class="line">    <span class="keyword">if</span> (!ignoreThemeAttr) &#123;</span><br><span class="line">        <span class="keyword">final</span> TypedArray ta = context.obtainStyledAttributes(attrs, ATTRS_THEME);</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> themeResId = ta.getResourceId(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> (themeResId != <span class="number">0</span>) &#123;</span><br><span class="line">            context = <span class="keyword">new</span> ContextThemeWrapper(context, themeResId);</span><br><span class="line">        &#125;</span><br><span class="line">        ta.recycle();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (name.equals(TAG_1995)) &#123;</span><br><span class="line">        <span class="comment">// Let's party like it's 1995!</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BlinkLayout(context, attrs);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        View view;</span><br><span class="line">        <span class="keyword">if</span> (mFactory2 != <span class="keyword">null</span>) &#123;</span><br><span class="line">            view = mFactory2.onCreateView(parent, name, context, attrs);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mFactory != <span class="keyword">null</span>) &#123;</span><br><span class="line">            view = mFactory.onCreateView(name, context, attrs);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            view = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (view == <span class="keyword">null</span> &amp;&amp; mPrivateFactory != <span class="keyword">null</span>) &#123;</span><br><span class="line">            view = mPrivateFactory.onCreateView(parent, name, context, attrs);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (view == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">final</span> Object lastContext = mConstructorArgs[<span class="number">0</span>];</span><br><span class="line">            mConstructorArgs[<span class="number">0</span>] = context;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (-<span class="number">1</span> == name.indexOf(<span class="string">'.'</span>)) &#123;</span><br><span class="line">                    <span class="comment">//系统控件</span></span><br><span class="line">                    view = onCreateView(parent, name, attrs);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">//自定义控件</span></span><br><span class="line">                    view = createView(name, <span class="keyword">null</span>, attrs);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                mConstructorArgs[<span class="number">0</span>] = lastContext;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> view;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InflateException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> e;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">        <span class="keyword">final</span> InflateException ie = <span class="keyword">new</span> InflateException(attrs.getPositionDescription()</span><br><span class="line">                + <span class="string">": Error inflating class "</span> + name, e);</span><br><span class="line">        ie.setStackTrace(EMPTY_STACK_TRACE);</span><br><span class="line">        <span class="keyword">throw</span> ie;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        <span class="keyword">final</span> InflateException ie = <span class="keyword">new</span> InflateException(attrs.getPositionDescription()</span><br><span class="line">                + <span class="string">": Error inflating class "</span> + name, e);</span><br><span class="line">        ie.setStackTrace(EMPTY_STACK_TRACE);</span><br><span class="line">        <span class="keyword">throw</span> ie;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里我们看到，View的创建调用的方法，有这么几个优先级：</p>
<p>mFactory2 &gt; mFactory &gt; mPrivateFactory &gt; onCreateView(系统控件) / createView(非系统控件)</p>
<p>那我们所说的View的缓存，其实就是出现在createView方法内部：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> View <span class="title">createView</span><span class="params">(String name, String prefix, AttributeSet attrs)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> ClassNotFoundException, InflateException </span>&#123;</span><br><span class="line">    Constructor&lt;? extends View&gt; constructor = sConstructorMap.get(name);</span><br><span class="line">    <span class="keyword">if</span> (constructor != <span class="keyword">null</span> &amp;&amp; !verifyClassLoader(constructor)) &#123;</span><br><span class="line">        constructor = <span class="keyword">null</span>;</span><br><span class="line">        sConstructorMap.remove(name);</span><br><span class="line">    &#125;</span><br><span class="line">    Class&lt;? extends View&gt; clazz = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Trace.traceBegin(Trace.TRACE_TAG_VIEW, name);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (constructor == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// Class not found in the cache, see if it's real, and try to add it</span></span><br><span class="line">            clazz = mContext.getClassLoader().loadClass(</span><br><span class="line">                    prefix != <span class="keyword">null</span> ? (prefix + name) : name).asSubclass(View.class);</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (mFilter != <span class="keyword">null</span> &amp;&amp; clazz != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">boolean</span> allowed = mFilter.onLoadClass(clazz);</span><br><span class="line">                <span class="keyword">if</span> (!allowed) &#123;</span><br><span class="line">                    failNotAllowed(name, prefix, attrs);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            constructor = clazz.getConstructor(mConstructorSignature);</span><br><span class="line">            constructor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">            sConstructorMap.put(name, constructor);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// If we have a filter, apply it to cached constructor</span></span><br><span class="line">            <span class="keyword">if</span> (mFilter != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">// Have we seen this name before?</span></span><br><span class="line">                Boolean allowedState = mFilterMap.get(name);</span><br><span class="line">                <span class="keyword">if</span> (allowedState == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="comment">// New class -- remember whether it is allowed</span></span><br><span class="line">                    clazz = mContext.getClassLoader().loadClass(</span><br><span class="line">                            prefix != <span class="keyword">null</span> ? (prefix + name) : name).asSubclass(View.class);</span><br><span class="line">                    </span><br><span class="line">                    <span class="keyword">boolean</span> allowed = clazz != <span class="keyword">null</span> &amp;&amp; mFilter.onLoadClass(clazz);</span><br><span class="line">                    mFilterMap.put(name, allowed);</span><br><span class="line">                    <span class="keyword">if</span> (!allowed) &#123;</span><br><span class="line">                        failNotAllowed(name, prefix, attrs);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (allowedState.equals(Boolean.FALSE)) &#123;</span><br><span class="line">                    failNotAllowed(name, prefix, attrs);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Object[] args = mConstructorArgs;</span><br><span class="line">        args[<span class="number">1</span>] = attrs;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> View view = constructor.newInstance(args);</span><br><span class="line">        <span class="keyword">if</span> (view <span class="keyword">instanceof</span> ViewStub) &#123;</span><br><span class="line">            <span class="comment">// Use the same context when inflating ViewStub later.</span></span><br><span class="line">            <span class="keyword">final</span> ViewStub viewStub = (ViewStub) view;</span><br><span class="line">            viewStub.setLayoutInflater(cloneInContext((Context) args[<span class="number">0</span>]));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> view;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</span><br><span class="line">        <span class="keyword">final</span> InflateException ie = <span class="keyword">new</span> InflateException(attrs.getPositionDescription()</span><br><span class="line">                + <span class="string">": Error inflating class "</span> + (prefix != <span class="keyword">null</span> ? (prefix + name) : name), e);</span><br><span class="line">        ie.setStackTrace(EMPTY_STACK_TRACE);</span><br><span class="line">        <span class="keyword">throw</span> ie;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">catch</span> (ClassCastException e) &#123;</span><br><span class="line">        <span class="comment">// If loaded class is not a View subclass</span></span><br><span class="line">        <span class="keyword">final</span> InflateException ie = <span class="keyword">new</span> InflateException(attrs.getPositionDescription()</span><br><span class="line">                + <span class="string">": Class is not a View "</span> + (prefix != <span class="keyword">null</span> ? (prefix + name) : name), e);</span><br><span class="line">        ie.setStackTrace(EMPTY_STACK_TRACE);</span><br><span class="line">        <span class="keyword">throw</span> ie;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">        <span class="comment">// If loadClass fails, we should propagate the exception.</span></span><br><span class="line">        <span class="keyword">throw</span> e;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        <span class="keyword">final</span> InflateException ie = <span class="keyword">new</span> InflateException(</span><br><span class="line">                attrs.getPositionDescription() + <span class="string">": Error inflating class "</span></span><br><span class="line">                        + (clazz == <span class="keyword">null</span> ? <span class="string">"&lt;unknown&gt;"</span> : clazz.getName()), e);</span><br><span class="line">        ie.setStackTrace(EMPTY_STACK_TRACE);</span><br><span class="line">        <span class="keyword">throw</span> ie;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        Trace.traceEnd(Trace.TRACE_TAG_VIEW);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>sConstructorMap是什么呢？其实就是<strong>根据View的包名缓存了View的构造函数</strong>。正常情况下，相同包名的view有且只有一个，所以这样缓存是完全没有问题的。但是插件化之后，不同的插件包完全可能存在包名相同的View，如果还采用默认的缓存方法的话，肯定会有问题的。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> HashMap&lt;String, Constructor&lt;? extends View&gt;&gt; sConstructorMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br></pre></td></tr></table></figure>

<p>看到这里，有的小伙伴可能存在疑惑了，java里类怎么能包名相同呢？其实包名相同并不是bug，还记得我们系列的前文提到的ClassLoader类吗？通过反射拿到的类，只有ClassLoader和包名都相同，才能确定是同一个类。显然，这也给我们提供了一个思路，插件化的view，不仅需要包名相同，也要判断ClassLoader相同才认为是一个类。</p>
<p>那如何解决这个问题呢？一个比较简单的处理方法就是，不同的插件使用不同的LayoutInflate实例,那如何创建LayoutInflate实例呢？<br>我们注意到LayoutInflate API文档有这么一句话：</p>
<pre><code>To create a new LayoutInflater with an additional LayoutInflater.Factory for your own views, 
you can use cloneInContext(Context) to clone an existing ViewFactory, 
and then call setFactory(LayoutInflater.Factory) on it to include your Factory.</code></pre><p>好的，那一个简单的LayoutInflaterManager就设计出来了：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LayoutInflaterManager</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">LayoutInflaterManager</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> LayoutInflaterManager sInstance = <span class="keyword">new</span> LayoutInflaterManager();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> LayoutInflaterManager <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sInstance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Map&lt;AssetManager, LayoutInflater&gt; mLayoutInflaterCache = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> LayoutInflater <span class="title">getLayoutInflater</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        LayoutInflater layoutInflater = mLayoutInflaterCache.get(context.getAssets());</span><br><span class="line">        <span class="keyword">if</span> (layoutInflater == <span class="keyword">null</span>) &#123;</span><br><span class="line">            layoutInflater = LayoutInflater.from(context).cloneInContext(context);</span><br><span class="line">            LayoutInflaterFactory factory = <span class="keyword">new</span> LayoutInflaterFactory();</span><br><span class="line">            layoutInflater.setFactory2(factory);</span><br><span class="line">            mLayoutInflaterCache.put(context.getAssets(), layoutInflater);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> layoutInflater;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        mLayoutInflaterCache.clear();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中LayoutInflaterFactory是我们自己实现了LayoutInflater.Factory2接口：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LayoutInflaterFactory</span> <span class="keyword">implements</span> <span class="title">LayoutInflater</span>.<span class="title">Factory2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> HashMap&lt;String, Constructor&lt;? extends View&gt;&gt; sConstructorMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Class&lt;?&gt;[] mConstructorSignature = <span class="keyword">new</span> Class[]&#123;Context.class, AttributeSet.class&#125;;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Object[] mConstructorArgs = <span class="keyword">new</span> Object[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">onCreateView</span><span class="params">(View parent, String name, Context context, AttributeSet attrs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (name.equals(<span class="string">"view"</span>)) &#123;</span><br><span class="line">            name = attrs.getAttributeValue(<span class="keyword">null</span>, <span class="string">"class"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果没有'.'，说明是Android系统控件，直接返回null，让系统自己createView</span></span><br><span class="line">        <span class="keyword">if</span> (-<span class="number">1</span> == name.indexOf(<span class="string">'.'</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Context lastContext = (Context) mConstructorArgs[<span class="number">0</span>];</span><br><span class="line">        mConstructorArgs[<span class="number">0</span>] = context;</span><br><span class="line">        Class&lt;? extends View&gt; clazz = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">//先从本地缓存读取</span></span><br><span class="line">        Constructor&lt;? extends View&gt; constructor = sConstructorMap.get(name);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (constructor == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">//没有缓存，根据类名创建Constructor对象存入缓存</span></span><br><span class="line">                <span class="comment">// Class not found in the cache, see if it's real, and try to add it</span></span><br><span class="line">                clazz = context.getClassLoader().loadClass(name).asSubclass(View.class);</span><br><span class="line">                constructor = clazz.getConstructor(mConstructorSignature);</span><br><span class="line">                sConstructorMap.put(name, constructor);</span><br><span class="line">            &#125;</span><br><span class="line">            Object[] args = mConstructorArgs;</span><br><span class="line">            args[<span class="number">1</span>] = attrs;</span><br><span class="line">            constructor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">            <span class="keyword">return</span> constructor.newInstance(args);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</span><br><span class="line">            InflateException ie = <span class="keyword">new</span> InflateException(attrs.getPositionDescription()</span><br><span class="line">                    + <span class="string">": Error inflating class "</span> + name);</span><br><span class="line">            ie.initCause(e);</span><br><span class="line">            <span class="keyword">throw</span> ie;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassCastException e) &#123;</span><br><span class="line">            <span class="comment">// If loaded class is not a View subclass</span></span><br><span class="line">            InflateException ie = <span class="keyword">new</span> InflateException(attrs.getPositionDescription()</span><br><span class="line">                    + <span class="string">": Class is not a View "</span> + name);</span><br><span class="line">            ie.initCause(e);</span><br><span class="line">            <span class="keyword">throw</span> ie;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            <span class="comment">// If loaded class is not a View subclass</span></span><br><span class="line">            InflateException ie = <span class="keyword">new</span> InflateException(attrs.getPositionDescription()</span><br><span class="line">                    + <span class="string">": Class not found "</span> + name);</span><br><span class="line">            ie.initCause(e);</span><br><span class="line">            <span class="keyword">throw</span> ie;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            InflateException ie = <span class="keyword">new</span> InflateException(attrs.getPositionDescription()</span><br><span class="line">                    + <span class="string">": Error inflating class "</span> + (clazz == <span class="keyword">null</span> ? <span class="string">"&lt;unknown&gt;"</span> : clazz.getName()));</span><br><span class="line">            ie.initCause(e);</span><br><span class="line">            <span class="keyword">throw</span> ie;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            mConstructorArgs[<span class="number">0</span>] = lastContext;</span><br><span class="line">            mConstructorArgs[<span class="number">1</span>] = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">onCreateView</span><span class="params">(String name, Context context, AttributeSet attrs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> onCreateView(<span class="keyword">null</span>, name, context, attrs);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们通过AssetManager去缓存不同的LayoutInflater实例，在插件中这样写：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LayoutInflaterManager.getInstance(context);</span><br></pre></td></tr></table></figure>

<p>问题解决~</p>
<p>下一篇我打算说一说插件框架如何支持插件包中的so文件，谢谢~</p>
]]></content>
      
        <categories>
            
            <category> Android 静态代理插件框架 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[聊聊Android的静态代理插件框架原理[03]--Activity静态代理之资源加载(上)]]></title>
      <url>http://wangyeming.github.com/2017/09/10/android-proxy-plugin-frame-03/</url>
      <content type="html"><![CDATA[<p>上一篇文章我们介绍了如何偷梁换日，用HostBaseActivity去在Activity运行中代理PluginBaseActivity，并让PluginBaseActivity具有Android中Activity组件的生命周期。也同时留了一个问题，插件的资源加载。这篇文章就和大家一起分享下，插件资源加载涉及到的知识点和解决方案。</p>
<p><img src="/img/2017-09-10-android-proxy-plugin-frame-03-01.png" alt><br><img src="/img/2017-09-10-android-proxy-plugin-frame-03-02.png" alt></p>
<a id="more"></a>

<h1 id="Activity静态代理之资源加载"><a href="#Activity静态代理之资源加载" class="headerlink" title="Activity静态代理之资源加载"></a>Activity静态代理之资源加载</h1><p>在我介绍解决方案前，我们有必要一起了解下Android的资源相关的知识。</p>
<p>Android应用程序主要由两部分内容组成：代码和资源。资源主要指的是与UI相关的图片啊，布局啊，字符串啊等文件。</p>
<p>Android应用程序资源可以分为两大类，分别是assets和res。</p>
<p>assets类资源放在工程根目录的Assets子目录下，这些文件最终会被原装不动地打包在apk文件中。如果我们要在程序中访问这些文件，那么就需要指定文件名来访问。</p>
<p>res资源也比较好理解，上一个Android官网的介绍 <a href="https://developer.android.com/guide/topics/resources/available-resources.html" target="_blank" rel="noopener">Resource Types</a></p>
<pre><code>Animation Resources
    Define pre-determined animations.
    Tween animations are saved in res/anim/ and accessed from the R.anim class.
    Frame animations are saved in res/drawable/ and accessed from the R.drawable class.

Color State List Resource
    Define a color resources that changes based on the View state.
    Saved in res/color/ and accessed from the R.color class.

Drawable Resources
    Define various graphics with bitmaps or XML.
    Saved in res/drawable/ and accessed from the R.drawable class.

Layout Resource
    Define the layout for your application UI.
    Saved in res/layout/ and accessed from the R.layout class.

Menu Resource
    Define the contents of your application menus.
    Saved in res/menu/ and accessed from the R.menu class.
    String Resources

Define strings, string arrays, and plurals (and include string formatting and styling).
    Saved in res/values/ and accessed from the R.string, R.array, and R.plurals classes.
    Style Resource

Define the look and format for UI elements.
    Saved in res/values/ and accessed from the R.style class.
    Font Resources

Define font families and include custom fonts in XML.
    Saved in res/font/ and accessed from the R.font class.

More Resource Types
    Define values such as booleans, integers, dimensions, colors, and other arrays.
    Saved in res/values/ but each accessed from unique R sub-classes (such as R.bool, R.integer, R.dimen, etc.).</code></pre><p>在编译打包的过程中，AAPT会把资源文件打包成二进制文件，并对除了assets资源之外所有的资源赋予一个资源ID常量，并且会生成一个资源索引表resources.arsc。<br>我们熟知的apk文件其实只是一个zip压缩文件，里面有包含全部java类的文件(classes.dex)和全部编译后的资源文件(resources.arsc).</p>
<p>了解了Android中的资源，我们接下来看一下，我们平时到底是如何使用这些资源的呢？</p>
<p>这里就必须要提到两个类，<a href="https://developer.android.com/reference/android/content/res/AssetManager.html" target="_blank" rel="noopener">AssetManager</a>和<a href="https://developer.android.com/reference/android/content/res/Resources.html" target="_blank" rel="noopener">Resources</a></p>
<p>简单来说，AssetManager用于访问应用原始的asset文件，相对来说是一个封装层次较低的类。而Resources则提供了高封装层次的API用于获取类型数据，</p>
<p>现在我们可以解释上一篇文章末尾提出的问题了，为什么插件里的资源，宿主里无法直接访问呢？很简单，因为宿主apk打包的时候，resources.arsc文件里面并没有插件里面的资源文件ID，也就访问不到插件里面的资源。也就是说，用宿主的AssetManager和Resources实例是get不到插件的资源的。</p>
<p>聪明的小伙伴已经想到了，那既然宿主的AssetManager和Resources实例不行，那我们用插件的的AssetManager和Resources实例不就可以了？！</p>
<p>是的，『静态代理』的另一层含义就是，访问插件资源的时候，用插件的AssetManager和Resources代理宿主的AssetManager和Resources。上代码:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> AssetManager <span class="title">createAssetManager</span><span class="params">(String dexPath)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        AssetManager assetManager = AssetManager.class.newInstance();</span><br><span class="line">        Method addAssetPath = assetManager.getClass().getMethod(<span class="string">"addAssetPath"</span>, String.class);</span><br><span class="line">        addAssetPath.invoke(assetManager, dexPath);</span><br><span class="line">        <span class="keyword">return</span> assetManager;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> Resources <span class="title">createResources</span><span class="params">(AssetManager assetManager)</span> </span>&#123;</span><br><span class="line">    Resources superRes = mAppContext.getResources();</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Resources(assetManager,</span><br><span class="line">            superRes.getDisplayMetrics(), superRes.getConfiguration());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在HostActivity中，替换对应的方法为插件的AssetManager和Resources</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HostBaseActivity</span> <span class="keyword">extends</span> <span class="title">FragmentActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Resources <span class="title">getResources</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//返回插件的Resources</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AssetManager <span class="title">getAssets</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//返回插件的AssetManager</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ...    </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这下，宿主里可以获取到插件里对应的资源了。不过插件化带来的资源加载的问题远没那么简单。比如说我们知道，Android系统中通过LayoutInflater加载布局会根据view的包名对view进行相应缓存，在app开发中本来是没有任何问题的。但是我们插件开发，加载了多个apk的代码和资源，势必会有可能不同的插件下不同的view恰好有相同的包名，如果统一用默认的LayoutInflater的话,势必会有问题。下一篇，我们结合LayoutInflater缓存机制，介绍一下解决方案。谢谢大家。</p>
]]></content>
      
        <categories>
            
            <category> Android 静态代理插件框架 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[聊聊Android的静态代理插件框架原理[02]--Activity静态代理之生命周期]]></title>
      <url>http://wangyeming.github.com/2017/09/10/android-proxy-plugin-frame-02/</url>
      <content type="html"><![CDATA[<p>前文介绍了Android中如何在应用中加载一个普通未安装的apk文件，也提到了插件化面临的两个问题。一个是组件的生命周期，一个是资源的加载问题。系列的第二篇我们就从如何静态代理一个Activity，从而偷梁换柱，实现『启动一个未在Manifest中申明的Activity』的目标.</p>
<p><img src="/img/2017-09-10-android-proxy-plugin-frame-02-01.png" alt></p>
<a id="more"></a>

<h1 id="Activity静态代理之生命周期"><a href="#Activity静态代理之生命周期" class="headerlink" title="Activity静态代理之生命周期"></a>Activity静态代理之生命周期</h1><p>前面提到，Android系统中对四大组件，例如Activity是有限制的，必须在AndroidManifest.xml文件中进行申明，才能启动并运行。<br>为了解决这个问题，有两种主流的思想，一种是通过Hook手段，在Android系统检查Activity申明的地方想办法Hook，使得未申明的Activity能够正常运行。另一种办法则是今天我们说的，静态代理。</p>
<p>怎么个『静态代理』呢?</p>
<p>思想也很简单，首先我们明确两个对象，一个是宿主(Host),一个是插件(Plugin).</p>
<p>一句话概述就是，用户以为自己启动的是PluginActivity，实际上启动的是HostActivity，这一步偷梁换日正是我们插件框架做的事。</p>
<p>首先我们实现一个HostActivity，并申明到AndroidManifest.xml中。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HostBaseActivity</span> <span class="keyword">extends</span> <span class="title">FragmentActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">activity</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:name</span>=<span class="string">".HostBaseActivity"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:screenOrientation</span>=<span class="string">"portrait"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:theme</span>=<span class="string">"@style/PluginTheme"</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>然后我们需要定义一个『插件Activity』接口，并给一个默认的实现。目的是要求插件开发实现的Activity必须继承我们插件框架的『插件Activity』。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IPluginActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStart</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onRestart</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onActivityResult</span><span class="params">(<span class="keyword">int</span> requestCode, <span class="keyword">int</span> resultCode, Intent data)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResume</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPause</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStop</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setProxy</span><span class="params">(Activity proxyActivity, String dexPath)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSaveInstanceState</span><span class="params">(Bundle outState)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNewIntent</span><span class="params">(Intent intent)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onRestoreInstanceState</span><span class="params">(Bundle savedInstanceState)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouchEvent</span><span class="params">(MotionEvent event)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onKeyUp</span><span class="params">(<span class="keyword">int</span> keyCode, KeyEvent event)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onWindowAttributesChanged</span><span class="params">(LayoutParams params)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onWindowFocusChanged</span><span class="params">(<span class="keyword">boolean</span> hasFocus)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBackPressed</span><span class="params">()</span></span>;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后我们实现IPluginActivity，并作为插件开发Activity的基类。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PluginBaseActivity</span> <span class="keyword">implements</span> <span class="title">IPluginActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">     <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>看到这，大家可能明白了我们打算做的事，正如我们前面所说的一样，我们打算用HostBaseActivity去替换PluginBaseActivity。也就是HostBaseActivity『代理』PluginBaseActivity。</p>
<p>但是这样的话，我们遇到了一些问题，最主要的有这两点：</p>
<ol>
<li>PluginBaseActivity目前只是一个类，并没有Activity所具有的生命周期。</li>
<li>PluginBaseActivity被HostBaseActivity代理后，是没有办法直接去加载插件中的资源的。</li>
</ol>
<p>我们先说第一点，PluginBaseActivity如何才能具有Activity的生命周期呢？很简单，HostBaseActivity在对应的生命周期内，调用一下PluginBaseActivity对应的生命周期的方法就好啦。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HostBaseActivity</span> <span class="keyword">extends</span> <span class="title">FragmentActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> PluginBaseActivity mPluginBaseActivity;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        mPluginBaseActivity.onCreate(savedInstanceState);</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onStart</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onStart();</span><br><span class="line">        mPluginBaseActivity.onStart();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ...    </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里只是最简化代码了，实际上HostBaseActivity里是需要通过ClassLoader，通过反射的方式创建一个PluginBaseActivity实例。具体的大家可以参考<a href="https://github.com/wangyeming/AndroidPluginFrameDemo" target="_blank" rel="noopener">wangyeming/AndroidPluginFrameDemo</a>中的代码。</p>
<p>其它的方法，比如onActivityResult，onRequestPermissionsResult等方法，根据需要，也可以代理实现。可以看到，我们的PluginBaseActivity从一个冷冰冰的java类，变成了有血有肉，活生生的，有生命周期的安卓Activity类。就像文章封面的图片『提线木偶』一样，PluginBaseActivity只是一个徒有其表的木偶，只有我们给它搭上线(HostBaseActivity调用PluginBaseActivity的接口)，才能真正的成为可以活动的小人。</p>
<p>好的，现在我们在插件中可以继承PluginBaseActivity，自定义一个插件的Activity。但这里有一个严峻的问题，我们在插件PluginBaseActivity中，理所应当的可以通过setContentView()等方法加载layout，drawable，string等资源文件。但显然，这些资源是属于插件内的，也就是说，宿主内是无法直接加载这些资源。我们为什么不能直接加载插件apk里面的资源，有没有什么办法可以解决这个问题？下一篇文章，我们一起来研究下插件资源加载的问题。</p>
]]></content>
      
        <categories>
            
            <category> Android 静态代理插件框架 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[聊聊Android的静态代理插件框架原理[01]--Apk文件的加载]]></title>
      <url>http://wangyeming.github.com/2017/09/09/android-proxy-plugin-frame-01/</url>
      <content type="html"><![CDATA[<p>无论哪一种插件化框架，本质上都有宿主和插件这两个成员。而插件包通常都是以Apk文件的形式存在，所以如何加载Apk文件就是插件化基础中的基础了。本文就简单聊一下Android中如何加载apk文件吧。</p>
<p><img src="/img/2017-09-09-android-proxy-plugin-frame-01-01.png" alt></p>
<a id="more"></a>

<h1 id="Apk文件的加载"><a href="#Apk文件的加载" class="headerlink" title="Apk文件的加载"></a>Apk文件的加载</h1><p>apk文件大家都不陌生，那Dex文件是什么呢？</p>
<p><a href="http://www.jianshu.com/p/f7f0a712ddfe" target="_blank" rel="noopener">Dex文件格式详解</a> 引用文中的说明：</p>
<pre><code>Dex文件是Android系统的可执行文件，包含应用程序的全部操作指令以及运行时数据.

由于dalvik是一种针对嵌入式设备而特殊设计的java虚拟机，所以dex文件与标准的class文件在结构设计上有着本质的区别

当java程序编译成class后，还需要使用dx工具将所有的class文件整合到一个dex文件，目的是其中各个类能够共享数据，
在一定程度上降低了冗余，同时也是文件结构更加经凑，实验表明，dex文件是传统jar文件大小的50%左右</code></pre><p><a href="https://source.android.com/devices/tech/dalvik/dex-format" target="_blank" rel="noopener">Dalvik 可执行文件格式</a> 这里是官方说明，具体解释了Dex文件的格式，这里就不多说了。</p>
<p>为什么这里提到Dex文件？因为在我们这套插件化框架中，『插件』本质上是一个Apk文件或者说Dex文件，插件化框架的App主动去加载这样的『Apk格式或者说Dex格式的插件』，从而实现所谓的插件化。具体表现形式例如：『打开一个没有在Manifest里面申明的Activity』，『加载插件中的资源』等等。</p>
<p>我们知道，java代码经过java虚拟机的编译后，生成的是class文件，那么我们是不是在Android系统中去加载class文件呢？</p>
<p>答案是不能的。原因如下：</p>
<pre><code>在使用Java虚拟机时，我们经常自定义继承自ClassLoader的类加载器。
然后通过defineClass方法来从一个二进制流中加载Class。而在Android中我们无法这么使用，
Android中ClassLoader的defineClass方法具体是调用VMClassLoader的defineClass本地静态方法。
而这个本地方法什么都没做，只是抛出了一个“UnsupportedOperationException”异常。 </code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Deprecated</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">final</span> Class&lt;?&gt; defineClass(<span class="keyword">byte</span>[] b, <span class="keyword">int</span> off, <span class="keyword">int</span> len)</span><br><span class="line">    <span class="keyword">throws</span> ClassFormatError</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException(<span class="string">"can't load this type of class file"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在Android Framework层中，BaseDexClassLoader继承自ClassLoader类，并派生出两个类，分别是：DexClassLoader和PathClassLoader。我们来看一下官方文档是如何介绍这两个类的：</p>
<p>先看<a href="https://developer.android.com/reference/dalvik/system/DexClassLoader.html" target="_blank" rel="noopener">DexClassLoader</a></p>
<pre><code>A class loader that loads classes from .jar and .apk files containing a classes.dex entry. This can be used to execute code not installed as part of an application.

This class loader requires an application-private, writable directory to cache optimized classes. Use Context.getCodeCacheDir() to create such a directory:

File dexOutputDir = context.getCodeCacheDir();

Do not cache optimized classes on external storage. External storage does not provide access controls necessary to protect your application from code injection attacks.</code></pre><p>说的很清楚了，DexClassLoader可以用来加载包含classes.dex的jar文件或者apk文件中的类。这些类虽然安装的时候并不在应用中，但是加载后可以作为代码去执行。</p>
<p>还有一个比较重要的地方就是，DexClassLoader只能从应用私有的、可写的目录去缓存类。</p>
<p>然后再看<a href="https://developer.android.com/reference/dalvik/system/PathClassLoader.html" target="_blank" rel="noopener">PathClassLoader</a></p>
<pre><code>Provides a simple ClassLoader implementation that operates on a list of files and directories in the local file system, but does not attempt to load classes from the network. Android uses this class for its system class loader and for its application class loader(s).</code></pre><p>简单来说，PathClassLoader只能加载系统中已经安装过的apk。</p>
<p>这里有一篇博客，<a href="http://blog.csdn.net/mynameishuangshuai/article/details/52737581" target="_blank" rel="noopener">DexClassLoader和PathClassLoader的区别</a>，大家可以参考下，这里我就不多说了。接下来我们进入实战，看一下如何利用DexClassLoader去加载一个apk文件。</p>
<p>首先我们需要把apk移到应用的私有目录下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String apkFileName = <span class="string">"demo.apk"</span>;</span><br><span class="line">String dexOutputPath = context.getCodeCacheDir().getPath() + File.separator + apkFileName;</span><br><span class="line"><span class="comment">//复制apk文件到dexOutputPath路径</span></span><br></pre></td></tr></table></figure>

<p>接着我们需要构建一个DexClassLoader类，</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">File dexOutputDir = mAppContext.getDir(<span class="string">"dex"</span>, Context.MODE_PRIVATE);</span><br><span class="line">String dexOptimizedPath = dexOutputDir.getAbsolutePath() + File.separator + apkFileName;</span><br><span class="line">FileUtils.createDirIfNotExists(dexOptimizedPath);</span><br><span class="line">DexClassLoader dexClassLoader = <span class="keyword">new</span> DexClassLoader(dexPath, dexOptimizedPath, <span class="keyword">null</span>,</span><br><span class="line">            mAppContext.getClassLoader());</span><br></pre></td></tr></table></figure>

<p>好了，有了DexClassLoader实例之后，我们使用反射的方式，加载我们需要的类和方法。比如说，我们可以在主app里定义一个接口</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MessageHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(String message)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>接着，我们在插件apk的代码里，定义MessageHandler的实现</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PluginMessageHandler</span> <span class="keyword">implements</span> <span class="title">MessageHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"receive the message "</span> + message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>现在，我们可以去反射一下拿到MessageHandler的实例啦：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">MessageHandler messageHandler;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    Class&lt;?&gt; localClass = dexClassLoader.loadClass(<span class="string">"包名"</span> + <span class="string">".PluginMessageHandler"</span>);</span><br><span class="line">    Constructor&lt;?&gt; localConstructor = localClass.getConstructor();</span><br><span class="line">    Object instance = localConstructor.newInstance();</span><br><span class="line">    messageHandler = (PluginMessageHandler) instance;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(messageHandler != <span class="keyword">null</span>) &#123;</span><br><span class="line">    messageHandler.handleMessage(<span class="string">"This is a message~"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>日志打印：</p>
<pre><code>receive the message This is a message~</code></pre><h2 id="本篇小结"><a href="#本篇小结" class="headerlink" title="本篇小结"></a>本篇小结</h2><p>现在我们知道了如何加载一个apk插件包并调用插件内的代码。接下来我们面临两个严峻的问题:</p>
<ol>
<li><p>Android中的四大组件，例如Activity, Service, ContentProvider，必须通过Manifest里进行静态注册，单纯通过反射的方式拿到这些类，并不能真正的在Android系统中运行这四大组件。</p>
</li>
<li><p>其次是资源加载的问题，这个也是一个很大的课题，我会在后续的文章中和大家一起探讨。</p>
</li>
</ol>
]]></content>
      
        <categories>
            
            <category> Android 静态代理插件框架 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[聊聊Android的静态代理插件框架原理[引]]]></title>
      <url>http://wangyeming.github.com/2017/09/07/android-proxy-plugin-frame-00/</url>
      <content type="html"><![CDATA[<p>从本篇起，我将用一个系列的博文，和大家一起分享一下基于静态代理的Android插件化框架。该框架原理与任玉刚开源项目Dynamic-load-apk的原理相仿, 同时也在『米家』app和『有品』app中得到实际应用和检验。不足之处，请多多包涵。</p>
<p><img src="/img/2017-09-07-android-proxy-plugin-frame-00-01.gif" alt></p>
<a id="more"></a>

<p>代码放在<a href="https://github.com/wangyeming/AndroidPluginFrameDemo" target="_blank" rel="noopener">wangyeming/AndroidPluginFrameDemo</a>.</p>
<p>文章列表：</p>
<p><a href="/2017/09/09/android-proxy-plugin-frame-01/">聊聊Android的静态代理插件框架原理[01]–Apk文件的加载</a><br><a href="/2017/09/10/android-proxy-plugin-frame-02/">聊聊Android的静态代理插件框架原理[02]–Activity静态代理之生命周期</a><br><a href="/2017/09/10/android-proxy-plugin-frame-03/">聊聊Android的静态代理插件框架原理[03]–Activity静态代理之资源加载(上)</a><br><a href="/2017/09/10/android-proxy-plugin-frame-04/">聊聊Android的静态代理插件框架原理[04]–Activity静态代理之资源加载(下)</a><br>聊聊Android的静态代理插件框架原理[05]–支持插件的so文件<br>待续</p>
<hr>
<p>Android的插件框架和技术在最近几年有着很大的技术突破和应用。不同的框架背后的实现思想有所不同，尤其是以Hook技术为代表的插件框架，在技术门槛上对普通android开发者而言是相对较高的。这里我主要和大家分享的是『静态代理』这一类的安卓插件化框架背后的原理和实现。本质和任玉刚<a href="https://github.com/singwhatiwanna/dynamic-load-apk" target="_blank" rel="noopener">dynamic-load-apk</a>是一个思路。</p>
<p>关于Android插件化框架的背景介绍，可以看<a href="http://www.infoq.com/cn/articles/android-plug-ins-from-entry-to-give-up" target="_blank" rel="noopener">Android插件化：从入门到放弃</a> 这篇文章是根据包建强在2016GMTC全球移动开发大会上的演讲整理而成，对Android插件化的流派和基本原理有简单介绍。</p>
<p>在『米家』和『有品』这两个app中，我们使用的正是这种基于『静态代理』的插件框架。其中『米家』App更是插件化的经典案例，上百款智能硬件的跳转Activity全都是通过插件化来实现的。而『有品』作为一款电商app，我们也引入了这套插件化框架并做了适度改进，得以更加适应电商应用的插件化需要。</p>
<p><img src="/img/2017-09-07-android-proxy-plugin-frame-00-02.png" alt></p>
<p>这是『米家』app的截图，每一个item对应着一个智能产品，点击item会下载插件apk包并加载到app中，随后打开插件Activity，实现对该智能产品的操作控制。</p>
<p>类似的采用插件化框架的app还有很多，背后采用的框架和思想也不尽相同，我也是抛砖引玉，介绍一下我个人对Android的静态代理插件框架背后的原理的理解，不足之处，还请多多包涵。</p>
<hr>
]]></content>
      
        <categories>
            
            <category> Android 静态代理插件框架 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[处理水平和垂直方向的滑动冲突]]></title>
      <url>http://wangyeming.github.com/2017/07/16/scroll-conflict-between-hori-with-ver/</url>
      <content type="html"><![CDATA[<p>滑动冲突是Android中的一个广泛会遇到的一类问题，本文只简单总结一次简单的滑动冲突，ViewPager的水平滑动和ScrollView的垂直方向滑动的冲突处理。</p>
<a id="more"></a>

<p>首先我们分析冲突的现象，当我们试图在ViewPager上水平滑动手指试图翻页时，很容易就误触发垂直方向的滑动事件，比如说ScrollView或一些下拉刷新控件的垂直滑动，表现为ViewPager很难滑动，或页面在抖动。</p>
<p>通常导致这种原因是我们的布局，ScrollView或下拉刷新控件里嵌套ViewPager等水平滑动的控件，而我们滑动的手势不可能完全的水平或垂直，也就是MotionEvent和上一次比，dx和dy都是大于0的，这样显然，ViewPager和ScrollView这两个控件会同时触发onTouch行为，导致整个滑动事件的不可靠。</p>
<p>由此很容易想到，解决办法就是合理区分手指的水平滑动和垂直滑动，举个例子，比如说，用户手指滑动，dx=10，dy=1，那显然的用户是想水平滑动，垂直方向的滑动不是用户期望的，那我们在View的dispatchTouchEvent(MotionEvent ev)里，主动去根据这种情况去屏蔽垂直方向控件对滑动事件的响应。</p>
<p>上代码：</p>
<p>首先你需要给ScrollView加一个方法，可以主动屏蔽和恢复手势滑动。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LockableScrollView</span> <span class="keyword">extends</span> <span class="title">ScrollView</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LockableScrollView</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LockableScrollView</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LockableScrollView</span><span class="params">(Context context, AttributeSet attrs, <span class="keyword">int</span> defStyleAttr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs, defStyleAttr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// true if we can scroll (not locked)</span></span><br><span class="line">    <span class="comment">// false if we cannot scroll (locked)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> mScrollable = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setScrollingEnabled</span><span class="params">(<span class="keyword">boolean</span> enabled)</span> </span>&#123;</span><br><span class="line">        mScrollable = enabled;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isScrollable</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mScrollable;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouchEvent</span><span class="params">(MotionEvent ev)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (ev.getAction()) &#123;</span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_DOWN:</span><br><span class="line">                <span class="comment">// if we can scroll pass the event to the superclass</span></span><br><span class="line">                <span class="keyword">if</span> (mScrollable) <span class="keyword">return</span> <span class="keyword">super</span>.onTouchEvent(ev);</span><br><span class="line">                <span class="comment">// only continue to handle the touch event if scrolling enabled</span></span><br><span class="line">                <span class="keyword">return</span> mScrollable; <span class="comment">// mScrollable is always false at this point</span></span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">super</span>.onTouchEvent(ev);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onInterceptTouchEvent</span><span class="params">(MotionEvent ev)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Don't do anything with intercepted touch events if</span></span><br><span class="line">        <span class="comment">// we are not scrollable</span></span><br><span class="line">        <span class="keyword">if</span> (!mScrollable) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> <span class="keyword">super</span>.onInterceptTouchEvent(ev);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>接着，重写ViewPager的dispatchTouchEvent(MotionEvent ev)方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">dispatchTouchEvent</span><span class="params">(MotionEvent ev)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (ev.getAction()) &#123;</span><br><span class="line">        <span class="keyword">case</span> MotionEvent.ACTION_DOWN:</span><br><span class="line">            mDownX = ev.getX();</span><br><span class="line">            mDownY = ev.getY();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> MotionEvent.ACTION_MOVE:</span><br><span class="line">            <span class="keyword">float</span> moveX = ev.getX();</span><br><span class="line">            <span class="keyword">float</span> moveY = ev.getY();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">float</span> diffx = Math.abs(moveX - mDownX);</span><br><span class="line">            <span class="keyword">float</span> diffy = Math.abs(moveY - mDownY);</span><br><span class="line">            <span class="keyword">if</span> (diffy &lt; <span class="number">2</span> * diffx || diffy &lt; mScaleTouchSlop + <span class="number">20</span>) &#123;</span><br><span class="line">                requestParentDisallowInterceptTouchEvent(<span class="keyword">false</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                requestParentDisallowInterceptTouchEvent(<span class="keyword">true</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> MotionEvent.ACTION_UP:</span><br><span class="line">        <span class="keyword">case</span> MotionEvent.ACTION_CANCEL:</span><br><span class="line">            requestParentDisallowInterceptTouchEvent(<span class="keyword">true</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">super</span>.dispatchTouchEvent(ev);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">enableDisableScrollView</span><span class="params">(LockableScrollView vLockableScrollView)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.vLockableScrollView = vLockableScrollView;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">requestParentDisallowInterceptTouchEvent</span><span class="params">(<span class="keyword">boolean</span> val)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (vLockableScrollView != <span class="keyword">null</span>) &#123;</span><br><span class="line">        vLockableScrollView.setScrollingEnabled(val);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里，一个是判断dy如果小于2倍的dx，就认为是水平滑动，这个是经验值，可以自行进行调整。效果还是很好的。</p>
]]></content>
      
        <categories>
            
            <category> Android View系列 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[在ViewPager中使用WebView]]></title>
      <url>http://wangyeming.github.com/2017/07/16/use-webview-in-viewpager/</url>
      <content type="html"><![CDATA[<p>WebView和ViewPager都是我们平时做Android开发非常常用的两个View控件。在一些阅读App和购物App中，我们可能需要在同一个页面上展示多个Tab及WebView。下面我将介绍下，我在ViewPager中使用WebView的一些心得和踩坑总结。</p>
<p><img src="/img/2017-07-16-use-webview-in-viewpager-02.gif" alt></p>
<a id="more"></a>

<h2 id="手势滑动"><a href="#手势滑动" class="headerlink" title="手势滑动"></a>手势滑动</h2><p>我们知道ViewPager默认支持水平方向手势的滑动翻页效果，根据产品实际的要求，我们可以选择支持手势滑动和屏蔽手势滑动。先说屏蔽的情况，</p>
<p>屏蔽手势滑动的话很简单，上一个StackOverFlow上现成的答案：</p>
<p><a href="https://stackoverflow.com/a/13437997/3941809" target="_blank" rel="noopener">How do disable paging by swiping with finger in ViewPager but still be able to swipe programmatically?</a></p>
<p>如果要支持手势滑动的话，主要会踩到这样一个坑: WebView内部js的水平滑动事件会被屏蔽。也就是说，这里我们遇到了WebView与ViewPager滑动冲突的处理。</p>
<p><img src="/img/2017-07-16-use-webview-in-viewpager-03.gif" alt></p>
<p>首先我们从WebView本身这个View来考虑，我们来看一下WWebView的事件分发方法是否区分当前是否消耗了触摸事件呢？</p>
<p>不幸的是，我们发现，WebView的onTouchEvent(MotionEvent event)方法和dispatchTouchEvent(MotionEvent ev)永远是返回true的，我们可以在google官方的bug反馈平台上看到关于这一点的讨论。</p>
<p><a href="https://bugs.chromium.org/p/chromium/issues/detail?id=515799" target="_blank" rel="noopener">The Android webview.onTouchEvent(event) always return true</a></p>
<p>官方的回复是这样的：</p>
<p><img src="/img/2017-07-16-use-webview-in-viewpager-01.png" alt="截图"></p>
<p>简单来说就是，WebView上所有的Touch事件都会DOM事件并发送到当前的页面中，但DOM事件的处理呢是异步的，这样就没有办法在同步的onTouch方法中返回事件的处理情况。</p>
<p>也就是说，通过传统的View的事件分发机制来处理js的滑动事件冲突呢，应该是走不通的。</p>
<p>那换个角度，WebView本身是否有一些方法可以获取当前WebView没有消耗的触摸事件呢？</p>
<p>还真让我找到一个方法，void onUnhandledInputEvent(WebView, InputEvent)，不过不知道什么原因，这个API21 add的方法，API24的时候被remove了(<a href="https://developer.android.com/sdk/api_diff/24/changes/android.webkit.WebViewClient.html" target="_blank" rel="noopener">https://developer.android.com/sdk/api_diff/24/changes/android.webkit.WebViewClient.html</a>)</p>
<p>这里有个stack overflow上的提问，<a href="https://stackoverflow.com/questions/29821565/check-if-android-webview-is-consuming-touch-events" target="_blank" rel="noopener">Check if Android WebView is consuming touch events</a>,也基本上和我一个思路，目前也没有好的解决办法。</p>
<p>这么看，只能外部告知java，当前webview是否是可左右滑动的，比如说接口通知，或者js和java的bridge方法入手，这里就不多说了。放个链接，大家自行参考下。</p>
<p><a href="http://www.jianshu.com/p/a6f9d4046985" target="_blank" rel="noopener">Viewpager与webview滑动冲突的解决方案</a></p>
<p>不过我偶然发现UC浏览器居然可以处理这个问题！！开启UC浏览器的左滑右滑前进后退功能,在js处理事件的区域，左右滑的手势被屏蔽，在没有处理的区域，左右滑的手势自动启用，还请知道原理的同学不吝告知，多谢！！</p>
<h2 id="WebView资源的释放"><a href="#WebView资源的释放" class="headerlink" title="WebView资源的释放"></a>WebView资源的释放</h2><p>直接上代码</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Description: release the memory of web view, otherwise it's resource will not be recycle.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clearWebViewResource</span><span class="params">(ViewGroup container, WebView webView)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (webView != <span class="keyword">null</span>) &#123;</span><br><span class="line">        webView.removeAllViews();</span><br><span class="line">        <span class="comment">// in android 5.1(sdk:21) we should invoke this to avoid memory leak</span></span><br><span class="line">        <span class="comment">// see (https://coolpers.github.io/webview/memory/leak/2015/07/16/</span></span><br><span class="line">        <span class="comment">// android-5.1-webview-memory-leak.html)</span></span><br><span class="line">        container.removeView(webView);</span><br><span class="line">        webView.setTag(<span class="keyword">null</span>);</span><br><span class="line">        webView.clearHistory();</span><br><span class="line">        webView.destroy();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> Android View系列 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Gson TypeToken特性实战]]></title>
      <url>http://wangyeming.github.com/2017/01/19/gson-turtrial/</url>
      <content type="html"><![CDATA[<p>也许你和我一样有这样的经历，后台的json字段格式总是各种变化，一个字段，既可能是一个普通的String，也可能是Object，一会是int Array，一会是Object Array，甚至是Map。原因不外乎，历史遗漏代码啊，进度紧张没时间磨平差异啊，或者干脆就是无法控制的因素等。今天我就简单总结下，该如何用Gson库的TypeArray特性，优雅的处理这种糟糕格式的json。</p>
<a id="more"></a>

<p>年前和团队一起赶项目进度，加上搬家什么的各种杂事，好久没静下心写篇文章了，转眼2017年，趁着年前进度收尾，不是特别忙碌的功夫，我争取吧这段时间中遇到的技术问题，总结下来，基本都以实战为主，短篇。</p>
<h1 id="事件篇–可怕的Json格式"><a href="#事件篇–可怕的Json格式" class="headerlink" title="事件篇–可怕的Json格式"></a>事件篇–可怕的Json格式</h1><p>首先我们来看这样一串json：</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"Person"</span>:<span class="string">"Stephen Curry"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Data</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SerializedName</span>(<span class="string">"Person"</span>)</span><br><span class="line">    <span class="keyword">private</span> String Person;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPerson</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Person;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPerson</span><span class="params">(String Person)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.Person = Person;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>很简单对不对，但是还有其它几种可能情况：</p>
<p>也许30号球衣那位，在后台看来就是库里，所以这会变成Person字段变成数值了</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"Person"</span>: <span class="number">30</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>你看，后台贴心的放上了库里的生日，Person字段也自然而然变成了对象</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"Person"</span>: &#123;</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"Stephen Curry"</span>,</span><br><span class="line">    <span class="attr">"birthday"</span>: <span class="string">"1988-03-14"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>库里，你不是一个人</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"Person"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"name"</span>: <span class="string">"Stephen Curry"</span>,</span><br><span class="line">      <span class="attr">"birthday"</span>: <span class="string">"1988-03-14"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"name"</span>: <span class="string">"Klay Thompson"</span>,</span><br><span class="line">      <span class="attr">"birthday"</span>: <span class="string">"1990-02-08"</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>也许人多了，忘却你生日,只记住你的姓名</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"Person"</span>: [</span><br><span class="line">     <span class="string">"Stephen Curry"</span>,</span><br><span class="line">     <span class="string">"Klay Thompson"</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>后台也许有时候觉得你需要一个key，方便在人群中找到你。</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"Person"</span>: &#123;</span><br><span class="line">    <span class="attr">"Stephen Curry"</span>: &#123;</span><br><span class="line">      <span class="attr">"birthday"</span>: <span class="string">"1988-03-14"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"Klay Thompson"</span>: &#123;</span><br><span class="line">      <span class="attr">"birthday"</span>: <span class="string">"1990-02-08"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/img/2017-01-19-gson_turtorial-01.png" alt="对方不想和你说话，并向你丢了如上格式的json"></p>
<h1 id="疑难篇–Gson"><a href="#疑难篇–Gson" class="headerlink" title="疑难篇–Gson"></a>疑难篇–Gson</h1><p>我们知道，Gson默认的json转Object的是这样做的：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Gson gson = <span class="keyword">new</span> Gson();</span><br><span class="line">Person person = gson.fromJson(jsonString, Person.class);</span><br></pre></td></tr></table></figure>

<p>Gson可以通过注册GsonBuilder()的registerTypeAdapter的方法，手动注入某一个类的解析规则，</p>
<p>再看Gson中几种Json格式所对应的类的关系，看图一目了然：</p>
<p><img src="/img/2017-01-19-gson_turtorial-02.png" alt></p>
<p>我们只要针对每一层JsonElement判断具体的类型并手动创建对象和赋值，就可以了。</p>
<h1 id="解决篇–自定义具体类的解析方式"><a href="#解决篇–自定义具体类的解析方式" class="headerlink" title="解决篇–自定义具体类的解析方式"></a>解决篇–自定义具体类的解析方式</h1><p>不过俗话说得好，不会投三分的Android开发不是好的产品，我们怎么能被这样恶心的接口轻易地恶心倒呢，来看Gson库给我们提供的泛型支持工具 TypeToken</p>
<p><a href="https://github.com/google/gson" target="_blank" rel="noopener">google/gson</a></p>
<p>首先定义一个合适的类结构，表示Person,这里仅作参考</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Persons</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> number;</span><br><span class="line">    <span class="keyword">public</span> String birthday;</span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; personNames = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">public</span> List&lt;Person&gt; persons = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">public</span> HashMap&lt;String, Person&gt; personMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="meta">@SerializedName</span>(<span class="string">"name"</span>)</span><br><span class="line">  <span class="keyword">public</span> String name;</span><br><span class="line">  <span class="meta">@SerializedName</span>(<span class="string">"birthday"</span>)</span><br><span class="line">  <span class="keyword">public</span> String birthday;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Data</span> </span>&#123;</span><br><span class="line">    <span class="meta">@SerializedName</span>(<span class="string">"Person"</span>)</span><br><span class="line">    <span class="keyword">public</span> Persons persons;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>接着，定义对应的TypeToken和JsonDeserializer，针对该类手动处理Json解析</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Type TypePersons = <span class="keyword">new</span> TypeToken&lt;Persons&gt;() &#123;</span><br><span class="line">&#125;.getType();</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> JsonDeserializer&lt;Persons&gt; personsJsonDeserializer = <span class="keyword">new</span> JsonDeserializer&lt;Persons&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Persons <span class="title">deserialize</span><span class="params">(JsonElement jsonElement, Type type, JsonDeserializationContext jsonDeserializationContext)</span> <span class="keyword">throws</span> JsonParseException </span>&#123;</span><br><span class="line">            Persons persons = <span class="keyword">new</span> Persons();</span><br><span class="line">            <span class="keyword">if</span> (jsonElement.isJsonObject()) &#123;</span><br><span class="line">                Gson gson = <span class="keyword">new</span> Gson();</span><br><span class="line">                JsonObject jsonObject = jsonElement.getAsJsonObject();</span><br><span class="line">                JsonElement personElement = jsonObject.get(<span class="string">"Person"</span>);</span><br><span class="line">                <span class="keyword">if</span> (personElement.isJsonPrimitive()) &#123;</span><br><span class="line">                    JsonPrimitive jsonPrimitive = jsonElement.getAsJsonPrimitive();</span><br><span class="line">                    <span class="keyword">if</span> (jsonPrimitive.isString()) &#123;</span><br><span class="line">                        <span class="comment">//"Person":"Stephen Curry"</span></span><br><span class="line">                        persons.name = jsonPrimitive.getAsString();</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (jsonPrimitive.isNumber()) &#123;</span><br><span class="line">                        <span class="comment">//"Person": 30</span></span><br><span class="line">                        persons.number = jsonPrimitive.getAsInt();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (personElement.isJsonObject()) &#123;</span><br><span class="line">                    JsonObject jsonObject2 = jsonElement.getAsJsonObject();</span><br><span class="line">                    Set&lt;Map.Entry&lt;String, JsonElement&gt;&gt; entrySet = jsonObject2.entrySet();</span><br><span class="line">                    HashMap&lt;String, Person&gt; personMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">                    <span class="keyword">for</span> (Map.Entry&lt;String, JsonElement&gt; entry : entrySet) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (<span class="string">"person"</span>.equals(entry.getKey())) &#123;</span><br><span class="line">                            <span class="comment">/**</span></span><br><span class="line"><span class="comment">                             * "Person": &#123;</span></span><br><span class="line"><span class="comment">                             "      name": "Stephen Curry",</span></span><br><span class="line"><span class="comment">                             "      birthday": "1988-03-14"</span></span><br><span class="line"><span class="comment">                             *  &#125;</span></span><br><span class="line"><span class="comment">                             */</span></span><br><span class="line">                            persons.person = gson.fromJson(jsonElement, Person.class);</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="comment">/**</span></span><br><span class="line"><span class="comment">                             * "Person": &#123;</span></span><br><span class="line"><span class="comment">                             *      "Stephen Curry": &#123;</span></span><br><span class="line"><span class="comment">                             *          "birthday": "1988-03-14"</span></span><br><span class="line"><span class="comment">                             *      &#125;,</span></span><br><span class="line"><span class="comment">                             *      "Klay Thompson": &#123;</span></span><br><span class="line"><span class="comment">                             *          "birthday": "1990-02-08"</span></span><br><span class="line"><span class="comment">                             *      &#125;</span></span><br><span class="line"><span class="comment">                             * &#125;</span></span><br><span class="line"><span class="comment">                             */</span></span><br><span class="line">                            personMap.put(entry.getKey(), gson.fromJson(entry.getValue(), Person.class));</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    persons.personMap = personMap;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (jsonElement.isJsonArray()) &#123;</span><br><span class="line">                Gson gson = <span class="keyword">new</span> Gson();</span><br><span class="line">                JsonArray jsonArray = jsonElement.getAsJsonArray();</span><br><span class="line">                List&lt;String&gt; personNames = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">                List&lt;Person&gt; personList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">                <span class="keyword">if</span> (jsonArray != <span class="keyword">null</span> &amp;&amp; jsonArray.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (JsonElement arrayElement : jsonArray) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (arrayElement.isJsonPrimitive()) &#123;</span><br><span class="line">                            <span class="comment">/**</span></span><br><span class="line"><span class="comment">                             * "Person": [</span></span><br><span class="line"><span class="comment">                             *      "Stephen Curry",</span></span><br><span class="line"><span class="comment">                             *      "Klay Thompson"</span></span><br><span class="line"><span class="comment">                             * ]</span></span><br><span class="line"><span class="comment">                             */</span></span><br><span class="line">                            personNames.add(arrayElement.getAsString());</span><br><span class="line">                        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (arrayElement.isJsonObject()) &#123;</span><br><span class="line">                            <span class="comment">/**</span></span><br><span class="line"><span class="comment">                             * "Person": [</span></span><br><span class="line"><span class="comment">                             *      &#123;</span></span><br><span class="line"><span class="comment">                             *          "name": "Stephen Curry",</span></span><br><span class="line"><span class="comment">                             *          "birthday": "1988-03-14"</span></span><br><span class="line"><span class="comment">                             *      &#125;,</span></span><br><span class="line"><span class="comment">                             *      &#123;</span></span><br><span class="line"><span class="comment">                             *          "name": "Klay Thompson",</span></span><br><span class="line"><span class="comment">                             *          "birthday": "1990-02-08"</span></span><br><span class="line"><span class="comment">                             *      &#125;</span></span><br><span class="line"><span class="comment">                             * ]</span></span><br><span class="line"><span class="comment">                             */</span></span><br><span class="line">                            personList.add(gson.fromJson(jsonElement, Person.class));</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                persons.personNames = personNames;</span><br><span class="line">                persons.persons = personList;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> persons;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Gson gson = <span class="keyword">new</span> GsonBuilder()</span><br><span class="line">  .registerTypeAdapter(TypeArea, personsJsonDeserializer)</span><br><span class="line">  .create();</span><br><span class="line"><span class="keyword">return</span> gson.fromJson(jsonElement, Persons.class);</span><br></pre></td></tr></table></figure>

<p>代码应该写得很清楚了，以上。</p>
]]></content>
      
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[上手mac开发环境]]></title>
      <url>http://wangyeming.github.com/2016/12/01/develop-in-mac/</url>
      <content type="html"><![CDATA[<p>本文不是一篇技术博客，只是简单记录下自己入手macbook pro后，如何平滑的切换到mac开发环境的心得，偶尔换个心境嘛~</p>
<p><img src="/img/2016-12-01-2016-12-01-develop-in-mac-01.jpg" alt></p>
<a id="more"></a>

<p>距离完成上一篇博客已经过去一个半月了，入职新东家小米也已经快三个月了，中途还不小心扭伤了脖子躺了一周.在早先的实习经历中曾用过半年的iMac作为开发机，mac系统的unix环境和系统的优点给我留下了深刻印象。中间也折腾过很多次ubuntu系统，从14.04到16.04，不过ubuntu通用软件的缺失着实很麻烦。进入新公司，分到的依然是windows系统，还是老掉牙的win7加机械硬盘，咬了牙，入手了2016版的macbook pro。稍微记录下，如何高效率的切换到mac开发环境。</p>
<h1 id="熟悉新电脑和系统"><a href="#熟悉新电脑和系统" class="headerlink" title="熟悉新电脑和系统"></a>熟悉新电脑和系统</h1><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>我入手的是13寸深灰色不带touch bar的最低配，升级到16g内存，港版，同学代购。对我来说，保证性能的同时，足够轻便是我的原则。买之前已经看到一些评测，15寸不够便携(可能是前面两款本本的重量让我怨念不止), touch bar对我来说不值得，而且13寸带touch bar款电池容量更小，续航是个问题。终于一番波折后，本本到手了。</p>
<p><img src="/img/2016-12-01-2016-12-01-develop-in-mac-01.jpg" alt></p>
<h2 id="额外的准备工作"><a href="#额外的准备工作" class="headerlink" title="额外的准备工作"></a>额外的准备工作</h2><p>港版的本本转接口是英标插头，是没办法直接用的，好在macbook pro的变压器和插头是分开的，单买一个插头或者转换器就好了。</p>
<p><img src="/img/2016-12-01-2016-12-01-develop-in-mac-02.jpg" alt></p>
<h2 id="一个合适的转接器"><a href="#一个合适的转接器" class="headerlink" title="一个合适的转接器"></a>一个合适的转接器</h2><p>新版macbook pro只有Thunderbolt 3接口，我工作时需要外接显示器、键盘和安卓手机，这里安利<a href="http://item.mi.com/1163000011.html" target="_blank" rel="noopener">自家小米的公司的一款转接器</a>，149，USB-C转一个html、usb-a、usb-c，一个接口可以同时接显示器，键盘和充电。不差钱的可以去苹果官网买原装配件。</p>
<p><img src="/img/2016-12-01-2016-12-01-develop-in-mac-03.jpg" alt></p>
<p>买2016款之前确实也纠结过接口的问题，毕竟工作时键盘和手机就要占用两个usbA接口，乞丐版的两个接口还都在同侧，耳机接口在右侧最靠近屏幕的一端。确实有很多不方便之处，</p>
<h2 id="熟练各种快捷键"><a href="#熟练各种快捷键" class="headerlink" title="熟练各种快捷键"></a>熟练各种快捷键</h2><p>想高效率的使用mac的话，快捷键是必不可少的。首先要记住的是mac上引入了command键，基本上windows上ctrl配合的快捷键都换成command键。比如说剪切，复制，粘贴从ctrl+x ctrl+c ctrl+v变成了command+x command+c command+v。具体的可以参考 <a href="https://support.apple.com/zh-cn/HT201236" target="_blank" rel="noopener">官网说明–Mac 键盘快捷键</a></p>
<p>值得一提的是，mac上全屏加左右切换对工作时需要开启很多窗口的人来说非常实用，mac相比windows上多窗口切换，mac上全屏应用的左右切换明显更自然，效率更高。触摸板就是三指左右轻扫，键盘就是ctrl加左右方向键。。</p>
<p>mac默认的鼠标滚轮方向和win是相反的，可以在系统设置中修改。不过习惯了之后个人感觉更自然。</p>
<p>哦，对了，记得到设置里，设置触摸板轻巧代替按下</p>
<h2 id="常用软件"><a href="#常用软件" class="headerlink" title="常用软件"></a>常用软件</h2><p>我常用的chrome、atom、qq、微信、第三方输入法（我用的是百度输入法，搜狗输入法不知道为何在qq和微信的聊天窗口，卡顿的特别严重）、flux（护眼软件）</p>
<p><img src="https://justgetflux.com/news/images/darkmode.png" alt></p>
<p><a href="https://justgetflux.com/news/pages/mac/" target="_blank" rel="noopener">https://justgetflux.com/news/pages/mac/</a></p>
<hr>
<h1 id="开发环境搭建"><a href="#开发环境搭建" class="headerlink" title="开发环境搭建"></a>开发环境搭建</h1><h2 id="Android开发环境"><a href="#Android开发环境" class="headerlink" title="Android开发环境"></a>Android开发环境</h2><p>没什么好多说的，JDK Android Studio Android SDK NDk 等等。翻墙下载或选择国内镜像。</p>
<h2 id="命令行"><a href="#命令行" class="headerlink" title="命令行"></a>命令行</h2><p>iTerm是必不好少的，配合<a href="https://github.com/robbyrussell/oh-my-zsh" target="_blank" rel="noopener">z-shell</a>,选择一个自己的主题，最快时间把命令行配置成顺手的模式。<br>vim的话，<a href="https://github.com/VundleVim/Vundle.vim" target="_blank" rel="noopener">vundlevim</a>是个不错的插件管理工具。</p>
<h2 id="包管理"><a href="#包管理" class="headerlink" title="包管理"></a>包管理</h2><p>正如apt对于ubuntu、yum对于Fedaro，Chocolatey对于windows，mac上有一些广泛使用的包管理工具。推荐<a href="http://brew.sh/" target="_blank" rel="noopener">HomeBrew</a></p>
<h2 id="版本控制"><a href="#版本控制" class="headerlink" title="版本控制"></a>版本控制</h2><p>svn就不提了，android studio自带的版本控制对于svn这种古老的版本控制工具基本足够了。</p>
<p>git的话，可以通过homebrew直接安装git，图形化工具的话，<a href="https://www.sourcetreeapp.com/" target="_blank" rel="noopener">SourceTree</a>是个不错的选择。</p>
<p>考虑到ssh连接的安全性，很多公司的项目要求必须通过ssh访问，ssh访问需要配置ssh key，生成ssh key需要用户名和邮箱信息，公司项目通常使用的是公司邮箱，个人项目一般是个人邮箱，ssh key无法通用。我们可以配置多个ssh key， <a href="https://www.liaohuqiu.net/cn/posts/git-setup-and-setting/" target="_blank" rel="noopener">命令行下的git配置问题: 多个 sshkey, 多个用户身份, git alias</a></p>
<h2 id="软件推荐"><a href="#软件推荐" class="headerlink" title="软件推荐"></a>软件推荐</h2><h1 id="相关文章推荐"><a href="#相关文章推荐" class="headerlink" title="相关文章推荐"></a>相关文章推荐</h1><p><a href="http://zhihu.com/question/33887923/answer/57480318" target="_blank" rel="noopener">Mac 小白应该了解哪些东西？ - 回答作者: 知乎用户</a></p>
<p><a href="http://www.zhihu.com/question/20873070" target="_blank" rel="noopener">程序员如何优雅地使用macOS？ - 168 个回答, 17387 人关注</a></p>
]]></content>
      
        
        <tags>
            
            <tag> Mac </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android的加密缓存(下)--字符串加密解密实战]]></title>
      <url>http://wangyeming.github.com/2016/10/18/android-encrupt-and-decrupt/</url>
      <content type="html"><![CDATA[<hr>
<p>想必看了<a href="https://wangyeming.github.io/jca-introduction/" target="_blank" rel="noopener">Android的加密缓存(上)–JCA基础</a>的小伙伴们，对于JCA已经有了一定的了解。那么下面我们结合具体代码，完成一次简单的字符串缓存加密和解密。如果你对Key、KeyStore、KeyGenerator、Cipher这些基础的JCA类还不太熟悉，建议你可以回顾下上一篇文章。</p>
<a id="more"></a>

<p>首先我们设计一个SecurityCache，封装SharedPreferences和基本的加密解密操作，设计成单例的形式。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SecurityCache</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> SecurityCache securityCache;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> KeyStore mKeyStore;</span><br><span class="line">  <span class="keyword">private</span> SharedPreferences mSharedPreferences;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="title">SecurityCache</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">      mSharedPreferences = PreferenceManager.getDefaultSharedPreferences(context);</span><br><span class="line">      initKey();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SecurityCache <span class="title">getInstance</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (securityCache == <span class="keyword">null</span>) &#123;</span><br><span class="line">          <span class="keyword">synchronized</span> (SecurityCache.class) &#123;</span><br><span class="line">              <span class="keyword">if</span> (securityCache == <span class="keyword">null</span>) &#123;</span><br><span class="line">                  securityCache = <span class="keyword">new</span> SecurityCache(context);</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> securityCache;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在initKey()中,我们需要做一些初始化操作：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String KEY_NAME = <span class="string">"demo_key"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> KeyStore mKeyStore;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initKey</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            mKeyStore = KeyStore.getInstance(<span class="string">"AndroidKeyStore"</span>);</span><br><span class="line">            KeyGenerator keyGenerator = KeyGenerator.getInstance(KeyProperties.KEY_ALGORITHM_AES, <span class="string">"AndroidKeyStore"</span>);</span><br><span class="line">            mKeyStore.load(<span class="keyword">null</span>);</span><br><span class="line">            keyGenerator.init(<span class="keyword">new</span> KeyGenParameterSpec.Builder(KEY_NAME,</span><br><span class="line">                    KeyProperties.PURPOSE_ENCRYPT | KeyProperties.PURPOSE_DECRYPT)  <span class="comment">//表示生成的key用于加密和解密</span></span><br><span class="line">                    .setBlockModes(KeyProperties.BLOCK_MODE_CBC)</span><br><span class="line">                    .setUserAuthenticationRequired(<span class="keyword">false</span>)</span><br><span class="line">                    .setEncryptionPaddings(KeyProperties.ENCRYPTION_PADDING_PKCS7)</span><br><span class="line">                    .build());</span><br><span class="line">            keyGenerator.generateKey();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchAlgorithmException | InvalidAlgorithmParameterException</span><br><span class="line">                | CertificateException | IOException | NoSuchProviderException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Fail to init key "</span> + e);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (KeyStoreException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Failed to get an instance of KeyGenerator "</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h2 id="字符串加密"><a href="#字符串加密" class="headerlink" title="字符串加密"></a>字符串加密</h2><p>初始化完成，接着来看字符串的加密，通过生成Cipher，调用cipher.doFinal()方法,将字符串</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 加密存储</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">encryptContent</span><span class="params">(String content)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Cipher cipher = createEncruptCipher();</span><br><span class="line">        <span class="keyword">if</span> (cipher == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">byte</span>[] encryptedBytes = cipher.doFinal(content.getBytes(<span class="string">"utf-8"</span>));</span><br><span class="line">        <span class="keyword">byte</span>[] cipherIv = cipher.getIV();</span><br><span class="line">        String encodedContent = Base64.encodeToString(encryptedBytes, Base64.DEFAULT);</span><br><span class="line">        String encodeCipherIv = Base64.encodeToString(cipherIv, Base64.DEFAULT);</span><br><span class="line">        SharedPreferences.Editor editor = mSharedPreferences.edit();</span><br><span class="line">        editor.putString(ENCRYTED_CONTENT, encodedContent);</span><br><span class="line">        editor.putString(ENCRYTED_CONTENT_IV, encodeCipherIv);</span><br><span class="line">        editor.apply();</span><br><span class="line">        <span class="keyword">return</span> encodedContent;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException | IllegalBlockSizeException | BadPaddingException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Failed to encrypt "</span>, e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里createEncruptCipher()方法如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Cipher <span class="title">createEncruptCipher</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Cipher mCipher;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        mCipher = Cipher.getInstance(KeyProperties.KEY_ALGORITHM_AES + <span class="string">"/"</span></span><br><span class="line">                + KeyProperties.BLOCK_MODE_CBC + <span class="string">"/"</span></span><br><span class="line">                + KeyProperties.ENCRYPTION_PADDING_PKCS7);</span><br><span class="line">        mKeyStore.load(<span class="keyword">null</span>);</span><br><span class="line">        SecretKey key = (SecretKey) mKeyStore.getKey(KEY_NAME, <span class="keyword">null</span>);</span><br><span class="line">        mCipher.init(Cipher.ENCRYPT_MODE, key, mCipher.getParameters());</span><br><span class="line">        <span class="keyword">return</span> mCipher;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (KeyPermanentlyInvalidatedException e) &#123;</span><br><span class="line">        Log.e(TAG, <span class="string">"initCipher error "</span> + e.getMessage());</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (NoSuchAlgorithmException | NoSuchPaddingException | IOException |</span><br><span class="line">            CertificateException | UnrecoverableKeyException | InvalidKeyException |</span><br><span class="line">            KeyStoreException | InvalidAlgorithmParameterException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Failed to encrypt pin "</span>, e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="字符串解密"><a href="#字符串解密" class="headerlink" title="字符串解密"></a>字符串解密</h2><p>同理来看解密的方法:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 解密还原</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">decryptContent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String encryptedContent = mSharedPreferences.getString(ENCRYTED_CONTENT, <span class="string">""</span>);</span><br><span class="line">    String encodedIv = mSharedPreferences.getString(ENCRYTED_CONTENT_IV, <span class="string">""</span>);</span><br><span class="line">    <span class="keyword">if</span> (TextUtils.isEmpty(encryptedContent) || TextUtils.isEmpty(encodedIv)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">byte</span>[] cipherIv = Base64.decode(encodedIv, Base64.DEFAULT);</span><br><span class="line">        Cipher cipher = createDecruptCipher(<span class="keyword">new</span> IvParameterSpec(cipherIv));</span><br><span class="line">        <span class="keyword">if</span> (cipher == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">byte</span>[] decodedBytes = Base64.decode(encryptedContent, Base64.DEFAULT);</span><br><span class="line">        <span class="keyword">byte</span>[] decryptBytes = cipher.doFinal(decodedBytes);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> String(decryptBytes, Charset.forName(<span class="string">"UTF8"</span>));</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IllegalBlockSizeException | BadPaddingException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        Log.e(TAG, <span class="string">"Failed to decrypt the data with the generated key."</span> + e.getMessage());</span><br><span class="line">        <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>解密中createDecruptCipher(IvParameterSpec ivParameterSpec)需要的IvParameterSpec正是加密时创建的Cipher的属性</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> Cipher <span class="title">createDecruptCipher</span><span class="params">(IvParameterSpec ivParameterSpec)</span> </span>&#123;</span><br><span class="line">    Cipher mCipher;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        mCipher = Cipher.getInstance(KeyProperties.KEY_ALGORITHM_AES + <span class="string">"/"</span></span><br><span class="line">                + KeyProperties.BLOCK_MODE_CBC + <span class="string">"/"</span></span><br><span class="line">                + KeyProperties.ENCRYPTION_PADDING_PKCS7);</span><br><span class="line">        mKeyStore.load(<span class="keyword">null</span>);</span><br><span class="line">        SecretKey key = (SecretKey) mKeyStore.getKey(KEY_NAME, <span class="keyword">null</span>);</span><br><span class="line">        mCipher.init(Cipher.DECRYPT_MODE, key, ivParameterSpec);</span><br><span class="line">        <span class="keyword">return</span> mCipher;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (KeyPermanentlyInvalidatedException e) &#123;</span><br><span class="line">        Log.e(TAG, <span class="string">"initCipher error "</span> + e.getMessage());</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (NoSuchAlgorithmException | NoSuchPaddingException | IOException |</span><br><span class="line">            CertificateException | UnrecoverableKeyException | InvalidKeyException |</span><br><span class="line">            KeyStoreException | InvalidAlgorithmParameterException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Failed to encrypt pin "</span>, e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Demo代码可以从<a href="https://github.com/wangyeming/AndroidEncryptCacheDemo" target="_blank" rel="noopener">这里</a>获取</p>
<hr>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul>
<li><a href="https://developer.android.com/training/articles/keystore.html" target="_blank" rel="noopener">Android Keystore System</a></li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android的加密缓存(上)--JCA基础]]></title>
      <url>http://wangyeming.github.com/2016/09/29/jca-introduction/</url>
      <content type="html"><![CDATA[<p>  在Java的知识体系中，Java平台安全是很重要的一部分。作为Android开发者，其实这部分知识对我们来说既陌生又熟悉。说熟悉，Android中Apk打包离不开的jks签名文件，Android 6.0提供的指纹识别接口的调用(<a href="https://github.com/googlesamples/android-FingerprintDialog" target="_blank" rel="noopener">Demo</a>), 都是建立在Android平台安全的体系上。而Android平台安全又是建立在Java平台安全的这个坚实的基础上。说陌生，对于<strong>Java密码学架构</strong>(Java Cryptography Architecture 简称JCA)的还挺陌生，该系列文章分为上下两部分，这一篇主要聊聊JCA的基础知识，可能有些枯燥，在下篇，我会结合具体代码，完成一次简单的字符串缓存加密和解密。</p>
<a id="more"></a>

<h2 id="JCA的基本介绍"><a href="#JCA的基本介绍" class="headerlink" title="JCA的基本介绍"></a>JCA的基本介绍</h2><p>先看来自《<a href="http://docs.oracle.com/javase/7/docs/technotes/guides/security/crypto/CryptoSpec.html#Design" target="_blank" rel="noopener">Java Cryptography Architecture<br>(JCA) Reference Guide</a>》的一段背景介绍：</p>
<blockquote>
<p>Java平台重视安全性，包括语言安全性，密码学，公钥基础设施，身份验证，安全通行和访问控制。<br>JCA是JDk平台上非常重要的部分，通过包含一个 “provider”架构，设计了一套API为包括 数字签名、消息摘要、证书和证书验证、加密(对称和非对称，分组和流式密码)、秘钥生成和管理、安全随机码生成等功能服务。</p>
</blockquote>
<p>可以看出，JCA是Java平台安全的基础，其它相关的还有Java密码学拓展(Java Cryptography Extension 简称JCE)、Java Secure Socket Extension (JSSE) 、Java Generic Security Services (JGSS)。</p>
<p><img src="/img/2016-09-29-jca-introduction-01.jpg" alt="java密码学架构"></p>
<h2 id="JCA的设计原则"><a href="#JCA的设计原则" class="headerlink" title="JCA的设计原则"></a>JCA的设计原则</h2><p>JCA在设计之初就遵循一些基本原则，也就是</p>
<ul>
<li>实现的独立性和互操作性</li>
<li>算法的独立性和可扩展性</li>
</ul>
<p>应用无需实现具体的安全算法，或者说应用请求来自Java平台的安全服务。这些安全服务在“providers”（下面会介绍）中实现，这些providers可以互相协作，与应用之间没有必然的绑定限制。Java平台提供了现成的实现算法的providers，应用也可以通过自定义providers来实现特殊的算法。</p>
<h2 id="JCA的架构"><a href="#JCA的架构" class="headerlink" title="JCA的架构"></a>JCA的架构</h2><h3 id="Cryptographic-Service-Providers-CSP-密码服务提供者"><a href="#Cryptographic-Service-Providers-CSP-密码服务提供者" class="headerlink" title="Cryptographic Service Providers CSP 密码服务提供者"></a>Cryptographic Service Providers CSP 密码服务提供者</h3><p>刚才在设计原则那部分，反复提到了“providers”，那providers到底是个什么东西呢? JCA文档是这么介绍的：</p>
<blockquote>
<p>a package or set of packages that supply a concrete implementation of a subset of the JDK Security API cryptography features<br> 一个包或包结合，提供JDK安全API密码特性的具体实现</p>
</blockquote>
<p> 这么看还是很抽象，首先要了解java.security.Provider，这个抽象类是所有安全提供者的基础类。每一个CSP，也就是我们的密码服务提供者，都包含java.security.Provider类的一个实例，这个实例包含了“providers”的名称和所有实现的安全服务/算法的列表，当我们需要某种算法时，JCA框架就会去查询这个“providers”数据库，找到匹配的实例并创建它。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Provider</span> <span class="keyword">extends</span> <span class="title">Properties</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String info;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> version;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> Set&lt;Map.Entry&lt;Object,Object&gt;&gt; entrySet = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">int</span> entrySetCallCount = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">boolean</span> initialized;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>引用下JCA文档中的这张图：</p>
<p><img src="/img/2016-09-29-jca-introduction-02.jpg" alt="java密码学架构--02"></p>
<p>配合这张图就很清晰了，我们开发者处于应用层，JCA框架层对应用层只提供接口，具体的实现逻辑被封装起来。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//我们仅需通过具体的Engine class并提供需要的算法名称“MD5”，我们就可以获得一个provider实现的消息摘要实例</span></span><br><span class="line">MessageDigest md = MessageDigest.getInstance(<span class="string">"MD5"</span>);</span><br></pre></td></tr></table></figure>

<h3 id="Key-Management-秘钥的管理"><a href="#Key-Management-秘钥的管理" class="headerlink" title="Key Management 秘钥的管理"></a>Key Management 秘钥的管理</h3><p>KeyStore是一个数据库，它可以被用于管理秘钥和证书的仓库。秘钥可用于应用的的数据验证，加密或签名。Sun Microsystems提供了默认的KeyStore实现。它将秘钥实现为一个文件，使用专有的秘钥类型(格式)叫“jks”.其他的秘钥格式如”jceks”(一种比jks加密强度更大的秘钥库格式)、”pkcs12”等。Android开发者应该很熟悉jks，打包生成apk的时候，我们就会用到jkd格式的秘钥。</p>
<p>例如，Android系统提供了默认的KeyStore，可以通过名称“AndroidKeyStore”来获取</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">KeyStore mKeyStore = KeyStore.getInstance(<span class="string">"AndroidKeyStore"</span>);</span><br></pre></td></tr></table></figure>

<h3 id="Engine-Classes-and-Algorithms-引擎类和算法"><a href="#Engine-Classes-and-Algorithms-引擎类和算法" class="headerlink" title="Engine Classes and Algorithms 引擎类和算法"></a>Engine Classes and Algorithms 引擎类和算法</h3><p>例如上文MessageDigest就是一类引擎类，1.4会介绍一些常用的引擎类，这里就不多做介绍了。</p>
<h2 id="JCA的核心类和接口"><a href="#JCA的核心类和接口" class="headerlink" title="JCA的核心类和接口"></a>JCA的核心类和接口</h2><p>看到这，想必大家对Providers，KeyStore，引擎类， 算法这些概念有了一些基础的认知。先放松一下，看一下gakki的笑容，放松一下。</p>
<p><img src="/img/2016-09-29-jca-introduction-03.jpg" alt="gakki"></p>
<p>骚年，我们继续。从API这个角度入手，了解一下JCA框架有哪些基础的类。了解之后，才方便我们后面的实战部分。</p>
<p>JCA的类大致可以分为以下几种：</p>
<ul>
<li>Provider and Security 类</li>
<li>各种Engine类，如SecureRandom, MessageDigest, Signature, Cipher, Mac, KeyFactory, SecretKeyFactory, KeyPairGenerator, KeyGenerator, KeyAgreement, AlgorithmParameters, AlgorithmParameterGenerator , KeyStore, and CertificateFactory</li>
<li>Key 接口和类</li>
<li>算法参数规格接口和类(the Algorithm Parameter Specification Interfaces and Classes)<br>秘钥规格接口和类(the Key Specification Interfaces and Classes)</li>
<li>多种支持和便利接口和类</li>
</ul>
<h3 id="Key"><a href="#Key" class="headerlink" title="Key"></a>Key</h3><p>首先了解一下秘钥，对应的定义是java.security.Key，是所有<strong><em>opaque keys</em></strong>的顶层接口，所谓<strong><em>opaque keys</em></strong>，也就是无法直接访问到构成key的材料，也就是说<strong><em>opaque keys</em></strong>给予了访问限制。只能通过getAlgorithm()、getFormat()、getEncoded()这些方法来获取到秘钥指定的信息。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Key</span> <span class="keyword">extends</span> <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">6603384152749567654L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAlgorithm</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getFormat</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">byte</span>[] getEncoded();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="KeyStore"><a href="#KeyStore" class="headerlink" title="KeyStore"></a>KeyStore</h3><p>用于创建和管理秘钥库, KeyStore是秘钥的数据库。秘钥库中的私有秘钥有与之相关的证书链，用于验证相关联的公有密钥。秘钥库也包含来自受信任实体的证书。上文有介绍，这里就不多说了。</p>
<h3 id="KeyGenerator"><a href="#KeyGenerator" class="headerlink" title="KeyGenerator"></a>KeyGenerator</h3><p>通过使用特殊算法来生成秘钥，如果希望生成非对称秘钥，请使用<strong>KeyPairGenerator</strong></p>
<p>初始化：有两种初始化方式：</p>
<p><img src="https://docs.oracle.com/javase/8/docs/technotes/guides/security/images/jca/KeyGenerator.gif" alt="KeyGenerator"></p>
<ul>
<li>算法无关</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(SecureRandom random)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> keysize)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> keysize, SecureRandom random)</span></span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>算法相关</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(AlgorithmParameterSpec params)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(AlgorithmParameterSpec params, SecureRandom random)</span></span>;</span><br></pre></td></tr></table></figure>

<p>  生成秘钥</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> SecretKey <span class="title">generateKey</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>

<ul>
<li><p><strong>AlgorithmParameterSpec</strong></p>
<p>算法参数，看源码可知只是个接口，具体的实现如KeyGenParameterSpec</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> java.security.spec;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* A (transparent) specification of cryptographic parameters.</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* &lt;P&gt; This interface contains no methods or constants. Its only purpose</span></span><br><span class="line"><span class="comment">* is to group (and provide type safety for) all parameter specifications.</span></span><br><span class="line"><span class="comment">* All parameter specifications must implement this interface.</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> Jan Luehe</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@see</span> java.security.AlgorithmParameters</span></span><br><span class="line"><span class="comment">* <span class="doctag">@see</span> DSAParameterSpec</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@since</span> 1.2</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AlgorithmParameterSpec</span> </span>&#123; &#125;</span><br></pre></td></tr></table></figure>

<h3 id="KeyGenParameterSpec"><a href="#KeyGenParameterSpec" class="headerlink" title="KeyGenParameterSpec"></a>KeyGenParameterSpec</h3><p>参数很多，显然也是通过构建者模式进行的初始化，构建者AlgorithmParameterSpec.Builder，重要的参数有<br>秘钥别名，秘钥目的，block modes、EncryptionPadding等</p>
<h3 id="PurposeEnum"><a href="#PurposeEnum" class="headerlink" title="PurposeEnum"></a>PurposeEnum</h3><p>秘钥目的：加密、解密、签名、验证</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> PurposeEnum &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Purpose of key: encryption.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> PURPOSE_ENCRYPT = <span class="number">1</span> &lt;&lt; <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Purpose of key: decryption.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> PURPOSE_DECRYPT = <span class="number">1</span> &lt;&lt; <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Purpose of key: signing or generating a Message Authentication Code (MAC).</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> PURPOSE_SIGN = <span class="number">1</span> &lt;&lt; <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Purpose of key: signature or Message Authentication Code (MAC) verification.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> PURPOSE_VERIFY = <span class="number">1</span> &lt;&lt; <span class="number">3</span>;</span><br></pre></td></tr></table></figure>

<p>下面介绍几个Engine class</p>
<h3 id="Cipher"><a href="#Cipher" class="headerlink" title="Cipher"></a>Cipher</h3><p>用于数据的加密和解密，通过秘钥初始化。有几种不同的算法：如 <strong><em>对称加密协议 symmetric bulk encryption</em></strong>(AES, DES, DESede, Blowfish, IDEA)，<strong><em>流式加密 stream encryption</em></strong>(RC4等)， <strong><em>非对称加密 asymmetric encryption</em></strong>(RSA等), <strong><em>密码基础的加密 password-based encryption</em></strong>(PBE)</p>
<h3 id="signature"><a href="#signature" class="headerlink" title="signature"></a>signature</h3><p>提供用于密码数字签名算法(如DSA或RSAwithMD5)的功能</p>
<h3 id="MessageDigest"><a href="#MessageDigest" class="headerlink" title="MessageDigest"></a>MessageDigest</h3><p>提供密码信息摘要（如SHA-1或MD5）的功能，接受任意直接长度的输入（byte[]格式），生成<br>固定长度的输出(称为digest或hash)</p>
<h3 id="Mac"><a href="#Mac" class="headerlink" title="Mac"></a>Mac</h3><p><strong>M</strong>essage <strong>A</strong>uthentication <strong>C</strong>ode的缩写，与MessageDigest类似， 用于检测信息的完整性以及在不可靠媒介上存储(包含一个secret key，持有正确key的人能够验证已接收的信息)</p>
<hr>
<p>** 参考资料 **</p>
<ul>
<li><a href="http://docs.oracle.com/javase/7/docs/technotes/guides/security/crypto/CryptoSpec.html#Design" target="_blank" rel="noopener">Java Cryptography Architecture(JCA) Reference Guide</a></li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java 容器的简单总结]]></title>
      <url>http://wangyeming.github.com/2016/08/23/java-container-brief-introduction/</url>
      <content type="html"><![CDATA[<p>Java实用类库提供了一套相当完整的容器来帮助我们解决很多具体问题。因为我本身是一名Android开发者，包括我在内很多安卓开发，最拿手的就是ListView(RecycleView)+BaseAdapter+ArrayList三剑客, 平时接触使用的容器也只有ArrayList和HashMap。导致对于整个Java容器体系的掌握和使用还停留在很浅的层面。省不足而思改进，那么跟着我来总结一下Java容器的相关知识吧。</p>
<a id="more"></a>

<h1 id="java容器类的继承结构"><a href="#java容器类的继承结构" class="headerlink" title="java容器类的继承结构"></a>java容器类的继承结构</h1><p>Java容器类库定义了两个不同概念的容器，Collection和Map</p>
<ul>
<li><strong>Collection</strong> 一个独立元素的序列，这些元素都服从一条或多条规则。List必须按照插入的顺序保存元素。Set不能有重复元素。Queue按照排队规则来确定对象产生的顺序。</li>
</ul>
<p><img src="/img/2016-08-23-java-container-brief-introduction-01.jpg" alt="java容器继承结构--Collection"></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Collection</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">Iterable</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Object o)</span></span>;</span><br><span class="line">    <span class="function">Iterator&lt;E&gt; <span class="title">iterator</span><span class="params">()</span></span>;</span><br><span class="line">    Object[] toArray();</span><br><span class="line">    &lt;T&gt; T[] toArray(T[] a);</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object o)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">containsAll</span><span class="params">(java.util.Collection&lt;?&gt; c)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">addAll</span><span class="params">(java.util.Collection&lt;? extends E&gt; c)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">removeAll</span><span class="params">(java.util.Collection&lt;?&gt; c)</span></span>;</span><br><span class="line">    ... <span class="comment">//省略了其他方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看到，java定义了Collection接口和内部集合的基本操作方法，Collection默认可以进行对集合末端添加元素，删除指定元素等操作。List、Set、Queue接口都继承自Collection并定义了各自不同的方法。</p>
<ul>
<li><strong>Map</strong> 一组成对的”键值对”对象，允许我们使用键来查找值。</li>
</ul>
<p><img src="/img/2016-08-23-java-container-brief-introduction-02.jpg" alt="java容器继承结构--Map"></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Map</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">containsKey</span><span class="params">(Object key)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">containsValue</span><span class="params">(Object value)</span></span>;</span><br><span class="line">    <span class="function">V <span class="title">get</span><span class="params">(Object key)</span></span>;</span><br><span class="line">    <span class="function">V <span class="title">put</span><span class="params">(K key, V value)</span></span>;</span><br><span class="line">    <span class="function">V <span class="title">remove</span><span class="params">(Object key)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">putAll</span><span class="params">(java.util.Map&lt;? extends K, ? extends V&gt; m)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">Set&lt;K&gt; <span class="title">keySet</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">Collection&lt;V&gt; <span class="title">values</span><span class="params">()</span></span>;</span><br><span class="line">    Set&lt;java.util.Map.Entry&lt;K, V&gt;&gt; entrySet();</span><br><span class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">        <span class="function">K <span class="title">getKey</span><span class="params">()</span></span>;</span><br><span class="line">        <span class="function">V <span class="title">getValue</span><span class="params">()</span></span>;</span><br><span class="line">        <span class="function">V <span class="title">setValue</span><span class="params">(V value)</span></span>;</span><br><span class="line">        <span class="function"><span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span></span>;</span><br><span class="line">        <span class="function"><span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span></span>;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Map内部接口Entry&lt;K,V&gt;对应着Map的键值对。</p>
<hr>
<h1 id="具体介绍"><a href="#具体介绍" class="headerlink" title="具体介绍"></a>具体介绍</h1><h2 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h2><p>先介绍一下迭代器。迭代器本身也是一种设计模式，设计的初衷在于：容器的实现由很多种，而我们想对容器进行遍历操作的话，首先不应该关心容器实现的细节，其次遍历操作应该是轻量级的。迭代器统一了对容器的访问方式，同时创建它的代价很小。值得注意的是，Iterator只能单向移动。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Iterator</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">E <span class="title">next</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException(<span class="string">"remove"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">forEachRemaining</span><span class="params">(Consumer&lt;? <span class="keyword">super</span> E&gt; action)</span> </span>&#123;</span><br><span class="line">        Objects.requireNonNull(action);</span><br><span class="line">        <span class="keyword">while</span> (hasNext())</span><br><span class="line">            action.accept(next());</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>通过容器的iterator()方法拿到容器的迭代器<br><br>迭代器的next()获取下一个元素<br><br>hasNext()判断是否还有元素<br><br>remove()删除指定元素<br></p>
</blockquote>
<h3 id="ListIterator"><a href="#ListIterator" class="headerlink" title="ListIterator"></a>ListIterator</h3><p>ListIterator是Iterator的扩展之内，用于各种List类访问，支持双向移动。</p>
<h2 id="Collection"><a href="#Collection" class="headerlink" title="Collection"></a>Collection</h2><h3 id="List"><a href="#List" class="headerlink" title="List"></a>List</h3><p>List 承诺可以将元素维护在特定的序列中.List接口在Collection的基础上添加了大量的方法，使得可以再List中间插入和移除元素。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">List</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">Collection</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object o)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">containsAll</span><span class="params">(Collection&lt;?&gt; c)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">addAll</span><span class="params">(Collection&lt;? extends E&gt; c)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">addAll</span><span class="params">(<span class="keyword">int</span> index, Collection&lt;? extends E&gt; c)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">removeAll</span><span class="params">(Collection&lt;?&gt; c)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">retainAll</span><span class="params">(Collection&lt;?&gt; c)</span></span>;</span><br><span class="line">    <span class="function">E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span></span>;</span><br><span class="line">    <span class="function">E <span class="title">set</span><span class="params">(<span class="keyword">int</span> index, E element)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, E element)</span></span>;</span><br><span class="line">    <span class="function">E <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(Object o)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">lastIndexOf</span><span class="params">(Object o)</span></span>;</span><br><span class="line">    java.util.<span class="function">List&lt;E&gt; <span class="title">subList</span><span class="params">(<span class="keyword">int</span> fromIndex, <span class="keyword">int</span> toIndex)</span></span>;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/img/2016-08-23-java-container-brief-introduction-04.jpg" alt="java容器继承结构--List"></p>
<p>有两种类型的List，ArrayList和LinkedList</p>
<table>
<thead>
<tr>
<th>List类型</th>
<th align="center">优点</th>
<th align="center">缺点</th>
<th align="center">底层实现</th>
</tr>
</thead>
<tbody><tr>
<td>ArrayList</td>
<td align="center">随机访问元素较快</td>
<td align="center">中间元素的插入和删除较慢</td>
<td align="center">数组</td>
</tr>
<tr>
<td>LinkedList</td>
<td align="center">中间元素的插入和删除，顺序访问的优化</td>
<td align="center">随机访问元素较慢</td>
<td align="center">双向链表</td>
</tr>
</tbody></table>
<h3 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h3><p>Set不保存重复的元素，通常用于快速查找元素。值得一提的是，Set具有与Collection完全一样的接口，没有任何额外的功能。<br>存入的元素必须定义equals()方法</p>
<table>
<thead>
<tr>
<th>Set类型</th>
<th align="center">使用场景</th>
<th align="center">底层实现</th>
</tr>
</thead>
<tbody><tr>
<td>HashSet</td>
<td align="center">快速查找，元素必须定义hashCode()</td>
<td align="center">链表</td>
</tr>
<tr>
<td>TreeSet</td>
<td align="center">保持次序，元素必须实现Comparable接口</td>
<td align="center">红-黑树结构</td>
</tr>
<tr>
<td>LinkedHashSet</td>
<td align="center">维护次序的HashSet, 元素必须定义hashCode()</td>
<td align="center">链表</td>
</tr>
</tbody></table>
<p><img src="/img/2016-08-23-java-container-brief-introduction-03.jpg" alt="java容器继承结构--Set"></p>
<h3 id="Queue"><a href="#Queue" class="headerlink" title="Queue"></a>Queue</h3><p>除了并发应用，Queue仅有的两个实现是LinkedList和PriorityQueue, 其中LinkedList同时实现了List, Deque接口。它们的差异在于排序行为而不是性能。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Queue</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">Collection</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">offer</span><span class="params">(E e)</span></span>;</span><br><span class="line">    <span class="function">E <span class="title">remove</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">E <span class="title">poll</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">E <span class="title">element</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">E <span class="title">peek</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/img/2016-08-23-java-container-brief-introduction-05.jpg" alt="java容器继承结构--Queue"></p>
<h3 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h3><table>
<thead>
<tr>
<th>Map类型</th>
<th align="center">使用场景</th>
<th align="center">底层实现</th>
</tr>
</thead>
<tbody><tr>
<td>HashMap</td>
<td align="center">快速查询</td>
<td align="center">散列表</td>
</tr>
<tr>
<td>LinkedHashMap</td>
<td align="center">迭代遍历具有顺序(插入顺序 or 最近最少使用)</td>
<td align="center">链表</td>
</tr>
<tr>
<td>TreeMap</td>
<td align="center">具有排序，唯一可以返回子树的Map(subMap())</td>
<td align="center">红-黑树结构</td>
</tr>
<tr>
<td>WeakHashMap</td>
<td align="center">弱键映射，映射之外无引用的键，可以被垃圾回收</td>
<td align="center">散列表</td>
</tr>
<tr>
<td>ConcurrentHashMap</td>
<td align="center">线程安全的Map</td>
<td align="center">链表</td>
</tr>
<tr>
<td>IdentityHashMap</td>
<td align="center">使用==代替equals()对键进行排序，专位解决特殊问题</td>
<td align="center">链表</td>
</tr>
</tbody></table>
<p><img src="/img/2016-08-23-java-container-brief-introduction-06.jpg" alt="java容器继承结构--Map"></p>
<p>我们可以手工调整HashMap来调整性能，涉及到如容量、初始容量、尺寸、负载因子等概念。感兴趣的话可以看一些相关资料。</p>
<h1 id="一些建议"><a href="#一些建议" class="headerlink" title="一些建议"></a>一些建议</h1><ul>
<li>不要使用过时的容器 如Vector Enumeration Hashtable Stack(没错，这就是java最初的糟糕设计，实际中使用栈的话推荐LinkedList)</li>
</ul>
<h1 id="进阶·并发容器"><a href="#进阶·并发容器" class="headerlink" title="进阶·并发容器"></a>进阶·并发容器</h1><p>这里不会讨论的太细致的实现，仅仅简单介绍一下基础知识，感兴趣的可以阅读《Java 并发编程的艺术》这本书。</p>
<span id="jump11">

<h2 id="CopyOnWriteArrayList与Copy-On-Write策略"><a href="#CopyOnWriteArrayList与Copy-On-Write策略" class="headerlink" title="CopyOnWriteArrayList与Copy-On-Write策略"></a>CopyOnWriteArrayList与Copy-On-Write策略</h2><p>本节引用自<a href="http://ifeve.com/java-copy-on-write/" target="_blank" rel="noopener">并发编程网-聊聊并发-Java中的Copy-On-Write容器</a></p>
<p>Copy-On-Write简称COW，是一种用于程序设计中的优化策略。其基本思路是，从一开始大家都在共享同一个内容，当某个人想要修改这个内容的时候，才会真正把内容Copy出去形成一个新的内容然后再改，这是一种延时懒惰策略。从JDK1.5开始Java并发包里提供了两个使用CopyOnWrite机制实现的并发容器,它们是CopyOnWriteArrayList和CopyOnWriteArraySet。CopyOnWrite容器非常有用，可以在非常多的并发场景中使用到。</p>
<blockquote>
<p>CopyOnWrite容器即写时复制的容器。通俗的理解是当我们往一个容器添加元素的时候，不直接往当前容器添加，而是先将当前容器进行Copy，复制出一个新的容器，然后新的容器里添加元素，添加完元素之后，再将原容器的引用指向新的容器。这样做的好处是我们可以对CopyOnWrite容器进行并发的读，而不需要加锁，因为当前容器不会添加任何元素。所以CopyOnWrite容器也是一种读写分离的思想，读和写不同的容器。</p>
</blockquote>
<p>CopyOnWrite容器只能保证数据的最终一致性，不能保证数据的实时一致性。所以如果你希望写入的的数据，马上能读到，请不要使用CopyOnWrite容器。</p>
<span id="jump12">

<h2 id="ConcurrentLinkedQueue"><a href="#ConcurrentLinkedQueue" class="headerlink" title="ConcurrentLinkedQueue"></a>ConcurrentLinkedQueue</h2><p>在并发编程中，有时候需要使用线程安全的队列或列表。通常实现线程安全有两种方式，一种是使用阻塞算法，一种是使用非阻塞算法。非阻塞算法实现基础为循环CAS(Compare and Swipe 比较和交换)。</p>
<p>ConcurrentLinkedQueue技术上的实现与CopyOnWriteArrayList与Copy类似，但是容器只有部分内容而不是整个容器可以被复制和修改。ConcurrentLinkedQueue有head节点和tail节点组成，每个节点由节点元素(item)和指向下一个结点(next)的引用组成。节点之间通过next关联起来，形成一张链表结构的队列。</p>
<span id="jump13">

<h2 id="ConcurrentHashMap与锁分段技术"><a href="#ConcurrentHashMap与锁分段技术" class="headerlink" title="ConcurrentHashMap与锁分段技术"></a>ConcurrentHashMap与锁分段技术</h2><p>ConcurrentHashMap是线程安全且高效的HashMap。多线程环境下，使用非线程安全的HashMap会导致死循环，而如文章中建议的那样，HashTable这种过时容器效率低下(使用synchronized来保证线程安全)。ConcurrentHashMap使用锁分段技术，大大提高了并发使用的效率。</p>
<blockquote>
<p>锁分段技术: 假设容器有多把锁，每一把锁用于锁容器其中一部分数据，当多线程访问容器不同数据段数据时，线程间就不存在锁竞争，从而提高并发访问效率。</p>
</blockquote>
<h2 id="阻塞队列"><a href="#阻塞队列" class="headerlink" title="阻塞队列"></a>阻塞队列</h2><p>JDK7 提供了7个阻塞队列，实现原理都是基于生产-消费模式的等待通知机制。</p>
<table>
<thead>
<tr>
<th>阻塞队列类型</th>
<th align="left">特点</th>
</tr>
</thead>
<tbody><tr>
<td>ArrayBlockingQueue</td>
<td align="left">由数组结构组成的有界阻塞队列</td>
</tr>
<tr>
<td>LinkedBlockingQueue</td>
<td align="left">由链表结构组成的有界阻塞队列</td>
</tr>
<tr>
<td>PriorityBlockingQueue</td>
<td align="left">支持优先级排序的无界阻塞队列</td>
</tr>
<tr>
<td>DelayQueue</td>
<td align="left">使用优先级队列实现的无界阻塞队列</td>
</tr>
<tr>
<td>SynchronousQueue</td>
<td align="left">不储存元素的阻塞队列</td>
</tr>
<tr>
<td>LinkedTransferQueue</td>
<td align="left">由链表结构组成的无界阻塞队列</td>
</tr>
<tr>
<td>LinkedBlockingQueue</td>
<td align="left">由链表结构组成的双向阻塞队列</td>
</tr>
</tbody></table>
<p>感谢阅读~</p>
</span></span></span>]]></content>
      
        
        <tags>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[java 打印线程的六种状态]]></title>
      <url>http://wangyeming.github.com/2016/08/22/java-thread-state/</url>
      <content type="html"><![CDATA[<p>java线程在运行的生命周期中有六种不同的状态。在给定的一个时刻，线程只能处于其中的一个状态。<br>那如何在代码中打印出这六种不同状态的线程呢？</p>
<a id="more"></a>

<p>借用Java并发编程艺术里面 java线程的六种状态的表格</p>
<p><img src="/img/2016-08-22-java-thread-state.PNG" alt="java线程的六种状态"></p>
<p>闲言少叙，上代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        print(<span class="string">"-------------线程的六种状态的打印---------------"</span>);</span><br><span class="line">        Thread sleepThread = <span class="keyword">new</span> Thread(<span class="keyword">new</span> SleepingRunnale());</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 初始状态，线程被构建，但是还没有调用start()方法</span></span><br><span class="line"><span class="comment">         * &#123;<span class="doctag">@link</span> Thread.State.NEW&#125;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        print(sleepThread.getState().toString());</span><br><span class="line">        sleepThread.start();</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 运行状态,</span></span><br><span class="line"><span class="comment">         * &#123;<span class="doctag">@link</span> Thread.State.RUNNABLE&#125;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        print(sleepThread.getState().toString());</span><br><span class="line">        sleepScond(<span class="number">1</span>);</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 此时线程内正执行sleep方法,可以在指定时间内返回，此时正处于超时等待状态</span></span><br><span class="line"><span class="comment">         * &#123;<span class="doctag">@link</span> Thread.State.TIMED_WAITING&#125;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        print(sleepThread.getState().toString());</span><br><span class="line">        sleepScond(<span class="number">3</span>);</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 线程执行完毕，终止状态</span></span><br><span class="line"><span class="comment">         * &#123;<span class="doctag">@link</span> Thread.State.TERMINATED&#125;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        print(sleepThread.getState().toString());</span><br><span class="line"></span><br><span class="line">        Thread waitThread = <span class="keyword">new</span> Thread(<span class="keyword">new</span> WaitRunnable());</span><br><span class="line">        Thread blockedThread = <span class="keyword">new</span> Thread(<span class="keyword">new</span> BlockedRunnable());</span><br><span class="line"></span><br><span class="line">        waitThread.start();</span><br><span class="line">        blockedThread.start();</span><br><span class="line"></span><br><span class="line">        sleepScond(<span class="number">1</span>);</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 由于waitThread获取了类对象的锁，blockedThread阻塞于锁</span></span><br><span class="line"><span class="comment">         * &#123;<span class="doctag">@link</span> Thread.State.BLOCKED&#125;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        print(blockedThread.getState().toString());</span><br><span class="line"></span><br><span class="line">        sleepScond(<span class="number">2</span>);</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 此时waitThread进入等待状态，释放了锁，blockedThread获得了锁，并处于TIMED_WAITING状态</span></span><br><span class="line"><span class="comment">         * &#123;<span class="doctag">@link</span> Thread.State.WAITING&#125;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        print(waitThread.getState().toString());</span><br><span class="line">        print(<span class="string">"-------------Over~---------------"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">WaitRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (WaitRunnable.class) &#123;</span><br><span class="line">                sleepScond(<span class="number">3</span>);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    WaitRunnable.class.wait();      <span class="comment">//3秒后进入等待状态,释放锁</span></span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">BlockedRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (WaitRunnable.class) &#123;</span><br><span class="line">                sleepScond(<span class="number">3</span>);</span><br><span class="line">                WaitRunnable.class.notify();    <span class="comment">//通知锁释放</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SleepingRunnale</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            sleepScond(<span class="number">3</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(String content)</span> </span>&#123;</span><br><span class="line">        System.out.println(content);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sleepScond</span><span class="params">(<span class="keyword">long</span> seconds)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(seconds);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>执行结果：</p>
<p><img src="/img/2016-08-22-java-thread-state-02.PNG" alt="执行结果"></p>
]]></content>
      
        
        <tags>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[java 知识点整理--java5新特性(未完)]]></title>
      <url>http://wangyeming.github.com/2016/08/18/java-knowledge-point/</url>
      <content type="html"><![CDATA[<p>算是一个读书笔记吧，很多知识点不总结很容易忘记，没有什么特别系统和深奥的知识点，我们做安卓开发的，java就是我们的地基之一，温故知新，共勉。<br>每个特性后面给出<em>Effective java</em>的建议，让我们荡漾在理论的海洋中吧~</p>
<a id="more"></a>

<p>本篇主要简述java5的新特性，分别是:</p>
<ul>
<li>泛型</li>
<li>枚举</li>
<li>注解</li>
<li>for-each循环</li>
<li>自动装箱和自动拆箱</li>
<li>可变参数</li>
<li>静态导入</li>
<li>并发包java.util.concurrent</li>
</ul>
<hr>
<h3 id="泛型（Generic-Type"><a href="#泛型（Generic-Type" class="headerlink" title="泛型（Generic Type)"></a>泛型（Generic Type)</h3><blockquote>
<p>泛型保证了集合的类型安全，没有泛型，从集合中读取的值必须手动进行类型强转，一旦插入类型错误的对象，强转就会出错。有了泛型，编译器预知集合接受的类型，自动进行类型强转，且能在编译时告知是否类型出错。(<em>Effective Java p97 第五章</em>)</p>
</blockquote>
<p><strong>概念</strong>：泛型类+泛型接口(声明中具有一个或多个<strong>类型参数</strong>的类或接口)</p>
<p><strong>写法</strong>：类名或接口名后跟着&lt;&gt;, 如List&lt;String&gt;</p>
<h4 id="引入概念："><a href="#引入概念：" class="headerlink" title="引入概念："></a>引入概念：</h4><p><strong>原生态类型</strong>：不带任何实际类型参数的泛型名称，如List&lt;E&amp;&gt;对应的原生态类型为List</p>
<p><strong>无限制的通配符类型</strong>：用？表示，不确定或不关心实际的类型参数， List&lt;?&gt; 只能添加null，不能添加其他元素</p>
<p><strong>有限的通配符类型</strong>：&lt;? extends 具体类型&gt;  &lt;? super 具体类型&gt; &lt;? extends 具体类型 &amp; 具体接口类型&gt;</p>
<p><strong>显式的类型说明</strong>：在类名和方法名中加一个.&lt;具体类型&gt;</p>
<p>泛型的擦除机制：编译时强化类型，运行时丢弃元素的类型信息。</p>
<p>数组和列表的差异：</p>
<ul>
<li>数组是<strong>协变</strong>的，列表不是。比如Sub是Super的子类型，则Sub[]是Super[]的子类型，但List&lt;Sub&gt;不是List&lt;Super&gt;的子类型</li>
<li>数组是具体化的，列表(除了无限制的通配符类型)是不可具体化的。不可具体化表示运行时包含的信息比编译时少(泛型的擦除机制)</li>
</ul>
<h4 id="Effective-Java的建议"><a href="#Effective-Java的建议" class="headerlink" title="Effective Java的建议"></a>Effective Java的建议</h4><ul>
<li>请不要在新代码中使用原生态类型，除了类文字(*.class)必须使用， instanceof(泛型的擦除机制)</li>
<li>消除非受检警告，无法消除切能证明该警告是类型安全的，可以用@SuppreeWarnings(‘unchecked’)注解来消除，并且范围要尽可能小，同时添加注解，告知原因</li>
<li>列表优先于数组(数组和列表的差异)</li>
<li>优先考虑泛型</li>
<li>优先考虑泛型方法</li>
<li>利用有限通配符来提升API的灵活性</li>
<li>优先考虑类型安全的异构容器(异构：容器内元素类型不同)</li>
</ul>
<hr>
<h3 id="枚举-Enum"><a href="#枚举-Enum" class="headerlink" title="枚举(Enum)"></a>枚举(Enum)</h3><blockquote>
<p>相对于传统的int/string枚举类型，枚举提供了编译时的安全，自动的序列化，是真正的final</p>
</blockquote>
<p><strong>概念</strong>：由一组常量组成合法值的类型。</p>
<h4 id="引入概念：-1"><a href="#引入概念：-1" class="headerlink" title="引入概念："></a>引入概念：</h4><p><strong>位域</strong>： 用OR位运算将几个常量合并到一个集合中。</p>
<h4 id="Effective-Java的建议-1"><a href="#Effective-Java的建议-1" class="headerlink" title="Effective Java的建议"></a>Effective Java的建议</h4><ul>
<li>用enum代替int常量</li>
<li>用实例域代替序数， 永远不要根据枚举的序数导出与它关联的值，最好完全避免使用ordinal方法</li>
<li>用EnumSet代替位域，当底层的枚举类型少于等于64个时，整个EnumSet就是用单个long表示，性能堪比位域</li>
<li>用EnumMap代替序数索引</li>
<li>用接口模拟可伸缩的枚举</li>
</ul>
<hr>
<h3 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h3><blockquote>
<p>注解也被称作元数据，为我们在代码中添加信息提供了一种形式化的方法，使我们可以再稍后某个时刻非常方便的地使用这些数据(Java编程思想 第20章 p620)</p>
</blockquote>
<p>java.lang 提供了三个内置注解</p>
<pre><code>@Override 表示当前方法覆盖超类方法
@Deprecated 表示废弃的方法或域
@SuppressWarnings 关闭不当的编译器警告</code></pre><p><strong>元注解</strong>： java提供四种元注解，专门负责新注解的创建</p>
<pre><code>@Target 定义注解将应用在什么地方。ElementType.METHOD(方法) FIELD(域) LOCAL_VARIAVLE(局部变量) CONSTRUCTIOR(构造器) PACKAGE(包) PARAMETER(参数) TYPE(类,接口,enum)
@Retention  表示在什么级别保存该注解信息。SOURCE(编译器丢弃) CLASS(class可用，被VM丢弃) RUNTIME(运行期也保留，可通过反射机制读取该注解信息)
@Documented 将此注解包含在Javadoc中
@Inherited 允许之类继承父类的注解</code></pre><p>例如：</p>
<pre><code>@Target(ElementType.METHOD)
@Retention(RetentionPolicy.RUNTIME)
public @interface Test {}</code></pre><p>在比如我们在Android中经常用到的注解：</p>
<pre><code>public final class Gender {

    @IntDef({MAN, WOMAN, OTHER})
    public @interface Type {}

    public static final int MAN = 0;
    public static final int WOMAN = 1;
    public static final int OTHER = 2;
}</code></pre><h4 id="接口元素"><a href="#接口元素" class="headerlink" title="接口元素"></a>接口元素</h4><p>接口允许的元素类型有：</p>
<ul>
<li>基本类型</li>
<li>String</li>
<li>Class</li>
<li>enum</li>
<li>Annotation</li>
<li>以上类型的数组</li>
</ul>
<p>元素的默认值有限制，首先不能有不确定的值(要么必须有默认值，要么使用注解时必须提供)，其次对于非基本类型元素，不能给null值</p>
<p>语法为：public int id() default -1;</p>
<h4 id="注解处理器"><a href="#注解处理器" class="headerlink" title="注解处理器"></a>注解处理器</h4><p>AnnotatedElement接口</p>
<ul>
<li>getAnnotation(Class<t> annotationClass) 如果存在该元素的指定类型的注释，则返回这些注释，否则返回 null</t></li>
<li>getAnnotations()  返回此元素上存在的所有注释。</li>
<li>getDeclaredAnnotations()  返回直接存在于此元素上的所有注释。</li>
<li>isAnnotationPresent(Class&lt;? extends Annotation&gt; annotationClass)  如果指定类型的注释存在于此元素上，则返回 true，否则返回 false。</li>
</ul>
<h4 id="Effective-Java的建议-2"><a href="#Effective-Java的建议-2" class="headerlink" title="Effective Java的建议"></a>Effective Java的建议</h4><ul>
<li>注解优于命名模式(增加错误提示、确保只用于相应元素、参数值与程序元素关联)</li>
<li>坚持使用Override注解</li>
<li>用标记接口定义类型(标记接口值没有包含方法声明的接口)</li>
</ul>
<hr>
<h3 id="for-each循环"><a href="#for-each循环" class="headerlink" title="for-each循环"></a>for-each循环</h3><p>这部分就不多说了</p>
<h4 id="Effective-Java的建议-3"><a href="#Effective-Java的建议-3" class="headerlink" title="Effective Java的建议"></a>Effective Java的建议</h4><ul>
<li>for-each循环优于传统的for循环</li>
</ul>
<hr>
<h3 id="自动装箱和自动拆箱"><a href="#自动装箱和自动拆箱" class="headerlink" title="自动装箱和自动拆箱"></a>自动装箱和自动拆箱</h3><p>每个基本类型都有对应的引用类型，称为装箱类型。如int的装箱类型为Integer.</p>
<p><strong>主要区别</strong>：</p>
<ul>
<li>基本类型只有值，装箱类型具有与它们值不同的同一性。即两个装箱类型值相同，但是可以是不同的同一性。</li>
<li>基本类型只有功能完备的值，装箱类型还有个非功能值null</li>
<li>基本类型比装箱类型节约时间和空间</li>
</ul>
<h4 id="Effective-Java的建议-4"><a href="#Effective-Java的建议-4" class="headerlink" title="Effective Java的建议"></a>Effective Java的建议</h4><ul>
<li>基本类型优先于装箱基本类型(集合中的键和值，泛型中的参数化类型必须使用装箱基本类型)</li>
</ul>
<hr>
<h3 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h3><p>可变参数方法接受0个或多个指定类型的参数</p>
<h4 id="Effective-Java的建议-5"><a href="#Effective-Java的建议-5" class="headerlink" title="Effective Java的建议"></a>Effective Java的建议</h4><ul>
<li>慎用可变参数(可变参数方法的每次调用都会导致进行一次数组分配和数组化)</li>
</ul>
<hr>
<h3 id="静态导入-static-import"><a href="#静态导入-static-import" class="headerlink" title="静态导入(static import)"></a>静态导入(static import)</h3><p>也没什么好说的 import static xxx;<br>在大量利用工具类导出的常量时，使用静态导入机制，避免用类名来修饰常量名</p>
<hr>
<h3 id="并发包java-util-concurrent"><a href="#并发包java-util-concurrent" class="headerlink" title="并发包java.util.concurrent"></a>并发包java.util.concurrent</h3><p>这部分限于目前掌握情况，暂时等待补充吧</p>
]]></content>
      
        
        <tags>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android 图片轮播器的实现及源码解析]]></title>
      <url>http://wangyeming.github.com/2016/08/16/image-banner/</url>
      <content type="html"><![CDATA[<p>在很多产品，尤其是电商类社区内的网页或者app中，我们经常会看到一个图片轮播墙，一页一页的广告/活动/商品介绍每隔一段时间就切换到下一张。那在安卓中我们该如何实现图片轮播器呢？面对自定义样式、自定义图片加载框架等等复杂的自定义需求，如何设计接口使得使用者可以很方便的自定义属性呢？接下来我从<a href="https://github.com/wangyeming/ImageBanner" target="_blank" rel="noopener">wangyeming/ImageBanner</a>源码出发，探讨下我对这个小小功能框架的设计和实现。</p>
<a id="more"></a>

<h2 id="图片轮播，一页两页，一页两页"><a href="#图片轮播，一页两页，一页两页" class="headerlink" title="图片轮播，一页两页，一页两页"></a>图片轮播，一页两页，一页两页</h2><p><img src="/img/2016-08-16-image-banner-01.gif" alt="图片轮播"></p>
<p>首先明确需求:</p>
<ol>
<li>图片轮播器由若干张不定的页面构成,每个页面上的元素包括：图片（必选） + 指示器（可选，可能是点点点，可能是数字等）</li>
<li>可以手势滑动图片的切换</li>
<li>闭环展示，第一张的左边是最后一张，最后一张的右边是第一张，无限循环播放。</li>
</ol>
<p>看一下我画的设计结构图(很丑，轻拍)</p>
<p><img src="/img/2016-08-16-image-banner-02.PNG" alt="设计结构图"></p>
<p>可以看到有这么几个对象：</p>
<p><strong>ImageBanner</strong>：自定义控件，包含定时任务管理器TimerController、增强ViewPager、指示器BannerIndicator。内部包含了诸如开启，关闭轮播等逻辑。设计为抽象类，通过钩子方法实现UI样式的自定义。</p>
<p><strong>TimerController</strong>： 定时任务管理器, 无论是Timer也好，手动设计的定时Handler也好，它的职责就是执行定时任务，具体到图片轮播器里，职责就通知CirclePageAdapter和BannerIndicator切换到下一张。</p>
<p><strong>CustomSwipeViewPager</strong>： 增强ViewPager， 方便随时禁止和开启手势滑动。</p>
<p><strong>CirclePageAdapter</strong>： ViewPager的adapter, 通过在左右两边各增加一个伪Pager，滑动到0，和最后一个时，无动画切换到最后一个和0，从而实现循环滑动。同样设计为抽象类，ImageView的样式，图片加载的方式等同样通过钩子方法留出来供使用者自定义。</p>
<p><strong>BannerIndicator</strong>:  指示器,设计成接口形式，实现该接口的自定义View都可以作为轮播器当中的指示器。最大程度自定义UI。</p>
<hr>
<h3 id="如何使用？"><a href="#如何使用？" class="headerlink" title="如何使用？"></a>如何使用？</h3><ul>
<li>派生CirclePageAdapter，实现单个图片加载的样式和点击事件</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomCirclePageAdapter</span> <span class="keyword">extends</span> <span class="title">CirclePageAdapter</span>&lt;<span class="title">BannerImage</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CustomCirclePageAdapter</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">showImage</span><span class="params">(ImageView vImage, BannerImage bannerImage)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//自定义采用何种图片加载方式</span></span><br><span class="line">        Glide.with(mContext)</span><br><span class="line">            .load(bannerImage.getImagePath())</span><br><span class="line">            .placeholder(R.drawable.default_loading)</span><br><span class="line">            .error(R.drawable.topic_pic)</span><br><span class="line">            .dontAnimate()</span><br><span class="line">            .into(vImage);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onClickImage</span><span class="params">(<span class="keyword">final</span> BannerImage bannerImage)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//自定义每张图片的点击事件</span></span><br><span class="line">        Uri uri = Uri.parse(bannerImage.getLink());</span><br><span class="line">        Intent intent = <span class="keyword">new</span> Intent(Intent.ACTION_VIEW, uri);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            mContext.startActivity(intent);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> ImageView <span class="title">createImageView</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//自定义图片的样式</span></span><br><span class="line">        ImageView vImage = <span class="keyword">new</span> ImageView(mContext);</span><br><span class="line">        vImage.setLayoutParams(<span class="keyword">new</span> LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, DemoUtil.dp2px(mContext, <span class="number">100</span>)));</span><br><span class="line">        vImage.setScaleType(ImageView.ScaleType.FIT_XY);</span><br><span class="line">        <span class="keyword">return</span> vImage;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>自定义指示器（可选），实现BannerIndicator接口即可</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomBannerIndicator</span> <span class="keyword">extends</span> <span class="title">LinearLayout</span> <span class="keyword">implements</span> <span class="title">BannerIndicator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;ImageView&gt; vimg = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CustomBannerIndicator</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(context, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CustomBannerIndicator</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(context, attrs, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CustomBannerIndicator</span><span class="params">(Context context, AttributeSet attrs, <span class="keyword">int</span> defStyleAttr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs, defStyleAttr);</span><br><span class="line">        init();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        setOrientation(HORIZONTAL);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showInitState</span><span class="params">(<span class="keyword">int</span> imageCount)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; imageCount; i++) &#123;</span><br><span class="line">            ImageView vImage = <span class="keyword">new</span> ImageView(getContext());</span><br><span class="line">            LinearLayout.LayoutParams layoutParams = <span class="keyword">new</span> LinearLayout.LayoutParams(FrameLayout.LayoutParams.WRAP_CONTENT, FrameLayout.LayoutParams.WRAP_CONTENT);</span><br><span class="line">            <span class="keyword">int</span> margin = DemoUtil.dp2px(getContext(), <span class="number">10</span>);</span><br><span class="line">            layoutParams.setMargins(margin, <span class="number">0</span>, margin, <span class="number">0</span>);</span><br><span class="line">            vImage.setLayoutParams(layoutParams);</span><br><span class="line">            vimg.add(vImage);</span><br><span class="line">            vImage.setBackgroundResource(i == <span class="number">0</span> ? R.drawable.dot_choosen_ic : R.drawable.dot_unchoosen_ic);</span><br><span class="line">            addView(vImage);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notifyIndexChanged</span><span class="params">(<span class="keyword">int</span> indexOfImage)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; vimg.size(); i++) &#123;</span><br><span class="line">            vimg.get(i).setBackgroundResource(i == indexOfImage ? R.drawable.dot_choosen_ic : R.drawable.dot_unchoosen_ic);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>配置ImageBanner</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomImageBanner</span> <span class="keyword">extends</span> <span class="title">ImageBanner</span>&lt;<span class="title">BannerImage</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CustomImageBanner</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CustomImageBanner</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CustomImageBanner</span><span class="params">(Context context, AttributeSet attrs, <span class="keyword">int</span> defStyleAttr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs, defStyleAttr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">getLayoutRes</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> R.layout.custom_banner;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">getImagePagerViewId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> R.id.image_parer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> CirclePageAdapter&lt;BannerImage&gt; <span class="title">initCirclePageAdapter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CustomCirclePageAdapter(getContext());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">getBannerIndicatorViewId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> R.id.image_indicator;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>在xml中使用：</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">com.tianyeguang.imagebanner.banner.CustomImageBanner</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/custom_image_banner"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"136dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_margin</span>=<span class="string">"16dp"</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>传入数据，正确的开启和关闭轮播的定时器：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onResume</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onResume();</span><br><span class="line">    vBanner.start();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPause</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    vBanner.finish();</span><br><span class="line">    <span class="keyword">super</span>.onPause();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>具体的代码大家可以查看<a href="https://github.com/wangyeming/ImageBanner" target="_blank" rel="noopener">demo</a>, demo的样式就是博文上的示意图，谢谢大家的阅读~</p>
]]></content>
      
        <categories>
            
            <category> Android View系列 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android 上拉加载的简单实现]]></title>
      <url>http://wangyeming.github.com/2016/08/15/pull-load-more/</url>
      <content type="html"><![CDATA[<p>在android产品中，<strong>上拉加载</strong> 在某种程度上与下拉刷新一样，可以看做用户使用产品最常见的交互之一。当列表数据量很大时，我们通常不会一次性请求和展示所有的数据，而是启用分页功能。那市面上常见的app的上拉加载功能都有哪些特点呢？如何选取适合自己项目的上拉加载样式并实现呢？<br>接下来我们会简单分析并实现<strong>两种</strong>目前最常见的上拉加载样式，并分别给出集成到项目中的建议。</p>
<a id="more"></a>

<h2 id="Android-上拉加载的简单实现"><a href="#Android-上拉加载的简单实现" class="headerlink" title="Android 上拉加载的简单实现"></a>Android 上拉加载的简单实现</h2><hr>
<h2 id="上拉加载交互的分类"><a href="#上拉加载交互的分类" class="headerlink" title="上拉加载交互的分类"></a>上拉加载交互的分类</h2><p>根据交互的不同，我给这两种上拉取了个名字，分别叫做<strong>二次上拉型</strong>和<strong>自动加载型</strong>。<br>二次上拉型，顾名思义，是一种和下拉刷新交互类似的上拉，FooterView可以看做和下拉刷新时的HeaderView，当用户滚动列表到底部时，不会主动触发上拉。<br>只有当用户的手指再次执行上拉动作时，FooterView才随着手指向上的移动而展示出来。当手指上拉的距离到达设定的临界值时，触发上拉加载。直接上图：</p>
<p><img src="/img/2016-08-15-pull-load-more-01.gif" alt="上拉样式1"></p>
<p>仔细观察动图我们可以发现，当用户滑动列表到底部时，首先看到了水波纹，然后用户再次上拉，加载更多的底部才会展示出来。</p>
<p>自动加载型，则比较像在列表的底部增加了单独的item，如ListView的addFooterView的方法，滑动到底部自动展示出FooterView，没有手指继续拉动触发上拉的交互。看图：</p>
<p><img src="/img/2016-08-15-pull-load-more-02.gif" alt="上拉样式2"></p>
<blockquote>
<p>这里插播一则小感悟，产品和设计很多时候其实并不知道他们要实现的功能和样式到底是什么样的，产品说要做分页，设计说那你就看着别人怎么做的，滑到底部有上拉就可以了。苦逼的还是码农，如果像我一样不幸一开始采用二次上拉型，最后沟通很很久才发现其实设计想要的是自动加载型，那真是欲哭无泪啊。再次证明，好的安卓开发应该对市面上的app常见的交互及实现心里应该有个谱，这样讨论样式和交互的时候才不会被误导，做无用功。</p>
</blockquote>
<h2 id="开源库调研"><a href="#开源库调研" class="headerlink" title="开源库调研"></a>开源库调研</h2><p>言归正传，让我们来分析下两种上拉加载都有哪些现有的轮子呢？不幸的是，轮子有，但说实话都不尽如人意.</p>
<ul>
<li>第一种上拉加载的开源库实现并不多，通常都是第三方下拉刷新附带的功能，或者官方SwipeRefreshLayouy的拓展。这里推荐我自己的一个开源项目 <a href="https://github.com/wangyeming/SuperSwipeRefreshLayout" target="_blank" rel="noopener">wangyeming/SuperSwipeRefreshLayout</a>，<br>用法类似官方的SwipeRefreshLayout, 对内部子元素没有侵入性，缺点是暂不支持任意布局。<br>我曾经调研过很多开源的支持上拉刷新的控件，不过都不尽如人意。一来这种上拉的交互体验不是很好，用户需要二次上拉才会触发加载，导致相应的开源库非常少。其次是本身实现起来需要考虑的点比较多，尤其是想要支持任意布局的话，还是有难度的。从项目角度，我们当然希望引入的第三方库尽可能小，易于修改，自定义。<br>一些开源库如<a href="https://github.com/bingoogolapple/BGARefreshLayout-Android" target="_blank" rel="noopener">bingoogolapple/BGARefreshLayout-Android</a>等对项目来说实在是太重了。再比如类似于XListView这种，局限性太强，只能使用固定的view，不是个好的解决方案。依我个人浅见，前面推荐的SuperSwipeRefreshLayout至少还是比较适合引入到项目中，只有SuperSwipeRefreshLayout.java一个文件, 无侵入性，缺点前面也说了，暂时不支持任意布局。</li>
</ul>
<blockquote>
<p>其实如果进项目中看，会发现其实也是fork了一个官方SwipeRefreshLayouy的拓展的开源库，在实际使用中，真是发现了无数个坑，不光上拉没做好，下拉也被改的各种bug，README中有我做了哪些修改和增强，其实整个的设计还是遵循原来的方案，对于后续的想法，个人感觉上拉的实现还是过于粗糙，对child支持也不够，希望有兴趣和能力的小伙伴和我一起完善这个库，谢谢啦~</p>
</blockquote>
<ul>
<li>相对来说，第二种上拉的开源组件就很多了，思路都大同小异，自定义的ListView或RecyclerView或adpater，比如<a href="https://github.com/jianghejie/XRecyclerView" target="_blank" rel="noopener">jianghejie/XRecyclerView</a>, <a href="https://github.com/HomHomLin/Android-PullToRefreshRecyclerView" target="_blank" rel="noopener">HomHomLin/Android-PullToRefreshRecyclerView</a> 等等。 从项目角度，我们在项目中一般都有自己的下拉刷新控件，我们希望引入的库不光体积小，侵入少，最好只集成最基础的上拉，把下拉的职责交还给下拉刷新控件。这里有一个库很不错，<a href="https://github.com/CymChad/BaseRecyclerViewAdapterHelper" target="_blank" rel="noopener">CymChad/BaseRecyclerViewAdapterHelper</a>, 从使用角度，任意的RecyclerView，只要adapter继承自库中的基类adapter即可，而下拉功能依旧可以使用之前项目中的下拉刷新组件。</li>
</ul>
<p>既然要用，我们就好好分析下这个库的功能和实现，我们发现这个库集成的功能还是比较多的，包括各种动画效果，侧滑，真正的上拉加载其实只是其中的一小部分功能。与其平白无故多了十几个文件，我们不如分析下这个库的实现原理，自己动手来简单实现一个上拉加载的组件。</p>
<h2 id="简单实现"><a href="#简单实现" class="headerlink" title="简单实现"></a>简单实现</h2><p>先问目的：前面说的很清楚了，简单易用的上拉加载的轮子。</p>
<p>实现方式：自定义基类adapter，如果把adapter原数据源简单抽象为一种itemType，那我们的工作就是再增加一种itemType，对应着上拉加载的FooterView。因为RecyclerView没有ListView那样addHedaer()和setEmptyView()的方法，所以我们这里再增加两种itemType：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TYPE_HEADER = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TYPE_BASE = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TYPE_EMPTY = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TYPE_LOADMORE = <span class="number">3</span>;</span><br></pre></td></tr></table></figure>

<p>毫无疑问，我们设计的adapter应该可以自定义上拉加载的样式，这里我将上拉View的样式简单的分为三个场景：加载中，加载失败，没有更多。根据设计原则，依赖抽象而不是依赖具体实现，这里设计了一个抽象的LoadMoreView</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">LoadMoreView</span> <span class="keyword">extends</span> <span class="title">FrameLayout</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LoadMoreView</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">showLoading</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">showRetry</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">showEnd</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">boolean</span> <span class="title">isLoadMoreEnable</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">setOnRetryClickListener</span><span class="params">(OnRetryClickListener listener)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里设计的几个接口也比较粗糙，通过钩子方法，大家可以根据需求自己定义上拉View的样式。</p>
<p>接下来的事就简单多了，对外暴露的方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showLoadMoreLoading</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    vLoadMore.showLoading();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showLoadMoreRetry</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    vLoadMore.showRetry();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showLoadMoreEnd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    vLoadMore.showEnd();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHeaderView</span><span class="params">(View vHeader)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.vHeader = vHeader;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEmptyView</span><span class="params">(View vEmpty)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.vEmpty = vEmpty;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>只要处理好getItemCount(), getItemViewType(),  onBindViewHolder(),  onCreateViewHolder()这几个基本的方法，我们的轮子就初步完工啦。</p>
<p>具体代码大家可以参考： <a href="https://github.com/wangyeming/LoadMoreRecyclerViewAdapter" target="_blank" rel="noopener">wangyeming/LoadMoreRecyclerViewAdapter</a>, 里面有完成的代码和实现。</p>
<p>谢谢大家~</p>
]]></content>
      
        <categories>
            
            <category> Android View系列 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
